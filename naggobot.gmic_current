#@gmic
# (^ don't forget this first line !)
#
#GMic filters from Arto Huotari. All filters lisenced under the same Cecill lisence as G'Mic
#
#####################################################################
# Artistic Folder
#####################################################################
#@gimp _<b>Artistic</b>

#****************************************
#Dream smoothing
#****************************************
#@gimp Dream smoothing : gimp_dreamsmooth, gimp_dreamsmooth_preview(0)
#@gimp : note = note("Updated for 1.5.4.0")
#@gimp : note = note("A relatively slow filter that uses anisotropic filtering to smooth an image. More iterations produces softer image as does lower opacity values. Practical modes for merging are Alpha and Average. Note that results are resolution dependent.")
#@gimp : sep = separator(), note = note("General settings")
#@gimp : Iterations = int(3,1,10)
#@gimp : Equalize at each step = bool(1)
#@gimp : sep = separator(), note = note("Merging of iterations")
#@gimp : Merging Option = choice(1,"add","alpha","and","average","blue","burn","darken",
#@gimp : "difference","divide","dodge","exclusion","freeze",
#@gimp : "grainextract","grainmerge","green","hardlight","hardmix",
#@gimp : "hue","interpolation","lighten","lightness","linearburn",
#@gimp : "linearlight","luminance","multiply","negation","or",
#@gimp : "overlay","pinlight","red","reflect","saturation","screen",
#@gimp : "shapeaverage","softburn","softdodge","softlight","stamp",
#@gimp : "subtract","value","vividlight","xor","edges")
#@gimp : Opacity = float(0.8,0,1)
#@gimp : Reverse order = bool(0)
#@gimp : note = note("Settings for layer mode edges")
#@gimp : Smoothness = float(0.8,0,5)
#@gimp : sep = separator()
#@gimp : note = note("Parallel processing settings. Increase spatial overlap if vertical bands appear.")
#@gimp : Parallel processing = choice(1,"Auto","One thread","Two threads","Four threads","Eight threads","Sixteen threads")
#@gimp : Spatial overlap = int(24,0,256)
#@gimp : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gimp : sep = separator(), note = note("<small> Author: Arto Huotari Latest update : <i>2014/02/20</i>.</small>")
#@gimp : note = link("Sample processing here","http://www.flickr.com/photos/naggobot/7644006608/")


gimp_dreamsmooth :
-m "MergeChoise : $""=_mode" -MergeChoise "add","alpha","and","average","blue","burn","darken","difference","divide","dodge","exclusion","freeze","grainextract","grainmerge","green","hardlight","hardmix","hue","interpolation","lighten","lightness","linearburn","linearlight","luminance","multiply","negation","or","overlay","pinlight","red","reflect","saturation","screen","shapeaverage","softburn","softdodge","softlight","stamp","subtract","value","vividlight","xor","edges","error"

-to_rgb
Iterations=$1
Eqa=$2
MergingOption=$3
Opacity=$4
ReverseOrder=$5
Smoothness=$6
Threads=$7
Overlap=$8
#Handle multiple layers
-repeat @# -l[$>]
#Enter loop and smooth first image
-repeat $Iterations
	#Calculate width and height
	IWidth={round(@{0,w}/(@{<,-1}+1))}
	IHeight={round(@{0,h}/(@{<,-1}+1))}
	#Resize previously processed image. Not done on first repeat loop since there is no such image yet.
	-if {@{>,-1}!=0}
		#Resize [image_w],[image_h],[image_d],[image_s],_interpolation,_boundary,_ax,_ay,_az,_ac
		-r[-1] $IWidth,$IHeight,1,3,5,1
	-endif
	#Resize and make a copy
	--r[0] $IWidth,$IHeight,1,3,5,1 #Image 1 and on loop 2 image 2 / -1 and -2
	#Smoothing
	-gimp_anisotropic_smoothing[-1] {430/$Iterations*(@{<,-1}+1)},0.4,0.5,0.6,2,0.8,30,2,0,0,1,0,$Threads,$Overlap,0
	-gimp_anisotropic_smoothing[-1] {600/$Iterations*(@{<,-1}+1)},0.4,1,0.6,4,0.8,15,5,0,1,1,0,$Threads,$Overlap,0
	#Combine images	if not first round
	-if {@{>,-1}!=0}
		#Something wrong with this boolean. It does not work.
#		-if {_mode{$MergingOption+1}'!='{'"edges"'}}
		-if {$3'!='42}
			-blend[-1,-2] ${_mode{$MergingOption+1}},$Opacity,$ReverseOrder
		-endif
		-if {$3'=='42}
#		-if {_mode{$MergingOption+1}'=='{'"edges"'}}
			 -blend_edges[-1,-2] $Opacity,$Smoothness,$ReverseOrder
		-endif
		-if {$Eqa}
			-equalize[-1] 256
		-endif
	-endif
-done
-keep[-1]
#End command for multilayer handling block
-endl -done

gimp_dreamsmooth_preview :
  -gimp_split_preview "-gimp_dreamsmooth ${1--2}",$-1

#************END OF FILTER*************


#****************************************
#Morphology painting
#****************************************

#@gimp Morphology painting : gimp_MorphoPaint, gimp_MorphoPaint_preview(0)
#@gimp : sep = separator()
#@gimp : note = note("Creates a painting using Morphology-, Segmentation- and Painting- filters. CPU intensive filter that may take long.")
#@gimp : sep = separator()
#@gimp : note = note("Morphology settings")
#@gimp : sep = separator()
#@gimp : Method = choice(1,"Erosion","Dilation","Opening","Closing")
#@gimp : MorphoStrenght = int(18,2,60)
#@gimp : Shape = choice(2,"Square","Octagonal","Circular")
#@gimp : sep = separator()
#@gimp : note = note("Lightness for Morpholayer")
#@gimp : Black Point = int(25,0,50)
#@gimp : Expand Shadows = int(100,50,255)
#@gimp : Compress Highlights = int(230,200,255)
#@gimp : sep = separator()
#@gimp : note = note("Smoothing strength")
#@gimp : Spread amount = int(8,0,20)
#@gimp : Blurr Strength = int(3,0,10)
#@gimp : sep = separator()
#@gimp : note = note("Segmentation settings")
#@gimp : Edge threshold = float(4,0,15)
#@gimp : Smoothness = float(0.5,0,5)
#@gimp : sep = separator()
#@gimp : note = note("Painting Settings")
#@gimp : Abstraction = int(2,1,10)
#@gimp : Details scale = float(0.5,0,5)
#@gimp : Smoothness = float(200,0,1000)
#@gimp : sep = separator()
#@gimp : Merge layers? = bool(1)
#@gimp : note = note("When unchecked the filter will output layers separately for manual composing. Set G'Mic output to new layers.")
#@gimp : sep = separator()
#@gimp : Enable Paintstroke = bool(1)
#@gimp : Stroke strength = float(1,0,1)
#@gimp : Enable Segmentation = bool(1)
#@gimp : Segments strength= float(1,0,1)
#@gimp : Enable Morphology = bool(1)
#@gimp : Morphology strength= float(1,0,1)
#@gimp : Normalize = bool(1)
#@gimp : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gimp : sep = separator(), note = note("<small>Author : <i>Arto Huotari</i>.      Latest update : <i>2013/09/28</i>.</small>")
#@gimp : note = link("Filter Explained here","http://www.flickr.com/photos/naggobot/6108637935/")

gimp_MorphoPaint :
-to_rgb[0]
--gimp_morpho[0] $1,$2,0,2,0,$3,0 #Morpho as nro 1
--gimp_apply_curve[1] $4,50,$5,200,$6,-1,128,-1,128,-1,128,255,1,3,0,0,0 #Curved morpho as nro 2
-gimp_spread[1] $7,$7,0,0 #Spread Morpho nro 1
-gimp_gaussian_blur[2] $8,0,0,1,0,0,0 #Blurr Morpho+Spread nro 1
-gimp_segment_watershed[1] $9,$10,0,0 #Segment Morpho+Spread+Blurr nro 1
--gimp_painting[0] $11,$12,1.5,$13,1,0 #Paint from original nro 0
-remove[0] #Remove original from stack
-reverse[0,2] #reverse images to logical order (Important if output to Gimp)
-reverse[1,2]
-if $14

	-if {$19==0} MorphoStrength={0} -elif {$19==1} MorphoStrength={$20} -endif	#Set layer value to zero if enabled
	-mul[2] {$MorphoStrength/3} #Morphology

	-if {$15==0} StrokeStrength={0} -elif {$15==1} StrokeStrength={$16} -endif	#Set layer value to zero if enabled
	-mul[0] {$StrokeStrength/3} #Paint stroke

	-if {$17==0} SegmentStrength={0} -elif {$17==1} SegmentStrength={$18} -endif	#Set layer value to zero if enabled
	-mul[1] {$SegmentStrength/3}  #Segments

	-add[1] [2] #Combine images
	-add[1] [0]

		-if $21 -normalize[1] 0,255 -endif #Conditional normalize to get the image to correct range
	-remove[0,2] #remove extra images
-endif

gimp_MorphoPaint_preview :
  -gimp_split_preview "-gimp_MorphoPaint ${1--2}",$-1


#****************************************
#Simple Noise canvas
#****************************************

#@gimp Simple noise canvas : gimp_SimpleNoiseCanvas, gimp_SimpleNoiseCanvasPreview(0)
#@gimp : note = note("Simpe noise based xy canvas effect. Preserve canvas and bumpmap image with canvas after filtering for best results. Merge option DoNothing outputs only original image if Preserve canvas option is not selected.")
#@gimp : sep = separator()
#@gimp : Scale factor = float(0,0,1)
#@gimp : sep = separator()
#@gimp : note = note("Noise parameters")
#@gimp : Amplitude = float(3,0,20)
#@gimp : Noise type = choice(2,"Gaussian","Uniform","Salt and pepper","Poisson")
#@gimp : sep = separator()
#@gimp : note = note("Thread length")
#@gimp : Horisontal length = float(5,2,15)
#@gimp : Vertical length = float(5,2,15)
#@gimp : Over all blurr = float(0,0,15)
#@gimp : Canvas brightness = float(255,230,255)
#@gimp : Canvas darkness = float(0,0,255)
#@gimp : sep = separator()
#@gimp : note = note("How to combine XY threads")
#@gimp : Merging Option = choice(2,"Average","Multiply","Darken","Edges")
#@gimp : Invert Canvas Colors = bool(0)
#@gimp : Invert Image Colors = bool(0)
#@gimp : note = note("How to combine image + canvas")
#@gimp : Reverse order = bool(0)
#@gimp : Merging Option = choice (1,"Avg","Multiply","Scr","Darken","Lighten","Dif","Negation","Exclusion","Overlay","Hardlight","Softlight","Dodge","Colorburn","Reflect","Freeze","Stamp","Interpolate","Grainext","Grainmerge","Xor","Edges","DoNothing")
#@gimp : Preserve Canvas for post bump mapping = bool(0)
#@gimp : Canvas Color = color(255,255,255,255)
#@gimp : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gimp : sep = separator(), note = note("<small>Author : <i>Arto Huotari</i>.      Latest update : <i>2013/09/28</i>.</small>")
#@gimp : note = link("Filter Explained here","http://www.flickr.com/photos/naggobot/6152040642/")

gimp_SimpleNoiseCanvas :
#Filter has some unnecessary reversing of layers due to change from compose to blend
CanvasScale={$1}
NoiseAmplitude=$2
NoiseType=$3
ThreadHorizLen=$4
ThreadVertLen=$5
OverAllBlurr=$6
HighCut=$7
LowCut=$8
CanvasMergeChoice=$9
InvertCanvasColors=$10
InvertImageColors=$11
ReverseChoice=$12
MergeChoice=$13
PreserveCanvas=$14
#(Remember that color is set directly with param 15-17)

#Remove alpha channel from image
-to_rgb[0]

#Invert scale factor for scaling
CanvasScale={1.2-$CanvasScale}

#Make white base image with specified color and resize it to inputimage size
(255^255^255)
-r[-1] [0]

#Resize to scale factor
-r[1] {100*$CanvasScale}%,{100*$CanvasScale}%

#add noise
-if {$NoiseType!=2} NoiseAmplitude={($NoiseAmplitude*10)} -endif
-gimp_noise[1] $NoiseAmplitude,$NoiseType,0,1,0
#make noise BW
-gimp_ditheredbw[1] 1,1,0,0,0,0 #[G'MIC] B&W dithering
#Blur X for noize, make new image
--gimp_gaussian_blur[1] 0,$ThreadHorizLen,0,1,0,0,0 #image 2
#Blur y for noize, make new image
--gimp_gaussian_blur[1] 0,0,$ThreadVertLen,1,0,0,0 #image 3
-normalize[2] 0,255
-normalize[3] 0,255

#Combine canvas

#-if {$CanvasMergeChoice==0} -blend[2,3] average
#-elif {$CanvasMergeChoice==1} -blend[2,3] multiply
#-elif {$CanvasMergeChoice==2} -blend[2,3] darken
#-elif {$CanvasMergeChoice==3} -blend_edges[2,3] 0.9
#-endif

-if {$CanvasMergeChoice==0} -blend[2,3] average
-elif {$CanvasMergeChoice==1} -blend[2,3] multiply
-elif {$CanvasMergeChoice==2} -blend[2,3] darken
-elif {$CanvasMergeChoice==3} -blend_edges[2,3] 0.9
-endif


#OverAllBlurr
-gimp_gaussian_blur[2] $OverAllBlurr,0,0,1,0,0,0 #image 3

#Remove noise image
-remove[1]

#scale canvas back to image size
-r[1] [0]

#Make color and transfer it
($15^$16^$17) #image 2
-r[2] [0]
-blend[1,2] multiply

#Adjust range
-gimp_apply_curve {$LowCut},-1,128,-1,128,-1,128,-1,128,-1,128,{$HighCut},1,3,0,0,0

#reverse if requested
-if {$ReverseChoice==1} -reverse[0,1] -endif

#Invert canvas colors if requested
-if {$InvertCanvasColors==1} -negative[1] -endif

#Invert Image colors if requested
-if {$InvertImageColors==1} -negative[0] -endif

#Combine to original

-if {$MergeChoice==0} --blend[1,0] average #Image 2
-elif {$MergeChoice==1} --blend[1,0] multiply
-elif {$MergeChoice==2} --blend[1,0] screen
-elif {$MergeChoice==3} --blend[1,0] darken
-elif {$MergeChoice==4} --blend[1,0] lighten
-elif {$MergeChoice==5} --blend[1,0] difference
-elif {$MergeChoice==6} --blend[1,0] negation
-elif {$MergeChoice==7} --blend[1,0] exclusion
-elif {$MergeChoice==8} --blend[1,0] overlay
-elif {$MergeChoice==9} --blend[1,0] hardlight
-elif {$MergeChoice==10} --blend[1,0] softlight
-elif {$MergeChoice==11} --blend[1,0] dodge
-elif {$MergeChoice==12} --blend[1,0] colorburn
-elif {$MergeChoice==13} --blend[1,0] reflect
-elif {$MergeChoice==14} --blend[1,0] freeze
-elif {$MergeChoice==15} --blend[1,0] stamp
-elif {$MergeChoice==16} --blend[1,0] interpolation
-elif {$MergeChoice==17} --blend[1,0] grainextract
-elif {$MergeChoice==18} --blend[1,0] grainmerge
-elif {$MergeChoice==19} --blend[1,0] xor
-elif {$MergeChoice==20} --blend_edges[1,0] 0.8
-endif
#Reverse original and canvas if it was done previously
-if {$ReverseChoice==1} -reverse[0,1] -endif
#Remove canvas if not asked to preserve
-if {$PreserveCanvas==0} -remove[1]  -endif
#PreserveCanvas=1
-if {$PreserveCanvas==1" && "$MergeChoice!=21} -reverse[1,2]  -endif

#remove original if merging is done
-if {$MergeChoice!=21} -remove[0] -endif

#Switch items for correct preview

-if {$MergeChoice!=21" && "$PreserveCanvas==1} -reverse[0,1] -endif

gimp_SimpleNoiseCanvasPreview :
  -gimp_split_preview "-gimp_SimpleNoiseCanvas ${1--2}",$-1

#************END OF FILTER*************

######################################
#Gimp pastell
#####################################
#@gimp Pastell art : gimp_pastell, gimp_pastell_preview(1)
#@gimp : MasterOpacity = float(0.6,0.3,1)
#@gimp : Bg textured = bool(1)
#@gimp : Reverse Effect = bool(0)
#@gimp : sep = separator(),note = note("Rodilius settings")
#@gimp : Amplitude = float(20,0,30)
#@gimp : Thickness = float(30,0,100)
#@gimp : Sharpness = float(300,0,1000)
#@gimp : Orientations = int(1,1,36)
#@gimp : Offset = float(30,0,180)
#@gimp : Color mode = choice(1,"Darker","Lighter")
#@gimp : sep = separator(),note = note("Gradient settings")
#@gimp : Smoothness = float(1,0,10)
#@gimp : Linearity = float(0.5,0,1.5)
#@gimp : Negative colors = bool(0)
#@gimp : sep = separator(),Activate Shakes = bool(0)
#@gimp : Amount = float(10,0,30)
#@gimp : Strenth = float(3,1,300)
#@gimp : sep = separator(),Activate Lizards = bool(0)
#@gimp : Toes = float(9,0,300)
#@gimp : Shivers = float(3,0,4)
#@gimp : sep = separator(),Activate Pink elephants = bool(0)
#@gimp : Trunks = float(12,0,100)
#@gimp : sep = separator()
#@gimp : sep = separator(), Preview type = choice(0,"Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gimp : sep = separator(), note = note("<small>Author : <i>Arto Huotari</i>.      Latest update : <i>2013/09/28</i>.</small>")
#@gimp : note = link("Filter Explained here","http://www.flickr.com/photos/naggobot/6294075073/")
gimp_pastell :
#Filter may have some unnecessary reversing of layers due to change from compose to blend
#Variables
MasterOpacity=$1
BgTextured=$2
ReverseEffect=$3
RAmplitude=$4
RThickness=$5
RSharpness=$6
ROrientations=$7
ROffset=$8
RColormode=$9
GSmoothness=$10
GLinearity=$11
GNegativeColors=$12
ActivateShakes=$13
RiAmplitude=$14
RiSize=$15
ActivateLizards=$16
WAmplitude=$17
WSmoothness=$18
ActivatePink=$19
RDeform=$20
#Constants
RChannels=0
GMinThreshold=0
GMaxThreshold=100
RiShape=3
RiAngle=135
#Code
-if {$ActivatePink==1} -deform[0] $RDeform -endif
--gimp_rodilius[0] $RAmplitude,$RThickness,$RSharpness,$ROrientations,$ROffset,$RColormode,$RChannels,0 #img1
--gimp_gradient_norm[0] $GSmoothness,$GLinearity,$GMinThreshold,$GMaxThreshold,$GNegativeColors,0 #img2
-gimp_bilateral[0] 15,10,3,3,0
-if {$ActivateLizards==1} -water[0,2] $WAmplitude,$WSmoothness -endif
-if {$ActivateShakes==1} -ripple[0,2] $RiAmplitude,$RiSize,$RiShape,$RiAngle,0 -endif
-if {$ReverseEffect==1} -reverse[0,2] -endif
--blend[0,2] divide,1,0 #img3
-reverse[1,3]
-blend[1,3] value,1,0 #img1
-if {$BgTextured==1} -gimp_ellipsionism[0] 20,2,10,0.5,1,1,0 -endif
-blend[0,1] alpha,$MasterOpacity,0
-keep[0]
gimp_pastell_preview :
  -gimp_split_preview "-gimp_pastell ${1--2}",$-1


######################################
#ColorAbstractionPaint
#####################################
#@gimp Color Abstraction Paint : gimp_ColorAbstractionPaint, gimp_ColorAbstractionPaint_Preview(0)
#@gimp : Abstraction = int(5,1,10)
#@gimp : Ellipse ratio = float(10,1,100)
#@gimp : sep = separator(),note = note("Opacities, try 0 to see individual effect layers")
#@gimp : Ellipsionism opacity = float(1,0,1)
#@gimp : sep = separator()
#@gimp : Use as Hue = bool(0)
#@gimp : Painting opacity = float(1,-1,1)
#@gimp : sep = separator()
#@gimp : Use as Saturation = bool(0)
#@gimp : Color abstraction opacity = float(1,-1,1)
#@gimp : Negative Color Abstraction = bool(0)
#@gimp : Cubism on Color Abstraction = bool(0)
#@gimp : Kuwahara on painting = bool(0)
#@gimp : Soften = float(0,0,100)
#@gimp : Soften all channels = bool(0)
#@gimp : DoNotMergeLayers = bool(0)
#@gimp : sep = separator()
#@gimp : sep = separator(), Preview type = choice(0,"Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gimp : note = link("Sample art here","http://www.flickr.com/photos/naggobot/6640743133/")
#@gimp : sep = separator(), note = note("<small>Author : <i>Arto Huotari</i>.      Latest update : <i>2014/02/23</i>.</small>")

gimp_ColorAbstractionPaint :
#Filter may have some unnecessary reversing of layers due to change from compose to blend
#Alternative merge is Ellipsionism->Value, Painting -> Hue, Color -> Saturation
#Force rgb
-to_rgb

#Ellipsionism e
pAbstraction=$1
EllipseRatio=$2
ValueOpacity=$3
UseHue=$4
MultiplyOpacity=$5
UseSaturation=$6
GrainMergeOpacity=$7
NCA=$8
CubeIt=$9
KuwaIt=$10
Soften=$11
SoftenAll=$12
DoNotCompose=$13
ReverseOrder0=1
ReverseOrder1=1
ReverseOrder2=1
eSmoothness=1
eOpacity=0.8
eOutline=1
eDensity={1.5*$eSmoothness/10}
#Painting p
pDetailsScale={$pAbstraction/2}
pColor=1.5
pSmoothness={10*$pAbstraction}
#y=y0+(x-x0)(y1-y0)/(x1-x0)
#Smoothness Y goes to 10 from 0 when abstraction X goes to 1 from 10
eSmoothness={10+($pAbstraction-1)*(1-10)/(10-1)}
ePrimaryRadius={($pAbstraction/5)*($pAbstraction/5)*sqrt(@{0,h})}
eSecondaryRadius={$EllipseRatio/100*$ePrimaryRadius}
cAbstraction={2+($pAbstraction-1)*(10-2)/(10-1)}
#CubeSize={$ePrimaryRadius*$cAbstraction/30}
CubeSize={4+($pAbstraction-1)*(10-4)/(10-1)}

--gimp_ellipsionism[0] $ePrimaryRadius,$eSecondaryRadius,$eSmoothness,$eOpacity,1,$eDensity,0 #1 #-3
-if {$SoftenAll==1" && "$Soften>0} -blur[-1] $Soften,0 -endif
--gimp_painting[0] $pAbstraction,$pDetailsScale,$pColor,$pSmoothness,1,0 #2 #-2
-if {$KuwaIt==1} -gimp_kuwahara[-1] 2,$pAbstraction,0,0 -endif
-if {$Soften>0} -blur[-1] $Soften,0 -endif
--gimp_color_abstraction[0] $cAbstraction,45,0.35,0 #3 #-1
#If negative then invert colors of -1
-if {$NCA==1} -negative[-1] -endif
-if {$CubeIt==1} -cubism[-1] 600,$CubeSize,40,0.7,0 -endif
-if {$Soften>0} -blur[-1] $Soften,0 -endif
-if {$DoNotCompose==0}
	#Compose Original and Ellipsionism with value
	-blend[0,1] value,$ValueOpacity,$ReverseOrder0 #0 #-3
	#Compose Original+Ellipsionism with painting
	-if {$MultiplyOpacity<0}
		ReverseOrder1=0
		MultiplyOpacity={-1*$MultiplyOpacity}
	-endif
	-if {$UseHue==0}
		-blend[0,1] multiply,$MultiplyOpacity,$ReverseOrder1 #0 #-2
	-elif {$UseHue==1}
		-blend[0,1] hue,$MultiplyOpacity,$ReverseOrder1
	-endif

	#Compose Original+Ellipsionism+Painting with Color abstraction
	-if {$GrainMergeOpacity<0}
		ReverseOrder2=0
		GrainMergeOpacity={-1*$GrainMergeOpacity}
	-endif
	-if {$UseSaturation==0}
		-blend[0,1] grainmerge,$GrainMergeOpacity,$ReverseOrder2
	-elif {$UseSaturation==1}
		-blend[0,1] saturation,$GrainMergeOpacity,$ReverseOrder2
	-endif
	-keep[0]
-endif
-if {$DoNotCompose==1} -remove[0] -endif

gimp_ColorAbstractionPaint_Preview :
  -gimp_split_preview "-gimp_ColorAbstractionPaint ${1--2}",$-1

#****************************************
#Make Squiggly
#****************************************
#@gimp Make Squiggly : gimp_Squiggly, gimp_Squiggly_Preview(0)
#@gimp : note = note("Squigles an image")
#@gimp : note = note("Squigle parameters")
#@gimp : Spread noise amount  = float(2,0,20)
#@gimp : Segmentation edge threshold = float(12,0,15)
#@gimp : Segmentation smoothness = float(0.8,0,5)
#@gimp : GradienNormSmoothness = float(0,0,10)
#@gimp : GradienNormLinearity = float(0.5,0,1.5)
#@gimp : Invert Luminance = bool(1)
#@gimp : sep = separator()
#@gimp : sep = separator()
#@gimp : note = note("<b>Optional color enhancement</b>")
#@gimp : note = note("Note that the effect of sliders depends on the merge setting.")
#@gimp : Activate Color Enhancement = bool(0)
#@gimp : Toggle to view base image = bool(0), note = note("Check this to view base image")
#@gimp : IncreaseChroma1 = float(3,1,4)
#@gimp : Tone threshold = float(0.2,0,1)
#@gimp : Tone gamma = float(0.4,0,1)
#@gimp : note = note("Select merging mode to original")
#@gimp : Merging Option = choice("Alpha","And","Average","Burn","Darken","Difference","Divide","Dodge","Exclusion","Freeze","Grain extract","Grain merge",
#@gimp : "Hard light","Hue","Interpolation","Lighten","Lightness","Luminance","Multiply","Negation","Or","Overlay","Reflect","Saturation",
#@gimp : "Soft light","Screen","Stamp","Value","Xor")
#@gimp : Opacity = float(1,0,1)
#@gimp : Reverse order = bool(1)
#@gimp : sep = separator()
#@gimp : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gimp : sep = separator(), note = note("<small>Author : <i>Arto Huotari</i>.      Latest update : <i>2013/09/28</i>.</small>")
#@gimp : note = link("Filter Explained here","http://www.flickr.com/photos/naggobot/6667673847/")


gimp_Squiggly :

#Variables
SpreadNoiseAmount=$1
SEgThrshld=$2
SegSmooth=$3
GNSmooth=$4
GNLin=$5
InvertLuminance=$6
EnhanceColors=$7
ToggleOrg=$8
Chroma=$9
ToneTr=$10
ToneGm=$11
OrgMergeCh=$12
OrgOpacity=$13
OrgReverseorder=$14

#Enable original preview from color enhancement section
-if {$ToggleOrg==1}
	OrgMergeCh=30
	OrgReverseorder=1
-endif

#Remove alpha channel, something goes wrong if image has aplha
-to_rgb

--gimp_spread[0] $SpreadNoiseAmount,$SpreadNoiseAmount,0,0  #Spread noise (image1)
-gimp_segment_watershed[1] $SEgThrshld,$SegSmooth,0,0   #Segmentation (image1)
--gimp_gradient_norm[1] $GNSmooth,$GNLin,0,100,0,0 #Gradient norm (image2)

#Create colorized squiggle
--blend[2,1] multiply #image 3

#Make bg white
-if {$InvertLuminance==1}
	#Convert to LAB
	-rgb2lab[-1]
	#Split channels
	-split[-1] c
	-negative[-3]
	-append[-3--1] c
	-lab2rgb[-1]
-endif

-if {$EnhanceColors==1}
	#Increase chroma
	-gimp_mix_ycbcr[3] 1,0,0,$Chroma,0,0,$Chroma,0,0,0,2,0 #image 3
	#Tonemap original
	-gimp_map_tones[0] $ToneTr,$ToneGm,0.1,30,0,0 #image 0
	#-gimp_apply_curve[0] 0,30,128,-1,128,-1,128,-1,128,-1,128,255,1,3,0,0,0
	#Compose Squigglies to original
	-gimp_blend[0,3] $OrgMergeCh,$OrgOpacity,$OrgReverseorder
	-keep[0]
-endif

-keep[-1]

gimp_Squiggly_Preview :
  -gimp_split_preview "-gimp_Squiggly ${1--2}",$-1

#************END OF FILTER*************


#################################################################################################################
#@gimp _<b>Details</b>
#################################################################################################################

#******************************************
#USM WITH LCE
#******************************************
#@gimp Local contrast enhancement : gimp_LCE, gimp_LCE_preview(0)
#@gimp : note = note("Local contrast enhancement is <i>Unsharp Mask</i> with high radius. Apply to filter to RGB channels for color and contrast enhancement.")
#@gimp : Spatial radius = float(80,30,200)
#@gimp : Amount = float(0.5,0,5)
#@gimp : Darkness level = float(1,0,4)
#@gimp : Lightness level = float(1,0,4)
#@gimp : Channel(s) = choice(3,"All","RGBA","RGB","Luminance","Blue/red chrominances","Blue chrominance","Red chrominance","Lightness","ab-components","a-component","b-component","Hue","Saturation","Value","Key","Alpha","ch-components","c-component","h-component","Red","Green","Blue","Alpha")
#@gimp : sep = separator(), Preview type = choice(0,"Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gimp : note = note{"\n\n<small><b>Note : </b>
#@gimp : Original USM code by <i>by David Tschumperl&#233;</i>.
#@gimp : </small>"}
#@gimp : sep = separator(), note = note("<small>Authors : <i>Arto Huotari, PhotoComiX</i>.      Latest update : <i>2013/03/23</i>.</small>")
_gimp_LCE :
SpatialRadius=$1
Amount=$2
DarknessLevel=$3
LightnessLevel=$4
#Since LCE a threshold of 0 is used always
Threshold=0
--blur[-1] $SpatialRadius
--[-1] [-2] -*[-1] -$Amount
--norm[-1] -ge[-1] $Threshold% -r[-1] [-2] -*[-2,-1]
--c[-1] 0,100% -c[-2] -100%,0 -*[-2] $DarknessLevel -*[-1] $LightnessLevel -+[-2,-1]
-+[-2,-1] -c[-1] 0,255
gimp_LCE :
  -apply_channels "-_gimp_LCE $1,$2,$3,$4",$5,0
gimp_LCE_preview :
  -gimp_split_preview "-gimp_LCE ${1--2}",$-1
#******************************************
#END OF FILTER
#******************************************

#******************************************
#YAG effect
#******************************************
#@gimp YAG_effect : gimp_yag_soften, gimp_yag_soften_preview(0)
#@gimp : Darken  = float(0,0,100)
#@gimp : Soften  = float(0,0,100)
#@gimp : sep = separator(), Preview type = choice(0,"Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gimp : sep = separator(), note = note("<small>Author : <i>Arto Huotari</i>.      Latest update : <i>2013/09/28</i>.</small>")
#@gimp : note = link("Filter Explained here","http://www.flickr.com/photos/naggobot/6260257923/")
gimp_yag_soften :
Darken=$1
Soften=$2
#Make sharpener layer
--gimp_laplacian[0] 0,0,100,0,0,0 #image 1
#Blurr laplacian
-if {$Soften>0}
-gimp_gaussian_blur[1] {$Soften/10},0,0,1,0,0,0
-endif
#Make soft and vivid
--gimp_mix_lab[0] 0.5,50,0.2,1,2,1,1,2,1,0,10,0 #image 2
#Make darkener mask with softlight
#Multiply with previous darkener mask
-if {$Darken>0}
	--blend[0,2] softlight #image 3
	-blend[0,3] multiply,{$Darken/100}
-endif
#Compose soft and vidid with hardlight
-blend[0,2] hardlight #image0 is modified, image 2 is removed
#Sharpen with grainextract
-if {$Soften!=100}
	-blend[0,1] grainextract #Image 0 image 1 is removed
-elif {$Soften==100}
	-remove[1]
-endif
gimp_yag_soften_preview :
  -gimp_split_preview "-gimp_yag_soften ${1--2}",$-1


#******************************************
#END OF FILTER
#******************************************

#################################################################################################################
#@gimp _<b>Various</b>
#################################################################################################################
#******************************************
#Import 16 bit image
#******************************************
#@gimp Import 16bit image : gimp_import_image_16, gimp_import_image_16
#@gimp : Note = note("Filter can be used to import and adjust 16 bit images to Gimp. Plugin may have limited set of import formats available depending on compilation. At minimum only .png should work reliably.")
#@gimp : Note = note("1. Create new empty image to Gimp")
#@gimp : Note = note("2. Open G'Mic from filters menu")
#@gimp : Note = note("3. Set G'Mic output to "new layers")
#@gimp : Note = note("4. Select 16 bit image from folder")
#@gimp : Note = note("5. Make adjustments using sliders")
#@gimp : Note = note("6. Image will be outputted to Gimp")
#@gimp : Note = note("By default a scaled down image is processed. Before processing full size disable preview window from gui.")
#@gimp : Note = note("LAB adjustment often yields more aesthetic results than RGB adjustment.")
#@gimp : Input image = file()
#@gimp : Process selection = choice(1,"Preview Only", "Histogram", "Logarithmic Histogram", "Full resolution")
#@gimp : Gamma = float(2.2,0,5)
#@gimp : sep = separator(), Note = note("LAB adjustment")
#@gimp : Brightness = float(0,-1,1)
#@gimp : Contrast = float(1,0,3)
#@gimp : Equalize = float(0,0,1)
#@gimp : Saturation = float(0,-1,10)
#@gimp : A(R-G) = float(0,-1,1)
#@gimp : B(Y-B) = float(0,-1,1)
#@gimp : sep = separator(), Note = note("RGB cut and normalize histogram by percentage")
#@gimp : Cut high light values = float(100,0,100)
#@gimp : Cut dark values = float(0,0,100)
#@gimp : Sep = separator(), note = note("<small>Author: <i>Arto Huotari;</i>.      Latest update: <i>2014/04/02</i>.</small>")

gimp_import_image_16 :
#Variables
ProcessTo=$2
Gamma=$3
Brightness=$4
Contrast=$5
Equalize=$6
AB=$7
A=$8
B=$9
CutHigh=$10
CutLow=$11
#Remove import image
-rm -i
#Import image from disk
"$1"
#Make sure that the input is rgb
-to_rgb
#Scale down to preview size
-if {$ProcessTo!=3}
	-resize2dx 520,1
-endif
-apply_gamma $Gamma
#Check if image has pixelvalues over 255
#Correct only for gamma if not
-if {@{0,M}>256}
	-if $Equalize
		--equalize 65535
		-blend alpha,{$Equalize/2}
	-endif
	#Scale values to 0 to 1 range
	-div 65535
	#Separate luminance from colour
	-rgb2lab
	-split c
	-if $Brightness
		-add[-3] $Brightness
	-endif
	-if {$Contrast!=1}
		-mul[-3] $Contrast
	-endif
	#Adjust saturation by multiplying both A and B channels
	-if $AB
		-mul[-2] $AB
		-mul[-1] $AB
	-endif
	#Adjust colour balance by multiplying A or B channel.
	-if $A
		-mul[-2] {1+$A}
	-endif
	-if $B
		-mul[-1] {1+$B}
	-endif
	-append c
	-lab2rgb
	#RGB cut and normalize
	-if {$CutHigh!=100" || "$CutLow!=0}
		Range=1
		#Calculate cut high
		HighValue={$CutHigh/100*$Range}
		#Calculate low value from remaining
		LowValue={$CutLow/100*$HighValue}
		-cut $LowValue,$HighValue
		-normalize 0,1
	-endif
	#Scale to 255 for Gimp
	-mul 255
	#Cut 0,255 for Gimp
	-cut 0,255
	-if {$ProcessTo==1}
			--display_histogram @{0,w},@{0,h},255,0,254,0
			-blend lighten,0.7
	-endif
	-if {$ProcessTo==2}
			--display_histogram @{0,w},@{0,h},255,0,254,0,log(1+i)-1
			-blend lighten,0.7
	-endif
-endif
#******************************************
#END OF FILTER
#******************************************


###################################################################################################################
#@gimp _<b>Testing</b>
###################################################################################################################

#@gimp Naggobot
#******************************************
#Import 16 bit image
#******************************************
#@gimp Import_16bit_image : gimp_import_image_16_info, gimp_import_image_16_info
#@gimp : note = note("This filter has been moved to main tree Various section")
gimp_import_image_16_info:
#******************************************
#END OF FILTER
#******************************************

#******************************************
#Luminance to alpha
#******************************************
#@gimp Luminance to Alpha : gimp_split_luminance, gimp_split_luminance(1)
#@gimp : note = note("Filter splits image to different levels of Luminance. Set preview output to "all outputs". Order of output to Gimp from top to bottom is Midtones,Light,LL,..,Dark,DD,.. If reduced overlap is used then first Light layer is removed from output as redundant if more than one level is processed. Mutilevel output becomes Midtones,,LL,LLL,..,Dark,DD,DDD.. with intermediary light and dark levels containing midtones. ")
#@gimp : Sep = separator()
#@gimp : Levels = int (1,1,6)
#@gimp : Output as alpha = bool(1)
#@gimp : Reduce overlap = bool(1)
#@gimp : Sep = separator(), note = note("Use -keep[] or -remove[] to select output images")
#@gimp : Keep custom = bool(0)
#@gimp : Keep custom = text(0,-keep[-1])
#@gimp : Sep = separator(), note = note("<small>Author: <i>Arto Huotari;</i>.      Latest update: <i>2014/04/13</i>.</small>")

####################
intersect_images:
#Create masks to extract
#Extract areas in L that are darker than those in D (white shows light areas)
--lt[0] [1]
-mul[-1] 255
#Extract areas in D that are darker than those in L (white shows dark areas)
--lt[1] [0]
-mul[-1] 255
#Subtract booleans from L and D -> areas with selected pixels will go to 0 or below
-sub[0] [-1]
-sub[1] [-2]
#Remove booleans
-remove[-1,-2]
#Cut to 0-1 range - remove areas selected by booleans
-cut[0] 0,255
-cut[1] 0,255
#Combine images - this image now contains
#midtone area pixels but grey values = image pixel values
-add[0] [1]
-remove[1]
#Normalize to create mask i.e. pixel with value of 127.5
#will be shown with opacity of 255 when mask is used
####################

####################
create_base_levels:
Levels=$1
#Create Lighter levels
#Darker levels are created by subtracting D from L repeatedly
#there fore Li=L-i*D
-repeat {$Levels-1}
	#Multiply D level with loop index+1
	--mul[2] {@{>,0}+1}
	#Subtract i*D from L
	--sub[1] [-1]
	-remove[-2]
	-cut[-1] 0,255
-done

#Create Darker levels
#Ligter levels are created by subtracting L repeatedly from D
-repeat {$Levels-1}
	#Multiply L with loop index + 1
	--mul[1] {@{>,0}+1}
	#Subtract i*L from D
	--sub[2] [-1]
	-remove[-2]
	-cut[-1] 0,255
-done
####################

####################
reorder_stack :
Levels=$1
#Subtract overlapping portions from Light masks
#Stack is now
#  O, L, D, M, LL,LLL,LLLL,DD,DDD,DDDD
#  0, 1, 2, 3,  4,  5,   6, 7,  8,   9
#-10,-9,-8,-7, -6, -5,  -4,-3, -2,  -1
#Stack needs to be re-arranged to
#  O,M,L,LL,LLL,LLLL,D,DD,DDD,DDDD
#  O,M, L, D, _ , LL,LLL,LLLL,DD,DDD,DDDD
-move[3] 1
#  O,M, L, D, LL,LLL,LLLL,DD,DDD,DDDD
-if {$Levels>1}
	-reverse[2,3]
#  O,M, D, L,LL,LLL,LLLL,DD,DDD,DDDD to
#  O,M, _ , L,LL,LLL,LLLL,D,DD,DDD,DDDD
	-move[2] {-$Levels+1}
-endif
####################

####################
reduce_overlap :
Levels=$1
-repeat {$Levels-1}
	-sub[{2+@{>,-1}}] [{3+@{>,-1}}]
	-cut[{2+@{>,-1}}] 0,255
-done
-repeat {$Levels-1}
	-sub[{-$Levels+@{>,-1}}] [{-$Levels+@{>,-1}+1}]
	-cut[{-$Levels+@{>,-1}}] 0,255
-done
#subtract brights and lights from midtones
-sub[1] [{-$Levels-1}]
-sub[1] [-1]
-cut[1] 0,255
#####################

gimp_split_luminance:
Levels=$1
AlphaOutput=$2
ReduceOverlap=$3
KeepCustom=$4
KeepText=$5
-to_rgb
#L
--rgb2lab
-split[-1] c
-rm[-1,-2]
-normalize[-1] 0,255
#D
--negative[-1]
#M
--intersect_images[-1,-2]
-if {$ReduceOverlap==0}
	-normalize[-1] 0,255
-endif

#Create base levels
-create_base_levels $Levels

#Reorder stack
-reorder_stack $Levels
#Stack is now  O,M,L,LL,LLL,LLLL,D,DD,DDD,DDDD

-if {{$ReduceOverlap==1}" && "{$Levels>1}}
	-reduce_overlap $Levels
-endif

-repeat {@#-1}
	#add 1 to alpha  and cut 0,225 to avoid cutting of colour channels
	#no idea why this is necessary, it yields correct results
	#Ma and ma are already 0 and even though 1 is added the output is still
	#0 for transparent areas of the mask.
	-add[{@{>,-1}+1}] 1
	-cut[@{>,-1}] 0,255
-done

#Combine with original
-if $AlphaOutput
-repeat {@#-1}
	--append[0,1] c
	-remove[1]
-done
-endif

-if {{$ReduceOverlap==1}" && "{$Levels>1}}
	#D and L are now equal, remove first
	-remove[2]
-endif

#Remove original
-remove[0]

-if $KeepCustom
	$KeepText
-endif
#******************************************
#END OF FILTER
#******************************************


#****************************************
#Exposure Fusion weight map
#****************************************
#@gimp Exposure fusion weight map : gimp_ExposureWeightMap, gimp_ExposureWeightMapPreview(1)
#@gimp : sep = separator()
#@gimp : note = note("Create exposure fusion weight map")
#@gimp : sep = separator()
#@gimp : note = note("Set filter output to "New layers". Copy filter output to corresponding layer mask. Use aligned layers to combine multiple exposures.")
#@gimp : sep = separator()
#@gimp : Contrast bias = float(0.3,0,1)
#@gimp : Saturation bias = float(0.3,0,1)
#@gimp : Exposure Sigma = float(0.2,0,1)
#@gimp : Exposure bias = float(0.3,0,1)
#@gimp : BlurMap = bool(1)
#@gimp : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gimp : sep = separator(), note = note("<small> Author: Arto Huotari Latest update : <i>2014/11/30 v2</i>.</small>")
#@gimp : note = link("Based on article","http://research.edm.uhasselt.be/tmertens/papers/exposure_fusion_reduced.pdf")

#Sub, Contrast bias factor, returns absolute laplacian
Sub_Contrast_Bias:
-div[-1] 255
-to_gray[-1]
-laplacian[-1]
-abs[-1]
#End Of Sub

#Sub, Saturation bias factor, returns standard deviatin of picel values
Sub_Saturation_Bias:
#1: Calculate average values
-div[-1] 255
--split[0] c
-blend[-1,-2,-3] average #Destroyes images 1,2,3, leaves 0 and 1
#2: Calculate difference values
-split[0] c # images ,0, R1,G2,B3; 0 contains average
#Probable error on removing next image.
#Commented out on 30.11.2014
#-rm[0]
--sub[0] [1] # images ,0, R1,G2,B3,DR4
-rm[1] # images ,0,,G2,B3,DR4
--sub[0] [1] # images 0,,G1,B2,DR3,DG4
-rm[1] # images ,0,,,B1,DR2,DG3
--sub[0] [1] # images 0,,,B1,DR2,DG3,DB4
-rm[1] # images ,0,,,,DR1,DG2,DB3
-rm[0] # images ,,,,,DR1,DG2,DB3
#Raise to power
-pow[0] 2 #DR1²
-pow[1] 2 #DR2²
-pow[2] 2 #DR3³
#sum
-add[1] [2] #DR1²,DR3²+DR2²,DR3²
-rm[2]
-add[0] [1] #DR1²+(DR3²+DR2²),DR3²+DR2²
-rm[1] #DR1²+(DR3²+DR2²)
#Population has three datapoints, divide by 3
-div[0] 3
#Standard deviation
-sqrt[0]
#End Of Sub

#Sub, Exposure bias factor
#Wchannel=exp(-(V-0.5)²/(2*sigma*sigma))
#V-0.5
Sub_Exposure_Bias :
-div[0] 255
-sub[0] 0.5
-pow[0] 2
-div[0] {2*$1*$1}
-mul[0] -1
-exp[0]
-split[0] c #1,2,3
-mul[0] [2]
-rm[2]
-mul[0] [1]
-rm[1]
#End Of Sub

#Sub, Pyramid blurring
Sub_BlurPyramid :
#Calculate size
size={min(@{0,w},@{0,h})}
levels={round(log($size)/log(5))}
Deviation=1

#Scale down and blur
-blur[0] $Deviation,1,1 #Blur image 100
-repeat {$levels-1}
	--resize[-1] 50%,50%,5,1 #Scale subsequently down, create {$levels-1} images
	-blur[-1] $Deviation,1,1 #Blur scaled image
-done

#Scale up and blend
blndalpha=0.5
-repeat {$levels-1}
	index={-1*(@{<,0}+1)} #Image index to blend, start at next step of pyramid and progress to smaller iteratins
	-resize[$index] [0],5,1
	-blend[0,$index] alpha,$blndalpha,0
	blndalpha={$blndalpha/2} #Reduce opacity of blending by factor of 2 on each iteration
-done

#Main, Combined weight
gimp_ExposureWeightMap :
wc=$1
ws=$2
sigma=$3
we=$4
BlurMap=$5
-to_rgb[0]
--Sub_Contrast_Bias[0] #CB, 0,1
--Sub_Saturation_Bias[0] #SB, 0,1,2
--Sub_Exposure_Bias[0] $sigma #EB, 0,1,2,3
-rm[0] #0,1,2
#Weight W=CB^wc+SB^ws+EB^we
-pow[0] $wc
-pow[1] $ws
-pow[2] $we
-add[0] [1]
-add[0] [2]
-keep[0]
-normalize[0] 0,255
#Blur mask
-if {$BlurMap==1}
		-Sub_BlurPyramid[0]
-endif
#End Of Main

gimp_ExposureWeightMapPreview :
  -gimp_split_preview "-gimp_ExposureWeightMap ${1--2}",$-1

#******************************************
#END OF FILTER
#******************************************

############################
#Smooth sketch
############################
#@gimp Smooth Sketch : gimp_SmoothSketch, gimp_SmoothSketch_preview(0)
#@gimp : note = note("Convert image to black and white sketch. By default gradient edges are used but if filter input set to Active and Below a premade edge layer can be used from the layer below. Sketch strength slider will not have any effect if premade edges layer is used.")
#@gimp : sep = separator()
#@gimp : note = note("Sketch and edges")
#@gimp : Create sketch = bool(1)
#@gimp : Sketch strength = float(6,0,20)
#@gimp : Sharpness = float(0.8,0,1)
#@gimp : Anisotropy = float(0.3,0.1,1)
#@gimp : Smoother scaling = float(0.3,0.1,2.5)
#@gimp : Smoother Degradation = float(0,0,1)
#@gimp : Smoothing amplitude = float(1000,1,3000)
#@gimp : Smudge angle = float(0,-180,180)
#@gimp : sep = separator()
#@gimp : note = note("Empty area coloring")
#@gimp : Coloring density = float(50,0,200)
#@gimp : Coloring stroke length = float(10,0,100)
#@gimp : Coloring style = choice(2,"Linear","Angular","Linear wavy","Angular wavy")
#@gimp : Coloring opacity = float(0.6,0,1)
#@gimp : sep = separator()
#@gimp : note = note("Post processing parameters")
#@gimp : Post gamma = float(0.55,0.1,2)
#@gimp : Fast = bool(1)
#@gimp : sep = separator(), Preview type = choice(0,"Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gimp : sep = separator(), note = note("<small>Author : <i>Arto Huotari</i>.      Latest update : <i>2014/08/31</i>.</small>")
#@gimp : note = link("Filter Explained here","http://www.flickr.com/groups/gmic/discuss/72157628307225747")

gimp_SmoothSketch :
UsmRadius=5
CreateSketch=$1
UsmAmount=$1
Sharpness=$2 #Sharpness for diffusion tensor
Anisotropy=$3
SmScale=$4
SmAccuracy={$5}
Amplitude=$6 #Smoothing ampliture
fi=$7 #Rotation angle for tensor field
Density=$8 #Noise density
BlurLength=$9 #blur length
Style=$10 #Bg Style selection
BgOpacity=$11 #Bg blend opacity
PostGamma=$12 #Gamma correction
OptimizedResult=$13

-if $OptimizedResult
	OriginalWidth=@{0,w}
	#Resize to 1024 width (all in case a bottom layer is included
	-resize2dx 1024
	-gimp_selective_smoothing[-1] 5,0.5,5,1,0,0,24,0
-endif

-if {$CreateSketch==1}
	#Unsharp to enhance edges and detail
	#-unsharp[-1] $UsmRadius,$UsmAmount
	-gimp_unsharp[-1] 0,$UsmRadius,30,$UsmAmount,0,1,1,1,0,0,0
	#Gradient norm for lines
	--gradient_norm[-1]
	#Invert for white bg
	-negative[-1]
	#Normalize for max range
	-normalize[-1] 0,255
-endif

##Noise gb for smudging
#New white image
(255;255;255)
#Resize to image size
-r[-1] [-2]
#Add noise
-gimp_noise[-1] $Density,0,3,0,0

#Blurr and deform bg according to choice
-if {$Style==0}
	-gimp_blur_linear[-1] $BlurLength,0,135,500,1,3,0,0
-endif
-if {$Style==1}
	-gimp_blur_angular[-1] $BlurLength,1.2,1.2,0,0,0
-endif
-if {$Style==2}
	-gimp_blur_linear[-1] $BlurLength,0,135,500,1,3,0,0
	-deform[-1] {$Density/5}
-endif
-if {$Style==3}
	-gimp_blur_angular[-1] $BlurLength,1.2,1.2,0,0,0
	-deform[-1] {$Density/5}
-endif

#Blend bg and edge
-blend[-1,-2] multiply,$BgOpacity,0
-normalize[-1] 0,255
--diffusiontensors[0] $Sharpness,$Anisotropy,0.6,1.1,0 #Create diffusion tensor field from original.
-rotation3d 0,0,1,{$fi} #It seems this creates a new image "a rotation matrix" Subtract 45 because this gives sharp image at 0 degrees.
-mix_channels[-2] (@{-1,0-2};@{-1,3-5};@{-1,6-8}) #Channel mixer is used here with the rotation matrix
-rm[-1] #remove rotation matrix
#Scale matrix, this was changed to static and
#parameter used for diffusion tensor anisotropy
-mul[-1] {$SmScale/max(abs(@{-1,M}),abs(@{-1,m}))}
-noise[-1] {$SmAccuracy*max(abs(@{-1,M}),abs(@{-1,m}))}
-reverse[-1,-2]
-smooth[-1] [-2],$Amplitude
-keep[-1]
-apply_gamma[-1] $PostGamma

-if $OptimizedResult
	-resize2dx $OriginalWidth
-endif

gimp_SmoothSketch_preview :
  -gimp_split_preview "-gimp_SmoothSketch ${1--2}",$-1

#******************************************
#END OF FILTER
#******************************************


#****************************************
#Composition analysis
#****************************************
#@gimp Composition analysis : gimp_CompositionAnalysis, gimp_no_preview
#@gimp : note = note("A tool to abstract the image for subjective composition analysis. Two different methods are available. Set filter output to New layers. For actual analysis the aesthetic sense of the artist is required.")
#@gimp : Method = choice(0,"Thumbnail abstraction","Value and lines")
#@gimp : sep = separator(), note = note("<small>Author : <i>Arto Huotari</i>.      Latest update : <i>2015/01/17</i>.</small>")

sub_thumbnailabstraction :
#To RGB
-to_rgb[0]
IWidth=@{0,w}
IHeight=@{0,w}
#FInd out which is larger and scale accordingly
-if {$IWidth>=$IHeight}
	ScaleByWidth=1
-endif

#Resize to 100 px on larger dimension
-if {$ScaleByWidth==1}
	--resize2dx[0] 200,5
	-blur[-1] 2
	#Resize to 1024 px
	-resize2dx[-1] 1024,5
	#Segmentation
	-gimp_segment_watershed[-1] 0.5,5,0,0

-elif
	--resize2dy[0] 200,5
	-blur[-1] 2
	#Resize to 1024 px
	-resize2dy[-1] 1024,5
	#Segmentation
	-gimp_segment_watershed[-1] 0.5,5,0,0
-endif
#Resize to original size for output
-resize[-1] [0]
#Luminance analysis
--rgb2lab[0]
-split[-1] c
-rm[-1,-2]
-blur[-1] 10%
-normalize[-1] 0,255
-blend[-1,-2] hardlight,1,1
-keep[-1]

sub_colors_and_lines :
image_width=@{0,w}
image_height=@{0,h}
-resize2dx 1024
-luminance[0]
-normalize 0,255
-to_rgb[0]
-gimp_bilateral[0] 2,15,2,0,0,24,0
-gimp_colormap[0] 0,0,3,3,0,0,0,255,255,255,255,0,0,0,255,0,0,0,255,255,255,0,255,0,255,0,255,255,0
--gimp_anisotropic_smoothing[0] 300,0.1,1,0,10,1,1,1,0,1,1,0,0,24,0
-gimp_gradient_norm[-1] 0,0.5,0,100,1,0
-blend[0,1] multiply,1
-resize[-1] $image_width,$image_height,1,3,5,1

gimp_CompositionAnalysis :
method=$1
-if {$method==0} -sub_thumbnailabstraction -endif
-if {$method==1} -sub_colors_and_lines -endif



#****************************************
#Blockism
#****************************************
#@gimp Blockism : gimp_blockism, gimp_blockism_preview(1)
#@gimp : note=note("Renders rectangles on to the image.")
#@gimp : note=note("Parameters")
#@gimp : Relative size = float(3,0,20)
#@gimp : Ratio = float(1.6,1,10)
#@gimp : Size Variance = float(0.5,0,10)
#@gimp : Relative block count = int(50,0,500)
#@gimp : Opacity = float(0.5,0,1)
#@gimp : Flip tolerance = int(64,0,255)
#@gimp : Reverse flip = bool(0)
#@gimp : Quick = bool(1)
#@gimp : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gimp : note = link("Filter Explained here","http://www.flickr.com/photos/naggobot/8063058705/")
#@gimp : sep = separator(), note = note("<small> Author: Arto Huotari Latest update : <i>2012/10/07</i>.</small>")

gimp_blockism:
XSize={int($1/100*@{-1,w})}
-if {$XSize==0} XSize=1 -endif
Ratio=$2
Variance={int($3*$XSize)}
Randomness=-1,1
Repeats={int($4/100*max(@{-1,w},@{-1,h}))}
Opacity=$5
FlipTol=$6
ReverseFlip=$7
LAB=1-$8
#Calculate Y size and max size for the block
YSize={int($Ratio*$XSize)}
MaxXSize={int($XSize+$Variance)}
MaxYSize={int($MaxXSize*$Ratio)}
#Force RGB (remove alpha)
-to_rgb[0]
#Split image to LAB channels if not quick
-if {$LAB}
	-rgb2lab[0]
	-split[0] c
-endif
#Render blocks
-repeat @#
	#Take copy of the last image in the stack for grey value checking
	[-1]
	-repeat $Repeats
		#Random point from canvas to draw the block on
		X={int(?(-1,w))}
		Y={int(?(-1,h))}
		#If the value is below threshold then invert width and length
		#note that quick uses only Red channel to flip
		-if {$ReverseFlip==0}
			-if {@{-1,($X,$Y,0,0)}>$FlipTol}
				#Calculcate block size. Interpolate linearly with random value
				#Linear interpolation is
				#y=ya+(yb-ya)(x-xa)/(xb-xa)
				#x is random value between -1 and 1
				#ya is minimum block size
				#yb is maximum block size
				#y is block size
				#abs is used to invert negative values to positive
				BW={int(abs($XSize+($MaxXSize-$XSize)*(?($Randomness))))}
				BH={int(abs($YSize+($MaxYSize-$YSize)*(?($Randomness))))}
			-endif
			-if {@{-1,($X,$Y,0,0)}<=$FlipTol}
				BH={int(abs($XSize+($MaxXSize-$XSize)*(?($Randomness))))}
				BW={int(abs($YSize+($MaxYSize-$YSize)*(?($Randomness))))}
			-endif
		-endif
		-if {$ReverseFlip==1}
			-if {@{-1,($X,$Y,0,0)}<$FlipTol}
				BW={int(abs($XSize+($MaxXSize-$XSize)*(?($Randomness))))}
				BH={int(abs($YSize+($MaxYSize-$YSize)*(?($Randomness))))}
			-endif
			-if {@{-1,($X,$Y,0,0)}>=$FlipTol}
				BH={int(abs($XSize+($MaxXSize-$XSize)*(?($Randomness))))}
				BW={int(abs($YSize+($MaxYSize-$YSize)*(?($Randomness))))}
			-endif
		-endif
		#Calcualte corners
		x0={int($X-$BW/2)}
		y0={int($Y-$BH/2)}
		x1={int($x0+$BW)}
		y1={int($y0+$BH)}
		#Draw a rectangle with the gray of the block center value  of the L, A or B channel
		-rectangle[-2] $x0,$y0,$x1,$y1,$Opacity,@{-1,($X,$Y,0,0)},@{-1,($X,$Y,0,1)},@{-1,($X,$Y,0,2)},@{-1,($X,$Y,0,3)
	-done
	-remove[-1]
	-mv[-1] 0
-done
-if {$LAB}
	-append[-3,-2,-1] c
	-lab2rgb[-1]
-endif
gimp_blockism_preview :
 -gimp_split_preview "-gimp_blockism $1,$2,$3,{$4*10},$5,$6,$7,$8",$-1


#****************************************
#HDR black fixing
#****************************************
#@gimp Night HDR image black noise correction: gimp_fix_HDR_black, gimp_fix_HDR_black_preview(0)
#@gimp : note=note("Filter to remove blue, magenta and red noise from the black areas of HDR images. Filter is designed specifically for HDR night shots but may work on other images as well. Bilateral filtering and Haar Wavelets are used to filter the noise from the image and mask is used to apply the noise removal only to dark areas.")
#@gimp : sep = separator(), note=note("Mask opacity settings, Black values must be lower than Highlight values. Tick Show mask to view mask and to see the effect of the sliders.")
#@gimp : note=note("Black cutoff")
#@gimp : X-coord(1) = int(20,0,255)
#@gimp : Y-coord(1) = int(25,0,255)
#@gimp : note=note("Highlight raising")
#@gimp : X-coord(2) = int(50,0,255)
#@gimp : Y-coord(2) = int(200,0,255)
#@gimp : Show mask = bool(0)
#@gimp : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gimp : sep = separator(), note = note("<small> Author: Arto Huotari Latest update : <i>2013/11/02</i>.</small>")
gimp_fix_HDR_black:
-to_rgb[0]
X1=$1
Y1=$2
X2=$3
Y2=$4
ShowMask=$5
--gimp_bilateral[-1] 4,8,6,4,0 #0,1
-gimp_haar_smoothing[-1] 0.6,5,2,3,1,24 #0,1
--rgb2lab[-1] #0,1,2
-split[-1] c #0,1,2,3,4
-rm[-1,-2] #0,1,2(luminance info of smoothed image only)
-gimp_apply_curve[-1] 0,$X1,$Y1,$X2,$Y2,-1,128,-1,128,-1,128,255,1,0,0,21,0
-if {$ShowMask==0}
	-negative[-1] #Negative of Luminance
	-append[-2,-1] c #append luminance info to smoothed image
	-to_rgba[-1] #0,1,force RGBA for 1
	-blend[0,-1] alpha #Blend with original
	-keep[0]
-endif

gimp_fix_HDR_black_preview :
  -gimp_split_preview "-gimp_fix_HDR_black ${1--2}",$-1


#************END OF FILTER*************


#****************************************
#Noise paint
#****************************************
#@gimp Noise Painting : gimp_noisepainting, gimp_noisepainting_preview(0)
#@gimp : note = note("A preprocess suggestion for the painting filter.")
#@gimp : sep = separator(), note = note("Pre process for painting")
#@gimp : Spread noise = int(0,0,20)
#@gimp : Additive noise = int(0,0,30)
#@gimp : Luminance only = bool(0)
#@gimp : sep = separator(), note = note("Painting abstration")
#@gimp : Abstraction = int(5,1,10)
#@gimp : Details scale = float(2.5,0,5)
#@gimp : Color = float(1.5,0,4)
#@gimp : Smoothness = float(50,0,1000)
#@gimp : Sharpen shades = bool(1)
#@gimp : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gimp : sep = separator(), note = note("<small> Author: Arto Huotari Latest update : <i>2012/07/12</i>.</small>")
gimp_noisepainting :
DegrLarge=$1
DegrSmall=$2
Channel=$3
Abstr=$4
Details=$5
Color=$6
Smooth=$7
Sharp=$8
-to_rgb[0]
-if {$Channel} Channel=3 -elif Channel=0 -endif
     #Pre segmentation
     -if $PreProcess -gimp_segment_watershed $EdgeThresh,$WaterSmooth,0,0 -endif
     #Degradation with additive noise
     -if {$DegrLarge!=0} -gimp_spread $DegrLarge,$DegrLarge,0,0 -endif
     # -gimp_noise 47.0046,2,3,0,0
   -if {$DegrSmall!=0} -gimp_noise $DegrSmall,2,$Channel,0,0 -endif
     -gimp_painting $Abstr,$Details,$Color,$Smooth,$Sharp,0
gimp_noisepainting_preview :
  -gimp_split_preview "-gimp_noisepainting ${1--2}",$-1

#****************************************
#BW film simulation
#****************************************
#@gimp Black &amp; White Film : gimp_bwfilmsimulate, gimp_bwfilmsimulate_preview(1)
#@gimp : Film type / RGB balance = choice(0,"Manual","Agfa 200X","Agfapan 25","Agfapan 100","Agfapan 400","Iford Delta 100","Iford Delta 400","Iford Delta 400 pro & 3200","Ilford FP4","Ilford HP4","Ilford Pan F","Ilford SFX","Ilford XP2 Super","Kodak Tmax 100","Kodak Tmax 400","Kodak Tri-X")
#@gimp : note = note("Simpler version available in main tree. This filter will be removed in future from testing. PM me if you need this for some reason.")
#@gimp : note = note("RGB sliders work only with manual selection")
#@gimp : Red level = float(0.299,0,1)
#@gimp : Red smoothness = float(0,0,10)
#@gimp : Green level = float(0.587,0,1)
#@gimp : Green smoothness = float(0,0,10)
#@gimp : Blue level = float(0.114,0,1)
#@gimp : Blue smoothness = float(0,0,10)
#@gimp : sep = separator()
#@gimp : Gamma = float(1,0.01,5)
#@gimp : Contrast = float(1,0,4)
#@gimp : Brightness = float(0,-255,255)
#@gimp : Hue = float(0,0,360)
#@gimp : Saturation = float(0,0,1)
#@gimp : sep = separator()
#@gimp : Grain (shadows) = float(0,0,200)
#@gimp : Grain (midtones) = float(0,0,200)
#@gimp : Grain (highlights) = float(0,0,200)
#@gimp : Grain tone fading = float(2,0,10)
#@gimp : Grain scale = float(0,0,3)
#@gimp : Grain type = choice("Gaussian","Uniform","Salt and pepper","Poisson")
#@gimp : sep = separator()
#@gimp : Local contrast = float(0,0,60)
#@gimp : Radius = int(16,1,512)
#@gimp : Contrast smoothness = float(4,0,10)
#@gimp : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gimp : sep = separator(), note = note("<small>Author : <i>David Tschumperl&#233, Arto Huotari;</i>.      Latest update : <i>2019/09/28</i>.</small>")
gimp_bwfilmsimulate :
Choice=$1
P1=$2
P2=$3
P3=$4
P4=$5
P5=$6
P6=$7
P7=$8
P8=$9
P9=$10
P10=$11
P11=$12
P12=$13
P13=$14
P14=$15
P15=$16
P16=$17
P17=$18
P18=$19
P19=$20
P20=$21
-if {$Choice==1} P1={18/255} P3={41/255} P5={41/255} -endif
-if {$Choice==2} P1={25/255} P3={39/255} P5={36/255} -endif
-if {$Choice==3} P1={21/255} P3={40/255} P5={39/255} -endif
-if {$Choice==4} P1={20/255} P3={41/255} P5={39/255} -endif
-if {$Choice==5} P1={21/255} P3={42/255} P5={37/255} -endif
-if {$Choice==6} P1={22/255} P3={42/255} P5={36/255} -endif
-if {$Choice==7} P1={31/255} P3={36/255} P5={33/255} -endif
-if {$Choice==8} P1={28/255} P3={41/255} P5={31/255} -endif
-if {$Choice==9} P1={23/255} P3={37/255} P5={40/255} -endif
-if {$Choice==10} P1={33/255} P3={36/255} P5={31/255} -endif
-if {$Choice==11} P1={36/255} P3={31/255} P5={33/255} -endif
-if {$Choice==12} P1={21/255} P3={42/255} P5={37/255} -endif
-if {$Choice==13} P1={24/255} P3={37/255} P5={39/255} -endif
-if {$Choice==14} P1={37/255} P3={36/255} P5={37/255} -endif
-if {$Choice==15} P1={25/255} P3={35/255} P5={40/255} -endif


   -repeat @#
    -l[-1] -split_opacity -rv -to_rgb[-1] -s[-1] c          # Isolate opacity
    -*[-3] $P1 -b[-3] $P2%                                    # Red contrast + smoothness
    -*[-2] $P3 -b[-2] $P4%                                    # Green contrast + smoothness
    -*[-1] $P5 -b[-1] $P6%                                    # Blue contrast + smoothness
    -+[-3--1] -/[-1] {$P1+$P3+$P5} -c[-1] 0,255                # (R,G,B) -> B&W

    -apply_gamma[-1] $P7                                     # Gamma correction
    --[-1] 128 -*[-1] $P8 -+[-1] 128 -+[-1] $P9 -c[-1] 0,255  # B&W contrast and brightness.

    100%,100% [-1]x2                                        # Create noise for shadows, midtones and highlights.
    -noise[-3] 100,$P17 -b[-3] $P16% -n[-3] -$P12,$P12          # Scaled grain on shadows.
    -noise[-2] 100,$P17 -b[-2] $P16% -n[-2] -$P13,$P13          # Scaled grain on midtones.
    -noise[-1] 100,$P17 -b[-1] $P16% -n[-1] -$P14,$P14          # Scaled grain on highlights.

    --tones[-4] 3 -b[-3--1] $P15%                            # Get smoothed tones.
    -*[-6,-3] -*[-4,-2] -*[-2,-1]                           # Get noisy tones.
    -+[-4--1] -c[-1] 0,255                                  # Compose them with the B&W image.

    -if {$P10||$P11}
      -/[-1] 255
      -i[-2] 100%,100%,1,1,$P11
      -i[-3] 100%,100%,1,1,$P10
      -a[-3--1] c -hsv2rgb[-1]
    -endif

    -rv -a c -endl -mv[-1] 0 -done                          # Re-compose opacity and loop to next image.
  -normalize_local $P18,$P19,$P20,2%,1,0,255

gimp_bwfilmsimulate_preview :
  -gimp_split_preview "-gimp_bwfilmsimulate ${1--2}",$-1


#****************************************
#Warp test
#****************************************
#@gimp Warp test : gimp_WarpTest, gimp_WarpTest
#@gimp : sep = separator()
#@gimp : note=note("Two layers required if automap is not used. <b>Set input to active and below</b>. Filter offsetts image with a vector field map. Map is created from R and G channels so that R128,G128 becomes [0 0]. Experiment with solid 128,128,0 color layer and add hues of red and green. Angle shift rotates the vector field and Zero point offset moves the default 0 0 point. This is mainly for fun and testing.")
#@gimp : sep = separator()
#@gimp : Map type = choice("Automap","Layer Map")
#@gimp : Angle shift = float(0,-180,180)
#@gimp : Zero point offset = float(0,-128,128)
#@gimp : Vector length multipler = float(1,0.1,128)
#@gimp : sep = separator()
#@gimp : note = note("Optional viewing of vector field")
#@gimp : Show Quiver = bool(0)
#@gimp : sep = separator(), note = note("<small>Author : <i>Arto Huotari</i>.      Latest update : <i>2012/02/28</i>.</small>")

gimp_WarpTest :
#Variables
MapType=$1
fi={$2*3.1415/180}
ZeroOffset=$3
LMult=$4
ShowQuiver=$5

-if {$MapType==0}
	--gimp_local_orientation 0.5,0,100,0,4,0
-endif

#Angles for rotation
cosfi={cos($fi)}
sinfi={sin($fi)}

-to_rgb[-2,-1]
#set origin 128,128 to 0,0
--[-1] {128+$ZeroOffset}
-split[-1] c #there were 2 images in the stack, now there are 4, 0,1,2,3, -1 was used in split
#Force blue channel to 0
-mul[3] 0
#Channel -3 = X values = image [1]
#Channel -2 = Y values = image [2]
#Channel -1 is zero = image [3]
#Rotation for X coord is x'=Xcosfi-Ysinfi
#Calculate first Xcosfi and Ycosfi to new image#
--mul[1] $cosfi #xcosfi this is now image 4
--mul[2] $sinfi #ysinfi this is now image 5
#Calculate new X coord
-sub[4] [5]
-rm[5]
#Calculate new Y coord x'=Xsinfi+Ycosfi
--mul[1] $sinfi #xsinfi this is now image 5
--mul[2] $cosfi #yxosfi this is now image 6
-add[5] [6]
-rm[6]
-rm[1,2] #Image 3 becomes 1, 4x' becomes 2 and 5y' becomes 3
-rm[1] 	#Image 1z deleted, 2x' becomes 1 and 3y' becomes 2
100%,100%,100%,1,0
-append[1,2,3] c
#Divide with 128 to "normalize" between -1 1 (not true for non zero offsets)
-/[-1] {128/$LMult}
-channels[-1] 0,1
-if {$ShowQuiver==0}
#	-vector2tensor[-1]
#	-smooth[-2] [-1],$Amplitude
	-warp[-2] [-1],1,1,0
-endif
-if {$ShowQuiver==1}
	-quiver[-2] [-1],10,{$LMult/100},1,0.8,255
-endif
-rm[-1]


#****************************************
#Dodge sketch
#****************************************
#@gimp Dodge sketch : gimp_dodgesketch, gimp_dodgesketchpreview(0)
#@gimp : note = note("Simple BW sketch"),note = link("Method is described here","http://www.gimpusers.com/tutorials/making-a-pencil-drawing-from-a-photo.html")
#@gimp : note = note("in addition an option to color the sketch is included")
#@gimp : sep = separator(), note = note("Power setting for sketch")
#@gimp : Power = int(3,0,10)
#@gimp : sep = separator(), note = note("Presmoothing settins of bilateral filter")
#@gimp : Spatial variance = float(10,0,100)
#@gimp : Value variance = float(7,0,100)
#@gimp : Iterations = int(2,1,10)
#@gimp : sep = separator()
#@gimp : Colored? = bool(0)
#@gimp : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gimp : sep = separator(), note = note("<small>Author : <i>Arto Huotari</i>.      Latest update : <i>2013/09/28</i>.</small>")

gimp_dodgesketch:
#remove alpha channel
-to_rgb[0]
Power=$1
SpatialVariance=$2
ValueVariance=$3
Iterations=$4
Colored=$5

#Remove color, add as new incase org can be later used for "colored"
--gimp_mix_hsv[0] 1,0,0,0,-1,0,1,0,0,0,2,0
#Smooth with bilateral filter
--gimp_bilateral[-1] $SpatialVariance,$ValueVariance,$Iterations,0,0
#Invert colors of smoothed image
-negative[-1]
#Compose inverted image with 0.5 opacity to BW
-blend[-1,-2] alpha,0.5,0
#Take duplicate of previous
[-1]
#Make BW lines
--blend[-1,-2] dodge,1,0
#Clear mem
-keep[0,-1]

#Use repeat loop to multiply the sketch
-repeat $Power
	[-1]
	-blend[-1,-2] multiply
-done

-if {$Colored==1}
	--blend[-1,-2] hardlight #image -1 i.e. image 3
	-remove[-2]
	-gimp_transfer_colors[-1,-2] 0,0
-endif

-keep[-1]

gimp_dodgesketchpreview :
  -gimp_split_preview "-gimp_dodgesketch ${1--2}",$-1

#****************************************
#MappedSmoothing
#****************************************
#@gimp Mapped Smoothing : gimp_MappedSmooth, gimp_MappedSmooth
#@gimp : sep = separator()
#@gimp : note=note("Two layers required if automap is not used. <b>Set input to active and below</b>. Filter Smooths image with a vector field map. Map is created from R and G channels so that R128,G128 becomes [0 0]. Experiment with solid 128,128,0 color layer and add hues of red and green. Angle shift rotates the vector field and Zero point offset moves the default 0 0 point. This is somewhat a development version, sample art is still missing.")
#@gimp : sep = separator()
#@gimp : Map type = choice("Automap","Layer Map")
#@gimp : Angle shift = float(0,-180,180)
#@gimp : Zero point offset = float(0,-128,128)
#@gimp : Amplitude = float(300,10,10000)
#@gimp : Vector length multipler = float(1,0.1,5)
#@gimp : sep = separator()
#@gimp : note = note("Optional viewing of vector field")
#@gimp : Show Quiver = bool(0)
#@gimp : sep = separator(), note = note("<small>Author : <i>Arto Huotari</i>.      Latest update : <i>2012/02/25</i>.</small>")

gimp_MappedSmooth :
#Variables
MapType=$1
fi={$2*3.1415/180}
ZeroOffset=$3
Amplitude=$4
LMult=$5
ShowQuiver=$6

-if {$MapType==0}
	--gimp_local_orientation 0.5,0,100,0,4,0
-endif

#Angles for rotation
cosfi={cos($fi)}
sinfi={sin($fi)}

-to_rgb[-2,-1]
#set origin 128,128 to 0,0
--[-1] {128+$ZeroOffset}

-split[-1] c #there were 2 images in the stack, now there are 4, 0,1,2,3, -1 was used in split
#Force blue channel to 0
-mul[3] 0
#Channel -3 = X values = image [1]
#Channel -2 = Y values = image [2]
#Channel -1 is zero = image [3]
#Rotation for X coord is x'=Xcosfi-Ysinfi
#Calculate first Xcosfi and Ycosfi to new image#
--mul[1] $cosfi #xcosfi this is now image 4
--mul[2] $sinfi #ysinfi this is now image 5
#Calculate new X coord
-sub[4] [5]
-rm[5]
#Calculate new Y coord y'=Xsinfi+Ycosfi
--mul[1] $sinfi #xsinfi this is now image 5
--mul[2] $cosfi #yxosfi this is now image 6
-add[5] [6]
-rm[6]
-rm[1,2] #Image 3 becomes 1, 4x' becomes 2 and 5y' becomes 3
-rm[1] 	#Image 1z deleted, 2x' becomes 1 and 3y' becomes 2
100%,100%,100%,1,0
-append[1,2,3] c
#Divide with 128 to "normalize" between -1 1 (not true for non zero offsets)
-/[-1] {128/$LMult}
-channels[-1] 0,1
-if {$ShowQuiver==0}
	-vector2tensor[-1]
	-smooth[-2] [-1],$Amplitude
-endif
-if {$ShowQuiver==1}
	-quiver[-2] [-1],10,{$Amplitude/20},1,0.8,255
-endif
-rm[-1]

#****************************************
#Gimp Rotation Demo
#****************************************
#@gimp Vector Field Rotation Demo : gimp_DemoVecRot, gimp_DemoVecRot
#@gimp : note=note("Vector field rotation and quiver sample")
#@gimp : Angle shift = float(0,-180,180)
#@gimp : sep = separator(), note = note("<small>Author : <i>Arto Huotari</i> with help from <i>David Tschumperl&#233;</i>.     Latest update : <i>2012/02/25</i>.</small>")
gimp_DemoVecRot :
angle=$1
#Force to RGB (remove possible alpha channel)
-to_rgb[0]
#Take a copy of the input to work on
[0]
#Force the copy to RGB just in case. This is not actually needed and just takes time.
-to_rgb[-1]
#Split image along channels
-split[-1] c
#Subtract 128 from red and green channels
--[-2] 128
--[-3] 128
#Append channels back to one image
-append[-3,-2,-1] c
#Drop third channel from the field
#other vise matrix multiplication at rotation and quiver will not work
-channels[-1] 0,1
#Divide by 128 to scale length
-/[-1] 128
#Rotation code from David
	#200,200,1,2 200x200x1 px only two channels
	-rotation3d 0,0,1,$angle #It seems this creates a new image "a rotation matrix"
	-z[-1] 0,0,1,1 #This crops the rotation matrix, I do not know why
	-mix_channels[-2] (@{-1,0-1};@{-1,2-3}) #Channel mixer is used here with the rotation matrix
	-rm[-1] #remove rotation matrix
#End rotation code
#Quiver takes only two channels in. It will give an error othervise
-quiver[-2] [-1],10,10,1,0.8,255
-keep[-2]


#****************************************
#Structure tensors
#****************************************
#@gimp GMic Structure Tensors : gimp_StructureTensors, gimp_StructureTensorsPreview(0)
#@gimp : sep = separator()
#@gimp : note = note("Structure tensors calculation for Gimp plugin. This is just an interface to built in GMic Structure tensors command")
#@gimp : Power = float(0.1,0.1,2)
#@gimp : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gimp : sep = separator(), note = note("<small>Author : <i>Arto Huotari</i>.      Latest update : <i>2011/12/06</i>.</small>")
#@gimp : note = link("Filter Explained here","http://gmic.sourceforge.net/reference.shtml")

gimp_StructureTensors:
-structuretensors -abs -pow $1
-normalize 0,255

gimp_StructureTensorsPreview :
  -gimp_split_preview "-gimp_StructureTensors ${1--2}",$-1

#************END OF FILTER*************


#****************************************
#Old Make Squiggly
#****************************************
#@gimp Make Old Squiggly : gimp_OldSquiggly, gimp_OldSquiggly
#@gimp : note = note("Development version. This version will be removed in future from sources so if you prefer this then copy and save the source to your local .gmic file")
#@gimp : Spread noise amount  = float(2,0,20)
#@gimp : Segmentation Edge threshold = float(12,0,15)
#@gimp : Segmentation Smoothness = float(0.8,0,5)
#@gimp : GradienNormSmoothness = float(0,0,10)
#@gimp : GradienNormLinearity = float(0.5,0,1.5)
#@gimp : IncreaseChroma1 = float(3,1,4)
#@gimp : Tone threshold = float(0.2,0,1)
#@gimp : Tone gamma = float(0.4,0,1)
#@gimp : Paper Grayness = int(50,0,255)
#@gimp : Paper whiteness = int(245,0,255)
#@gimp : Squiggle Gamma = int(45,1,128)
#@gimp : Squiggle Multiplier = float(0.5,0,1)

gimp_OldSquiggly :
--gimp_spread[0] $1,$1,0,0  #Spread noise (image1)
-gimp_segment_watershed[1] $2,$3,0,0   #Segmentation (image1)
--gimp_gradient_norm[1] $4,$5,0,100,0,0 #Gradient norm (image2)

#Create colorized squiggle
--blend[2,1] multiply #image 3
#Increase chroma threes have been modified from 1 and
-gimp_mix_ycbcr[3] 1,0,0,$6,0,0,$6,0,0,0,2,0 #image 3

#Tonemap original
-gimp_map_tones[0] $7,$8,0.1,30,0,0 #image 0
#-gimp_apply_curve[0] 0,30,128,-1,128,-1,128,-1,128,-1,128,255,1,3,0,0,0
#Compose Squigglies to original
-blend[0,3] darken #it seems image 3 is destroyed in this op.

-remove[1,2] #remove extra images to save memory 3->0

#Create paper
#--gimp_plasma 0.5,10 #Image 1
--gimp_plasma 0.5,10,8,0 #Image 1
-gimp_blackandwhite[1] 0.299,0,0.587,0,0.114,0,1,1,0,0,0,0,0,0,2,0,0,0,16,4,0,0,0
#adjust paper lightness, 7 and 215 need to be parameters
-gimp_apply_curve[1] $9,-1,128,-1,128,-1,128,-1,128,-1,128,$10,1,3,0,0,0

#Adjust squiggly
-gimp_apply_curve[0] 0,$11,128,-1,128,-1,128,-1,128,-1,128,255,1,3,0,0,0

#Combine paper and squiggly
-mul[0] {0.5*(1+$12)}
-mul[1] {0.5*(1-$12)}

--add[0] [1] #image 2

--blend[0,2] softlight #image 3
-remove[0,1,2]


#************END OF FILTER*************
#***********************************
#AbstractFlood
#************************************
#@gimp Abstract Flood : gimp_AbstractFlood, gimp_AbstractFlood_Preview(1)
#@gimp : sep = separator()
#@gimp : note = note("Warning: Really really slow filter especially with Cubism enabled. Use a maximum of 1 megapixel image. Random walk algorihm is used to select new areas to flood. If Cubism is enabled the filter has to run cubims for every succesful repeat defined in the flood settings section.")
#@gimp : Preprocess with bilateral filtering = bool(1)
#@gimp : Spatial variance = float(10,0,100)
#@gimp : Value variance = float(7,0,100)
#@gimp : Iterations = int(2,1,10)
#@gimp : sep = separator()
#@gimp : note = note("Flood settings")
#@gimp : Activate Flood = bool(0)
#@gimp : Repeats = int(10,1,1000)
#@gimp : Flood Tolerance = int(5,0,100)
#@gimp : Flood base step = int(3,1,10)
#@gimp : Canvas Color = color(255,255,255,255)
#@gimp : sep = separator()
#@gimp : note = note("Abstraction setting, Consider disabling preview if using high flood repeats!")
#@gimp : Activate Cubism = bool(0)
#@gimp : Cubism Iterations = int(300,1,2000)
#@gimp : Bloc size = float(10,0,40)
#@gimp : Angle = float(90,0,360)
#@gimp : Opacity = float(0.7,0.01,1)
#@gimp : Smoothness = float(0,0,5)
#@gimp : note = note("Opacity threshold used to make decision about flooding. Use 0 if Cubism is not enabled.")
#@gimp : Opacity tolerance = int(0,0,254)
#@gimp : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gimp : sep = separator(), note = note("<small>Author : <i>Arto Huotari</i>.      Latest update : <i>2013/09/28</i>.</small>")
#@gimp : note = link("Filter Explained here","http://www.flickr.com/photos/naggobot/6243715666")

gimp_AbstractFlood :

#Parameters from input
Prep=$1
SpatialVariance=$2
ValueVariance=$3
Iterations=$4
ActivateFlood=$5
Repeats=$6
Tolerance=$7
FloodBaseStep=$8
CanvasR=$9
CanvasG=$10
CanvasB=$11
Opacity=$12
ActivateCubism=$13
CubismIterations=$14
Blocsize=$15
Angle=$16
CubismOpacity=$17
Smoothness=$18
StepThreshold={$19+0.1} #Threshold for opacity, has pixel been flooded or not

Step=$FloodBaseStep
Delta=1 #Base step addition i.e. how much the bug step is increased if the pixel was not good place to make flood
#Save delta org for later use
DeltaOrg=$Delta

#add alpha channel to original just in case
-to_rgba[0]

#Preprocess with bilateral filtering
-if {$Prep==1}
-gimp_bilateral[0] $SpatialVariance,$ValueVariance,$Iterations,0,0 #image 0
-endif
#Make bg for composing. Bg is transparent so that alpha can be used to
#determine if operation should be done.
({$CanvasR}^{$CanvasG}^{$CanvasB}^0) #image 1

-to_rgba[1] #force to RGBA just in case
-r[1] [0] #resize to image size

#Start pattern from centre and proceed
#with random walk. start/centre point is
X={(w)/2}
Y={(h)/2}
#Grab image h and w for later use
ImageH={(h)}
ImageW={(w)}

#Set DoLoop decision parameters for later use
DoLoop=0
IsGood=0

#Go to loop if ActivateFlood = 1
-if {$ActivateFlood==1}

	#A comment here is needed
	-repeat $Repeats

		#The actual flood is done by this
		#-ellipse {100*$X/w}%,{100*$Y/h}%,{1},{1},{0},1,255,0,255
		-flood[0] {100*$X/w}%,{100*$Y/h}%,0,$Tolerance,0,1,@{0,($X,$Y,0,0)},@{0,($X,$Y,0,1)},@{0,($X,$Y,0,2)},@{0,($X,$Y,0,3)} #Img0

		#Select the color that was flooded + others pixels of same color
		--gimp_select_color[0] 0,1,0,@{0,($X,$Y,0,0)},@{0,($X,$Y,0,1)},@{0,($X,$Y,0,2)},@{0,($X,$Y,0,3)},0,0 #image2

		-if {$ActivateCubism==1}
			#Treat color with Cubism
			-cubism[2] $CubismIterations,$Blocsize,$Angle,$CubismOpacity,$Smoothness
		-endif

		#Compose with alpha blending mode
		-blend[1,2] alpha

		#Calculate new coordinate in do while loop until
		#new coordinate has opacity lower than threshold
		#and new coordinate is whitin image boundary

		-do
			#Random step length is minimum step + delta which is dependent on how many attempts have been made
			Rstep={$Step+$Delta}
			#Random direction to go to
			theta={?(360)}
			#Add to previous coordinate to get new coord

			Xnew={int($X+$Rstep*cos($theta))}
			Ynew={int($Y+$Rstep*sin($theta))}

			#Check if new coordinate is good ie whitin image
			-if {{$Xnew>0}" && "{$Xnew<$ImageW}" && "{$Ynew>0}" && "{$Ynew<$ImageH}}
				#If coord was good set as new 'bug' location
				X=$Xnew
				Y=$Ynew
				#Check the alpha of new coord. If above threshold increase delta
				-if {@{1,($X,$Y,0,3)}>$StepThreshold}
					#Increase delta if no suitable pixel could be found on previous step
					#Delta is smaller of the previous
					#Base step size + do while loop number #or# one tenth of maximum image dimension
					Delta={min({$Delta+$Delta*2},{max($ImageW,$ImageH)/5})}
				-endif

				#Check the alpha of new coord,
				#if below threshold exit do-while and flood
				-if {@{1,($X,$Y,0,3)}<$StepThreshold}
					IsGood=10
				-endif
					#make sure that loop will be eventuall exited, run a max of 100 do-while loops
				-if {$DoLoop>100}
					IsGood=10
				-endif
			-endif
			#Increase do loop counter
			DoLoop=$DoLoop+1
		#Continue until IsGood has been set to 10
		-while {$IsGood<1}

		#Set trigger to bad i.e 0
		IsGood=0
		DoLoop=0
		Delta=$DeltaOrg
	-done

-endif

#Create specified color BG and Compose
({$CanvasR}^{$CanvasG}^{$CanvasB}^{$Opacity}) #image 2
-r[2] [0]
-reverse[1,2]
-blend[1,2] alpha

#Keep only result
-if {$ActivateFlood==1}
	-keep[1]
-elif  {$ActivateFlood==0}
	-keep[0]
-endif

gimp_AbstractFlood_Preview :
  -gimp_split_preview "-gimp_AbstractFlood ${1--2}",$-1

#**********EndOfFilter*************

# Local Variables:
# mode: sh
# End:
#
# (End of G'MIC custom commands)
