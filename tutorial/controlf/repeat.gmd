# repeat … done
%% x "mkdir -p img" %%
%% ../listmanip/images/ampersand.svg -to_rgb. f. 'c==0?255*(1-(i/255)):0' b. 3,1,0 expand_x {w/2} 100%,100%,100%,100% a[-2,-1] y [0] nm. accumulator store[0] ampersand repeat {360/6} k={6*($>+1)} i[0] $ampersand nm[0] ampersand rotate[ampersand] {$k},2,1,255,255 n[ampersand] 0,255 f[ampersand] 'wv=vector3(1/sqrt(3));rot(wv,$k)*I' c[ampersand] 0,255 -blend[ampersand,accumulator] negation,0.985 nm. accumulator n[accumulator] 0,255 -done -r2dx. 50%,5 -o. img/ampercd.png rm 0 %%

|![ampersandcd](img/ampercd.png)|The `-repeat` _<conditional block>_ `-done` commands define a conditional block which repeats over the number of cycles given by `-repeat's` numeric parameter.\n\nThat parameter may take any integer value, but `-repeat` does not act upon zero and negative parameters, furnishing an implicit conditional positive value test. This can be convenient if `-repeat`'s parameter has been generated by the script itself or is a [mathematical expression](https://gmic.eu/reference/mathematical_expressions.html#top).\n\n`-repeat` may take a second, optional argument, that establishes an alias for the substitution `$>` (the current loop count) within the conditional block. Do not use the '$' substitution signet when defining the alias, but do use '$' with the alias in the conditional block to reference the current loop count.

Terminate a `-repeat … -done` iteration prematurely by inserting a ''-break'' command anywhere in the conditional block. Usually one embeds the `-break` command in a ''-if'' … ''-endif'' block. Similarly, a ''-continue'' command within the `-repeat … -done` block terminates the current iteration; `-repeat` decrements its loop count and, if that is still positive, restarts execution with the initial command in the conditional block.

## Examples
|-1.    |`-repeat 5,count` \n `    -echo "The count is "$count"."` \n `-done`|Count to four from zero.
| 2.    |`-repeat 100,count` \n `    bigu={u}` \n `    -if $bigu>0.9` \n `       break` \n `    -fi` \n `-done` \n `-echo "Big U: "$bigu" at count "$count" broke things. :("`|Break on Big U.
| 3.    |`-repeat 100,count` \n `    theu={u}` -n `    -if $theu<0.1` \n `      -echo "The U "$theu": too small to continue..."` \n `      -continue` \n `    -elif $theu>0.9` \n `      -echo "The U "$theu": too big to continue..."` \n `      -continue` \n `    -fi` \n `    -echo  "The U "$theu": is just right!"` \n `    -break` \n `-done` \n `-echo "Done with The U: "$theu" at count "$count". :)"`|Operate only in the comfort zone.

## Twirling a 1911 Goudy Ampersand

|+`../listmanip/images/ampersand.svg`|Text 1
|`-to_rgb.`|Text 2
|`-fill. 'c==0?255*(1-(i/255)):0'`|Text 3
|`-blur. 3,1,0`|Text 4
|`-expand_x {w/2}`|Text 5
|`-input 100%,100%,100%,100%`|Text 6
|`-append[-2,-1] y`|Text 7
|`[0] `|Text 8
|`-name. accumulator`|Text 9
|`-store[0] ampersand`|Text 10
|`-repeat {360/6}`|Text 11
|`    k={6*($>+1)}`|Text 12
|`    -input[0] $ampersand`|Text 13
|`    -name[0] ampersand`|Text 14
|`    -rotate[ampersand] {$k},2,1,255,255`|Text 15
|`    -normalize[ampersand] 0,255`|Text 16
|`    -fill[ampersand] ">` \n `                        wv=vector3(1/sqrt(3));` \n `                        rot(wv,$k)*I"`|Text 17
|`    -cut[ampersand] 0,255`|Text 18
|`    -blend[ampersand,accumulator] negation,0.985`|Text 19
|`    -name. accumulator`|Text 20
|`    -normalize[accumulator] 0,255`|Text 21
|`-done`|Text 22

## List Iteration with ''-local'' … ''-endlocal''

It is a common G'MIC idiom to nest a `-local…-endlocal` block within a `-repeat … -done block`. The construct creates an image list iterator, a form that many G'MIC commands take. In this construct, the argument to `-repeat` is frequently the image list size substitution sequence, `$!`. As `-repeat` iterates from zero to the size of the image list, less one, another substitution sequence `$>` assumes the loop count, incrementing by one with each iteration. This becomes the argument to `-local`, constituting the inner block of the iterator. This induces `-local` to create a _local list_ consisting of just the image indexed by `$>`. The body of the command resides in the `-local`…`-endlocal` block, where the effects of its operations are restricted to the one image on the local list. In the larger scheme of things, the image iterator "visits" each image in turn and during the course of the iteration the effects of its operations are limited to that one image.
