# for (+)
%% x "mkdir -p img" %%
|![frontimage](images/forfun.png)|The `-for` _<loop scope>_ `-done` commands form a syntactical unit that repeatedly tests the [mathematical_expression](https://gmic.eu/reference/mathematical_expressions.html#top) argument given to `-for` and, if `True,` executes the in-scope commands, if any. The _<loop scope>_ need not be populated and is a placeholder when empty.\n\n`-for`…`-done` expresses a "test, then perform" pattern. With the conditional test at the top of the loop, the in-scope commands won't execute at all if `-for`'s argument first resolves to `False`. For a "perform, then test" pattern. consider ''-do'' … ''-while''.\n\nIf the contemplated conditional test entails simply incrementing or decrementing a counter, consider `-repeat`…`-done` instead, which has such counters built in. `-for`…`-done` is better for less straight forward circumstances, such reacting to changes in image conditions.\n\nPrior to 2.6, `-for` would test file system references. This is no longer supported. Use the file system mathematical expressions `isfile()` or `isdir()` instead.
%% 300,300,1,1 noise 0.01,2 abs. 3,3,1,1,-0.125 =. 1,1,1 for abs(im#-2)<0.72 -convolve.. [-1],2,1 done rm. n. 0,255 -o. img/convolve.png rm 0 %%
= examples
## Examples
One common use entails running a process until an image metric reaches a certain value that is deemed to be "done." With `-convolveuntil` we repeatly convolve-and-normalize an image containing unit impulses with an (approximate) [Airy disk](https://en.wikipedia.org/wiki/Airy_disk). This particular kernel amplifies differences in images. 
|![convolve](img/convolve.png)|` convolveuntil: ` \n `    -300,300,1,1            # Zero image with unit impulses.` \n `    -noise 0.01,2 ` \n `    -abs. ` \n `    -input 3,3,1,1,-0.125   # 3×3 Airy Disk for ` \n `    -set. 1,1,1             # repeated convolutions.` \n `    -for abs(im#-2)<=0.72   # Convolve until image` \n `       -convolve.. [-1],2,1 # minimum falls to -0.72.` \n `    -done ` \n `    -remove. ` \n `    -normalize. 0,255`