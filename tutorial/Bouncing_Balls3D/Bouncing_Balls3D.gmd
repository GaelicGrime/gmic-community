# 3D Bouncing Balls

## An example of G'MIC scripting:

The idea is to let people discover the possibilities of the \G'MIC language for creative coding and quick prototyping. We'll show how to write a \G'MIC script that generates the animation below, without going into all the details of the scriptâ€™s source code.

===
__â‡’ You donâ€™t need any prior knowledge of the  language to follow this tutorial!__

![teaser](images/teaser.gif)
*Fig.1. 3D balls bouncing on a sheet*
===

Perhaps this will make some people want to go deeper into its use for implementing custom image filters, who knows ? (despite the fact we all know the syntax looks a bit esoteric at a first glance! ðŸ™‚).

âš  At the end,  we wonâ€™t get exactly the same animation as above, but something really similar (I donâ€™t remember nor saved the exact parameters Iâ€™ve used at first to be honest!). âš 

Final code will be about **50 lines long**. Iâ€™ll \G'MIC use  version **2.9.6**, which is the most up-to-date version, at the time of writing this tutorial. Ready ? So, letâ€™s go for a \G'MIC ride!

---
## Step 1: Create a new G'MIC command.

G'MIC is an open-source framework for image processing, and has been thus designed as very versatile and extensible: Anyone is able to define their own custom commands that can be used afterwards in any G'MIC pipeline.

Thatâ€™s exactly what we will do here: write a single command dedicated to rendering this 3D bouncing ball animation. To do this, we first have to create a new text file 'tutorial.gmic', define and write the first lines of our new command, letâ€™s name it `tutorial3d`. This file looks like this:
~~~
# This is the content of the file `tutorial.gmic`.
#-------------------------------------------------
tutorial3d :
  echo "A cool G'MIC tutorial!"
~~~