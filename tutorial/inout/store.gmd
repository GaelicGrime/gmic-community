# store
%% x "mkdir -p img" %%
|![usdoj](images/usdoj_1892.jpg) *Document store, United States Department of Justice, 1892*|''-store'' transfers the selected images to command line variables labeled by one or more string objects given as arguments. Unless it has a '+' left hand decoration, this command removes the selected images from the image list. A '+' lefthand decorator prompts image duplication prior to any command's execution; see [Command Decorations](https://gmic.eu/tutorial/command_decorations.html), preserving the image as its duplicate is stored and removed from the image list.

Stored images may be retrieved and returned to the image list by the ''-input'' command, providing arguments consisting of variables created by ``store`` commands.

===
%% sp car,300 store orangecar i $orangecar %%
===
|1.  |__Store and retrieve__: Transfer an image to a variable, removing it from the image list. Restore it to the image list later in the pipeline.
===
~~~
gmic                     \
   -sample car,300       \
   -store[-1] orangecar  \
   ...                   \
   -input $orangecar     \
~~~
===

===
%% sp cat,300 store stuff i $stuff i $stuff i $stuff %%
===
|2.  |__Duplicate__:''-input'' does not delete, drain or otherwise change its arguments so variables storing images may be used to restore them any number of times. For three orange cats:
===
~~~
gmic                     \
   -sample cat,300       \
   -store[-1] orangecat  \
   ...                   \
   -input $orangecat     \
   -input $orangecat     \
   -input $orangecat     \
~~~
===

===
%% sp cat,car,monkey,300 store stuff i $stuff %%
===
|3.  |__Storing Image Lists__: If a single variable name is specified in``-store``'s argument list, all selected images are stored in the one variable as an image list.  
===
~~~
gmic                           \
   -sample cat,car,monkey,300  \
   -store stuff                \
   ...                         \
   -input $stuff               \

~~~
===

|4.  |__Storing Series of Single Images__: Furnishing `-store` with more than one argument induces G'MIC to store one image only for each argument. In this case, the number of arguments given to store must equal the number of selected images. Since the exact number of selected images may not be immediately clear from the selection decoration, employing image list notation (3.) is less error prone.  
===
~~~
gmic                           \
   -sample cat,car,monkey,300  \
   -store cat,car
[gmic]-0./ Start G'MIC interpreter.
[gmic]-1./ Input sample image 'cat' (1 image 300x275x1x3).
[gmic]-2./ Input sample image 'car' (1 image 300x200x1x3).
[gmic]-3./ Input sample image 'monkey' (1 image 300x281x1x3).
[gmic]-3./ Store images [0,1,2] as  variables 'cat,car'
[gmic]-3./ *** Error *** Command 'store': Specified arguments 'cat,car' do not match numbers of selected images.
~~~
===

## Exchanging Data with the Math Expression Parser

''-store'' allied with the [Math Expression Parser's](https://gmic.eu/reference/mathematical_expressions.html#top) functions `store(A,'varname',_w,_h,_d,_s,_is_compressed)` and `get('variable_name',_size,_return_as_string)` furnish channels for significant data exchange between the two environments.
===
%% eval "foo=vector256(0);for(n=0,n<256,foo[n]=u,n=n+1);store(foo,'fooimg',16,16,1,1,0)" $fooimg r2dx 256,1 n 0,255 %%

~~~
gmic                                       \
   -eval "foo=vector256(0);                \
          for(n=0,n<256,foo[n]=u,n=n+1);   \
          store(foo,'fooimg',16,16,1,1,0)" \
   -input $fooimg                          \
   -r2dx. 256,1                            \
   -normalize. 0,255                       \
   -output halfrandom.png
~~~
===

# Command reference

===
"""
gmic -h store
"""
===
