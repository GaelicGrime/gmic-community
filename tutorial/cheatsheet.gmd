# G'MIC Cheatsheet
Welcome to the G'MIC command line interface cheatsheet. 

## Check List
1. You have installed the _G'MIC Command Line Interface_ ( [Tell me how](https://gmic.eu/download.html) ) and know the difference between the G’MIC `cli` and the far more well-known _gmic-qt_ interface, a plug-in for 8bf compatible paint programs like Gimp or Krita. 
2. You understand what a [shell]( https://en.wikipedia.org/wiki/Shell_(computing) ) is and how to invoke your operating system's version of a shell.
3. You wish to apply a _pipeline_ to an _image list_ and save the results.

## Bail out
If your response to any check list item is ‘No’ or ‘I’m not sure.’ then you are on the wrong page. Bail. Out. Now.

1. If you are looking for help in using G’MIC in a paint program,  Try asking questions on community forums such as [discuss.pixls.us](https://discuss.pixls.us/c/software/gmic/10) or [Gimp Chat](http://gimpchat.com/viewforum.php?f=28).

2. If you _do_ want to use G’MIC’s `cli` but don’t understand how to apply these cheats, then start with the [Tutorial Introduction](https://gmic.eu/tutorial/) and [Basics]( https://gmic.eu/tutorial/basics.html )

## Good to Go
With G’MIC commands, you:

1. Put images on the _image list_
2. Apply a set of image processing commands
3. Output results in a well-understood manner

Put these injunctions on a yellow sticky pad. Be able to identify where you populate the image list, apply image processing commands and output results _in a well-understood manner_.

The third injunction delineates G’MIC `cli` from paint programs. The `cli` provides vast image processing freedoms. To do so efficiently it removes default guard rails. That means you can write signed floating point data to a Portable Network Graphics (`.png`) container. The `cli` trusts you have your reasons for doing such a curious thing and won’t stop you.  

### Examples
|-![eletter](images/e_letter.png)|__e_letter.png__
| `gmic ` \n`   -input e_letter.png ` \n`   -resize. 25%,25%,100%,100%,5 ` \n`     

