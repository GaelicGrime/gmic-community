%% x "mkdir -p img" rm %%
|+ [Cheat Home](cheatsheet.html) | __Custom Cheat__ |[Display Cheat](display_cheat.html)|                    |                    |                    
|                    |                    |                    |                    |                    |                    
%% images/e_letter.png r 10%,10%,100%,100%,5 +b. 3 - round 1 n 0,255 o. img/e_ltr_diff.png rm %%
= usecustomcommandstobypasstheshell
### Cheat #2: Use Custom Commands to Bypass the Shell
Except for _impromptu_ experiments, put cheats in command files. Use a `.gmic` extension, then cite the command file in a short, simple pipeline. Most processing takes place in the command files.

`gmic shellbypass.gmic …`

This technique shields commands written in `shellbypass.gmic` from an initial pass by the shell's command line interpreter, not the same as G'MIC's. This is important because characters like `(`, `)`, `%`, `$` are often significant to both interpreters.

The [cheatsheets](cheatsheet.html) employ as illustrations very elementary _custom commands_. See [Adding Custom Commands](https://gmic.eu/reference/adding_custom_commands.html#top) for details and [3D Bouncing Balls](https://gmic.eu/tutorial/bouncing_balls_tutorial.html) for a first-time-ever introduction and walkthrough for writing custom command files.

With earlier G'MIC versions, you may see `shellbypass.gmic` preceded with `-m` or its longform: ''-command.'' As of this writing (__2.9.8__), when a G'MIC command file is the first pipeline item, it is read and acted upon as if had been preceeded by `-command`.

All the following cheats use shell bypass and are written as simple custom commands: _\<name> : <definition>_, with the _<definition>_ consisting of one or more commands, along with their arguments, one per line, each on the second and subsequent lines:

|-`diffblur : ` \n `   +blur. 3 ` \n `   -sub ` \n `   -round 1 `|Create a text file, `diffblur.gmic` to hold the custom command `diffblur`. The first line names the command. One space and then a colon `:` character. The G'MIC _implementation_ follows on the second and subsequent lines.
|![diffblur](img/e_ltr_diff.png)\n                                                                |The implementation should be generic. Minimize specifics like file names or fixed-value arguments. Think _reuse!_

Invoke the custom command, adding specifics like what is being input and where the output goes.\n`$ gmic diffblur.gmic -input e_letter.png -diffblur -normalize 0,255 -output e_ltr_diffblur.png.`

