# G'MIC Cheatsheet
%% x "mkdir -p img" images/e_letter.png bd=${} r. 20%,20%,100%,100%,5 n. 0,{2^$bd-1} o. img/e_ltr_sm.png rm %%
|![small_e](img/e_ltr_sm.png)|Welcome to the G'MIC command line interface (_cli_) cheatsheet. Use the operating system shell to:\n1. put images on an _image list_,\n2. apply an image processing _pipeline_ to _image list items_,\n3. output results in a _well-understood manner_.\nIf you have not used the G'MIC _cli_ ___at all!___ (as in: ___never!___), then visit [Tutorial Introduction](https://gmic.eu/tutorial/) and [Basics](https://gmic.eu/tutorial/basics.html). Can’t cheat unless you know what you’re cheating at.
## Before Cheating
Skip to [Cheats](#cheats) if you know what you are doing.
= checklist
## Check List

|- 1. |Installed the _G'MIC Command Line Interface_ ( [Tell me how](https://gmic.eu/download.html) )?| □
| 2. |Know the difference between the _cli_ and _gmic-qt_ ?| □
| 3. |Know how to access and use your operating system [shell](https://en.wikipedia.org/wiki/Shell_%28computing%29)?| □
| 4. |Understand what _output in a well understood manner_ means?| □
= bailout
## Bail out
If you miss a check then you are on the wrong page. Bail. Out. Now.

|- 1. |There is no help here on using G’MIC in a paint program (_gmic-qt_). Try [discuss.pixls.us](https://discuss.pixls.us/c/software/gmic/10) or [Gimp Chat](http://gimpchat.com/viewforum.php?f=28).
| 2. |Help for _outputting images in a well understood manner_ may be found at [Images](https://gmic.eu/tutorial/images.html) and [Images as Data Sets](https://gmic.eu/tutorial/images_as_data_sets.html).
= goodtogo
## Good to Go
With G’MIC _cli_ you:

|- 1. |Put images on the _image list_
| 2. |Apply a set of _image processing commands_
| 3. |Output results in a _well-understood manner_

Put these three injunctions on a yellow sticky pad. Paste it within eyesight. Until it becomes muscle memory, be able to identify:

|- 1. |Where and how you populate the image list,
| 2. |Apply image processing commands,
| 3. |Output results _in a well-understood manner_.

for any _cli_ command you write. Basic Pipeline Anatomy: Populate. Apply. Output.

The _well-understood manner_ injunction delineates G’MIC _cli_ from paint programs. The _cli_ provides vast image processing freedoms. Even the freedom to be silly. To provide freedom efficiently — _including freedom from nagging software!_ ("Are You Sure You Want To Do That? `OK`") the _cli_ removes all guard rails. _Sans_ guard rails, one may output signed floating point data to Portable Network Graphics (`.png`) containers. The _cli_ trusts you have your reasons. Corollary: Know what output you want and how you are going to use it. __Test:__ you can write pages of subimages to [Tagged Image File Formats (`.tiff`)](https://en.wikipedia.org/wiki/TIFF). Same for [Portable Network Graphics (`.png`)](https://en.wikipedia.org/wiki/Portable_Network_Graphics)? If you can answer such a question without blinking, you are probably good to go. If you took a peek at a cheatsheet somewhere and read `no` then you have some studying to do.
= cheats
## Cheats
Start here.
===
%% images/e_letter.png r 10%,10%,100%,100%,5 -n 0,255 o img/e_ltr_small.png rm %% §
===
= firstrun
### Cheat #1: First Run
===
|-![eletter](img/e_ltr_small.png)
|Download [e_letter.png](images/e_letter.png) and practice with it.

%% images/e_letter.png r 10%,10%,100%,100%,5 +b. 3 - round 1 n 0,255 o. img/e_ltr_diff.png rm %% §
===
= usecustomcommandstobypasstheshell
### Cheat #2: Use Custom Commands to Bypass the Shell
Except for _impromptu_ experiments, put cheats in command files. Use a `.gmic` extension, then cite the command file in a short, simple pipeline. Most processing takes place in the command files.

`gmic shellbypass.gmic …`

This technique shields commands written in `shellbypass.gmic` from an initial pass by the shell's command line interpreter, not the same as G'MIC's. This is important because characters like `(`, `)`, `%`, `$` are often significant to both interpreters.

This cheatsheet uses command files as very elementary _custom commands_. See [Adding Custom Commands](https://gmic.eu/reference/adding_custom_commands.html#top) for details and [3D Bouncing Balls](https://gmic.eu/tutorial/bouncing_balls_tutorial.html) for a first-time-ever introduction and walkthrough for writing custom command files.

With earlier G'MIC versions, you may see `shellbypass.gmic` preceded with `-m` or its longform: ''-command.'' As of this writing (__2.9.8__), when a G'MIC command file is the first pipeline item, it is read and acted upon as if had been preceeded by `-command`.

All the following cheats use shell bypass and are written as simple custom commands: _\<name> : <definition>_, with the _<definition>_ consisting of one or more commands, along with their arguments, one per line, each on the second and subsequent lines:

|-`diffblur : ` \n `   +blur. 3 ` \n `   -sub ` \n `   -round 1 `|Create a text file, `diffblur.gmic` to hold the custom command `diffblur`. The first line names the command. One space and then a colon `:` character. The G'MIC _implementation_ follows on the second and subsequent lines.
|![diffblur](img/e_ltr_diff.png)\n                                                                |The implementation should be generic. Minimize specifics like file names or fixed-value arguments. Think _reuse!_

Invoke the custom command, adding specifics like what is being input and where the output goes.\n`$ gmic diffblur.gmic -input e_letter.png -diffblur -normalize 0,255 -output e_ltr_diffblur.png.`

===
%% images/e_letter.png -r. 10%,10%,100%,100%,5 o. img/e_ltr_norm.png n. {0.7*ia},{1.3*ia} -o. img/e_ltr_fade.png rm %% §
===
= thedisplaycommandlies
### Cheat #3: The `-display` Command Lies
You want to shrink and fade but preview before committing. "That's what `-display` is for!" you think.

|-![eletterfade](img/e_ltr_fade.png)|Fade effect game plan: ''normalize'' in a narrow range around the image average (`ia`).
|`shrinkfade: ` \n `  -resize. 10%,10%,100%,100%,5 ` \n `  -normalize {0.7*ia},{1.3*ia} `|shrink to ten percent, normalize to a narrow\nrange around image average. A [math expression](https://gmic.eu/reference/mathematical_expressions.html#top)\nfinds that range around the predefined `ia` variable\n(for "image average").
|![eletternorm](img/e_ltr_norm.png)|`gmic shrinkfade.gmic -input e_letter.png -shrinkfade -display` \nThis is what you get after `-display`. It's wrong. The results aren't faded.

The results are not faded! But `-shrinkfade` is _right there_ on the command line (you exclaim)! And ___Right There!___ in the command file itself is the math expression `{0.7*ia},{1.3*ia}`!!! What's more, G'MIC's _very own processing log reports a narrow range!!!_

===
`…min = 29750.1, max = 49583.6, mean = 41754.9,…`
===

Angrily, you write an all caps post to the G'MIC developers: "DO SUCH OBTUSE STUPIDITIES COME NATURALLY TO YOU GUYS OR DID YOU HAVE TO STUDY ‽‽‽"

The developers shrug, pin the post to the wall — with a million others like it (well, maybe a thousand others like it) — and then go out for a fine repast at _La Cafétéria de l'ENSI_ or some classy joint like that.
