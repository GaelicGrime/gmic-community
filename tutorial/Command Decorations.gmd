%% original/select.png r2dy 300 %% By default, commands operate on all images in the stack. Often that is not what we want.

The image list can, and often will, contain many items. As we ''-input'' or otherwise conjure images, the interpreter places them in sequence, assigning indices to them starting from zero as it goes along.

Non-negative indices designate images with respect to the beginning of the stack. That is, 0, 1, 3 designate the first, second and fourth image.

Negative indices designate images with respect to the end of the stack, i. e., -1, -2, -3 designate the last, penultimate and third from the last image. In a stack of four images, both -1 and 3 designate the same image, the last one in the stack. -4 and 0 designate the first image.

# Image Selection

G'MIC allows us to decorate commands on their right hand sides with selections that restrict the scope of a command to a subset of items in the image list. Square brackets immediately to the right of the command, with no separating white space, may contain collections of image selecting indices. Thus, the pipeline:
~~~
noise[0] 0.5,2 blur[2] 10 diffusiontensors[-1] 0,1,0.7,2.3
~~~
applies noise only to just the first image on the stack, then blurs just the third and generates diffusion tensors from the last.

This illustration notwithstanding, selection notation is extensive. Selection syntax has expressions for selecting single or multiple images, ranges of images, every other, every third, or, generally, every n-th image, relative to the beginning or end of the stack, relative to the size of the overall stack, through named collections, and all images except the ones designated by a selection. It is easy (and probably inevitable) to select images which are not on the stack, an error.

Here are the ways to restrict to selected images the action of some fictive command called `foo`:

---
**Type**             **Template**              **Description**
---
Everything             `foo`             Operates on every image on the stack.
---
