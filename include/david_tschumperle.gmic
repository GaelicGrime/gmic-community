#@gmic
#
#  File        : david_tschumperle.gmic
#                ( G'MIC commands file )
#
#  Description : Personal G'MIC filters done by Ronounours and others.
#
#  Copyright   : David Tschumperle
#                ( http://tschumperle.users.greyc.fr/ )
#
#  License     : CeCILL v2.0
#                ( http://www.cecill.info/licences/Licence_CeCILL_V2-en.html )
#
#  This software is governed by the CeCILL  license under French law and
#  abiding by the rules of distribution of free software.  You can  use,
#  modify and/ or redistribute the software under the terms of the CeCILL
#  license as circulated by CEA, CNRS and INRIA at the following URL
#  "http://www.cecill.info".
#
#  As a counterpart to the access to the source code and  rights to copy,
#  modify and redistribute granted by the license, users are provided only
#  with a limited warranty  and the software's author,  the holder of the
#  economic rights,  and the successive licensors  have only  limited
#  liability.
#
#  In this respect, the user's attention is drawn to the risks associated
#  with loading,  using,  modifying and/or developing or reproducing the
#  software by the user in light of its specific status of free software,
#  that may mean  that it is complicated to manipulate,  and  that  also
#  therefore means  that it is reserved for developers  and  experienced
#  professionals having in-depth computer knowledge. Users are therefore
#  encouraged to load and test the software's suitability as regards their
#  requirements in conditions enabling the security of their systems and/or
#  data to be ensured and,  more generally, to use and operate it in the
#  same conditions as regards security.
#
#  The fact that you are presently reading this means that you have had
#  knowledge of the CeCILL license and that you accept its terms.
#

#@gui _<b>Artistic</b>
#---------------------

#@gui Illustration look : fx_illustration_look,fx_illustration_look_preview(0)
#@gui : Tone mapping (%) = float(100,0,100)
#@gui : Desaturate (%) = float(0,0,100)
#@gui : Vintage tone (%) = float(0,0,100)
#@gui : Output as multiple layers = bool(0)
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep = separator(), note = note("<small>Authors: <i>S&#233;bastien Guyader</i> and <i>David Tschumperl&#233;</i>.      Latest update: <i>2017/05/01</i>.</small>")
fx_illustration_look :
  repeat $! l[$>] nm=${-gui_layer_name}
    to_rgb nm. base_layer

    # Create processed layers.
    +fx_smooth_anisotropic[base_layer] 20,0.16,0.63,0.6,2.35,0.8,30,2,0,1,1,0,1,24 nm. blur_layer
    +blend[base_layer,blur_layer] grainextract nm. detail_layer
    if $2 rgb2hsv[blur_layer] sh[blur_layer] 1 -. {$2%} c. 0,1 rm. hsv2rgb[blur_layer] fi
    if $3 +fx_mix_rgb[blur_layer] 1,10,0,1,0,0,0.7,-10,0,0,10,0 j[blur_layer] .,0,0,0,0,{$3%} rm. fi
    if $1 +fx_map_tones_fast[blur_layer] 20,0.2,11,0 j[blur_layer] .,0,0,0,0,{$1%} rm. fi
    simplelocalcontrast_p[blur_layer] 25,1,50,1,1,1,1,1,1,1,1,1
    +fx_graphic_novelfxl[blur_layer] 1,2,6,5,20,0,1.02857,200,0,1,0.0761905,0.0857143,0,0,0,2,1,1,1,1.25714,0.371429,1.04762 nm. graphicnovel_layer

    # Order and set layer properties.
    mv[detail_layer] 0 nm[detail_layer] "name("$nm" [Detail]),mode(grainmerge),opacity(100)"
    mv[graphicnovel_layer] 1 nm[graphicnovel_layer] "name("$nm" [Paint]),mode(normal),opacity(50)"
    mv[blur_layer] 2 nm[blur_layer] "name("$nm" [Base]),mode(normal),opacity(100)"
    rm[base_layer]

    if {!$4} gui_merge_layers nm "name("$nm"),mode(normal),opacity(100)" fi
  endl done

fx_illustration_look_preview :
  gui_split_preview "fx_illustration_look ${1-3},0",$-1


#@gui _<b>Colors</b>
#---------------------

# Color Grading v1.5.3
# Copyright (c) 2012-2014 John Lakkas
# john_lakkas@yahoo.gr
# Licence: GNU GPLv3  ( http://www.gnu.org/licenses/ )

# Convert HSV to RGB triplets.
jl_hsv_to_rgb :
  ({360*$1}^$2^$3) hsv2rgb. u {^} rm.

# LEVELS input low-high gamma output low/high
levels :
  _inplow={int($1)}
  _inphigh={int($2)}
  _gamma=$3
  _outlow={int($4)}
  _outhigh={int($5)}
  _tmp2=""

  if {$_gamma!=1}
    _tmp2="-apply_gamma "$_gamma
    apply_channels $_tmp2,$6,0
  fi

  _curve1="0,"
  if {$_inplow>0}
    _tmp1="0,"
    _curve1=$_curve1$_tmp1$_outlow","
  fi
  _curve1=$_curve1$_inplow","$_outlow","$_inphigh","$_outhigh
  if {$_inphigh<255}
    _curve1=$_curve1",255,"$_outhigh
  fi

  if {['$_curve1']!='0,0,0,255,255'}
    _tmp2="-apply_curve "$_curve1
    apply_channels $_tmp2,$6,0
  fi

fx_equalize_s :
  repeat $! l[$>] split_opacity l[0] to_rgb
     rgb2hsv sh 1,1 *. $1 +. $2 c. 0,1 rm. hsv2rgb
  endl a c endl done

#@gui Color grading : jl_colorgrading, jl_colorgrading_preview(1)
#@gui : note = note("A filter for basic photo editing and color grading.")
#@gui : note = note("<small><b>Note:</b> Saturation channel gamma affects more the less saturated areas. S-curve contrast, affects shadows and highlights equally. When using noise reduction or sharpening tools, zoom in for more accurate view.</small>")
#@gui : sep = separator()
#@gui : HDR effect (Tone map) = float(0.,0.0,1)
#@gui : Cool / warm = int(0,-50,50)
#@gui : Saturation = float(1,0,2)
#@gui : Saturation channel gamma = float(1,0.1,3)
#@gui : note = note("<small><b>Note:</b> Saturation channel gamma may introduce artifacts depending on the image.</small>")
#@gui : sep = separator()
#@gui : S-curve contrast = int(0,-30,30)
#@gui : Shadows = int(0,-50,50)
#@gui : Highlights = int(0,-50,50)
#@gui : Blacks = int(0,0,50)
#@gui : Brightness = int(0,-50,50)
#@gui : Contrast = int(0,-50,50)
#@gui : Gamma = float(1,0.1,3)
#@gui : sep = separator()
#@gui : Clarity = float(0,0.0,2.0)
#@gui : Local contrast enhance = float(0,0,3)
#@gui : sep = separator()
#@gui : Color grading = bool(0)
#@gui : Highlights color intensity = int(70,0,130)
#@gui : Highlights hue = int(0,0,360)
#@gui : Highlights brightness = int(0,-100,100)
#@gui : Midtones color intensity = int(0,0,130)
#@gui : Midtones hue = int(0,0,360)
#@gui : Midtones brightness = int(0,-100,100)
#@gui : Shadows color intensity = int(70,0,130)
#@gui : Shadows hue shift = int(180,0,360)
#@gui : Shadows brightness = int(0,-100,100)
#@gui : note = note("<small><b>Color grading subsection usage:</b> Use intensity sliders to control the amount of color being applied in the highlights/midtones/shadows, use brightness sliders for bringing up or down highlights/midtones/shadows. Hues here follow rotation axis in color wheel ie: 0 or 360 deg is red, 180 is blue it's complimentary. Shadows hue shift in default position uses always the complimentary color of highlights in the shadows. Default sliders for grading apply red highlights and blue shadows effect.</small>")
#@gui : sep = separator()
#@gui : Output saturation = float(1,0,2)
#@gui : Output sharpening = float(0,0,10)
#@gui : Output chroma nr = float(0,0,20)
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep = separator(), note = note("<small>Author: <i>John Lakkas</i>.      Latest update: <i>17/03/2015</i>.</small>")
jl_colorgrading :
  if {$1>0.01}
    map_tones_fast 5%,$1
  fi
  _ystr=""
  # COLOR MANIPULATION
  # COOL / WARM filter
  if {$2>0}
  _mymin={$2}
  _mymax={255-$2}
  apply_channels "-apply_curve 0,0,$_mymin,255,255",ycbcr_cr,0
  apply_channels "-apply_curve 0,0,0,255,$_mymax",ycbcr_cb,0
  fi
  if {$2<0}
  _mymin={-$2}
  _mymax={255+$2}
  apply_channels "-apply_curve 0,0,$_mymin,255,255",ycbcr_cb,0
  apply_channels "-apply_curve 0,0,0,255,$_mymax",ycbcr_cr,0
  fi
  # HSV SATURATION (linear)
  if {$3!=1.0}
    fx_equalize_s $3,0
  fi
  # HSV SATURATION (gamma)
  if {$4!=1.0}
  apply_channels "-apply_gamma $4",hsv_s,0
  fi
  # VALUE MANIPULATION
  # S CURVE
  if {$5!=0}
  _p1={64-$5}
  _p2={192+$5}
  _ystr=$_ystr" apply_curve 1,0,0,64,$_p1,192,$_p2,255,255"
  fi
  # SHADOWS
  if {$6!=0}
  _p3={64-$6}
  _ystr=$_ystr" apply_curve 1,0,0,64,$_p3,128,128,192,192,255,255"
  fi
  # HIGHLIGHTS
  if {$7!=0}
  _p4={192+$7}
  _ystr=$_ystr" apply_curve 1,0,0,64,64,128,128,192,$_p4,255,255"
  fi
  # BLACKS
  if {$8>0}
  _ystr=$_ystr" apply_curve 1,$8,0,64,64,255,255"
  fi
  # BRIGHTNESS
  if {$9>0}
  _p5=0
  _ystr=$_ystr" apply_curve 0,0,$9,255,255"
  fi
  if {$9<0}
  _p5={255+$9}
  _ystr=$_ystr" apply_curve 0,0,0,255,$_p5"
  fi
  # CONTRAST
  if {$10>0}
  _p6=$10
  _p7={255-$10}
  _ystr=$_ystr" apply_curve 0,0,0,$_p6,0,$_p7,255,255,255"
  fi
  if {$10<0}
  _p6={-$10}
  _p7={255+$10}
  _ystr=$_ystr" apply_curve 0,0,$_p6,255,$_p7"
  fi
  # GAMMA
  if {$11!=1.0}
  _ystr=$_ystr" apply_gamma $11"
  fi
  # APPLY VALUE PROCESSING
  if {'$_ystr'!=0}
  apply_channels $_ystr,hsv_v,0
  fi
  # CLARITY (midtones unsharp mask)
  if {$12>0}
  to_rgb +rgb2hsl s. c rm.. rm.. *. 255 apply_curve. 1,0,0,63,0,127,255,192,0,255,0 +unsharp[0] 5%,$12,0 c. 0,255 c.. 0,255 rv[-1,-2] a[-1,-2] c blend alpha
  fi
   # LOCAL CONTRAST (unsharp mask)
  if {$13>0}
  unsharp 1%,$13,0
  c. 0,255
  fi
  # COLOR GRADING STEP
  if {$14}
    if {$16+$22>360}
      _shh={($16+$22-360)/360}
    else
      _shh={($16+$22)/360}
    fi
    _shs={$21/100}
    _shlev={$23}
    _midh={$19/360}
    _mids={$18/100}
    _midlev={$20}
    _highh={$16/360}
    _highs={$15/100}
    _highlev={$17}
    _satlev={$24}
    color_grade $_shh,$_shs,$_shlev,$_midh,$_mids,$_midlev,$_highh,$_highs,$_highlev,$_satlev
  fi
  # HSV SATURATION (linear)
  if {$24!=1.0}
    fx_equalize_s $24,0
  fi
  # USM
  if {$25>0}
    unsharp 0.5,$25
    c 0,255
  fi
  # CHROMA NR
  if {$26>0}
    apply_channels "-denoise_haar $26",ycbcr_cb,0
    apply_channels "-denoise_haar $26",ycbcr_cr,0
  fi

color_grade :
#convert_to_levels :
      # input:
      # shh, shs, shlev, midh, mids, midlev, highh, highs, highlev, satlev

      _shadownrgb=${-jl_hsv_to_rgb" "$1,1.0,{$2*0.40}}
      _midtonesrgb=${-jl_hsv_to_rgb" "$4,1.0,{$5*0.40}}
      _highlightsrgb=${-jl_hsv_to_rgb" "$7,1.0,{$8*0.40}}

      # make:
      # crsh, mgsh, ybsh, shlev, crmid, mgmid, ybmid, midlev, crhigh, mghigh, ybhigh, highlev, satlev

      _crsh=${-arg" 1,"$_shadownrgb}
      _mgsh=${-arg" 2,"$_shadownrgb}
      _ybsh=${-arg" 3,"$_shadownrgb}
      _shlev=$3

      _crmid=${-arg" 1,"$_midtonesrgb}
      _mgmid=${-arg" 2,"$_midtonesrgb}
      _ybmid=${-arg" 3,"$_midtonesrgb}
      _midlev=$6

      _crhigh=${-arg" 1,"$_highlightsrgb}
      _mghigh=${-arg" 2,"$_highlightsrgb}
      _ybhigh=${-arg" 3,"$_highlightsrgb}
      _highlev=$9

      _satlev=$10
      _lowinred=0
      _hiinred=255
      _lowingreen=0
      _hiingreen=255
      _lowinblue=0
      _hiinblue=255

      _gammared=0.
      _gammagreen=0.
      _gammablue=0.

      _lowoutred=0
      _hioutred=255
      _lowoutgreen=0
      _hioutgreen=255
      _lowoutblue=0
      _hioutblue=255

      #MIDTONES
      if {$_crmid>0.}
         _gammared={$_gammared+0.4*$_crmid/100.}
         _gammagreen={$_gammagreen-0.3*$_crmid/100.}
         _gammablue={$_gammablue-0.3*$_crmid/100.}
      fi
      if {$_crmid<0.}
         _gammared={$_gammared+0.3*$_crmid/100.}
         _gammagreen={$_gammagreen-0.4*$_crmid/100.}
         _gammablue={$_gammablue-0.4*$_crmid/100.}
      fi
      if {$_mgmid>0.}
         _gammared={$_gammared-0.3*$_mgmid/100.}
         _gammagreen={$_gammagreen+0.4*$_mgmid/100.}
         _gammablue={$_gammablue-0.3*$_mgmid/100.}
      fi
      if {$_mgmid<0.}
         _gammared={$_gammared-0.4*$_mgmid/100.}
         _gammagreen={$_gammagreen+0.3*$_mgmid/100.}
         _gammablue={$_gammablue-0.4*$_mgmid/100.}
      fi
      if {$_ybmid>0.}
         _gammared={$_gammared-0.3*$_ybmid/100.}
         _gammagreen={$_gammagreen-0.3*$_ybmid/100.}
         _gammablue={$_gammablue+0.4*$_ybmid/100.}
      fi
      if {$_ybmid<0.}
         _gammared={$_gammared-0.4*$_ybmid/100.}
         _gammagreen={$_gammagreen-0.4*$_ybmid/100.}
         _gammablue={$_gammablue+0.3*$_ybmid/100.}
      fi
      _gammared={$_gammared+1.}
      _gammagreen={$_gammagreen+1.}
      _gammablue={$_gammablue+1.}

      if {$_midlev>0.}
         _gammared={$_gammared+0.4*$_midlev/100.}
         _gammagreen={$_gammagreen+0.4*$_midlev/100.}
         _gammablue={$_gammablue+0.4*$_midlev/100.}
      fi
      if {$_midlev<0.}
         _gammared={$_gammared+0.3*$_midlev/100.}
         _gammagreen={$_gammagreen+0.3*$_midlev/100.}
         _gammablue={$_gammablue+0.3*$_midlev/100.}
      fi


      #SHADOWS
      _crsh={$_crsh*0.3}
      _mgsh={$_mgsh*0.3}
      _ybsh={$_ybsh*0.3}

      if {$_crsh>0}
         _lowingreen={$_lowingreen+$_crsh}
         _lowinblue={$_lowinblue+$_crsh}
         _lowoutred={$_lowoutred+$_crsh}
      else
         _lowinred={$_lowinred-$_crsh}
         _lowoutgreen={$_lowoutgreen-$_crsh}
         _lowoutblue={$_lowoutblue-$_crsh}
      fi

      if {$_mgsh>0}
         _lowinred={$_lowinred+$_mgsh}
         _lowinblue={$_lowinblue+$_mgsh}
         _lowoutgreen={$_lowoutgreen+$_mgsh}
      else
         _lowingreen={$_lowingreen-$_mgsh}
         _lowoutred={$_lowoutred-$_mgsh}
         _lowoutblue={$_lowoutblue-$_mgsh}
      fi

      if {$_ybsh>0}
         _lowinred={$_lowinred+$_ybsh}
         _lowingreen={$_lowingreen+$_ybsh}
         _lowoutblue={$_lowoutblue+$_ybsh}
      else
         _lowinblue={$_lowinblue-$_ybsh}
         _lowoutred={$_lowoutred-$_ybsh}
         _lowoutgreen={$_lowoutgreen-$_ybsh}
      fi


      if {$_shlev>0}
         _lowoutred={$_lowoutred+$_shlev}
         _lowoutgreen={$_lowoutgreen+$_shlev}
         _lowoutblue={$_lowoutblue+$_shlev}
      fi
      if {$_shlev<0}
         _lowinred={$_lowinred-$_shlev}
         _lowingreen={$_lowingreen-$_shlev}
         _lowinblue={$_lowinblue-$_shlev}
      fi


      #HIGHLIGHTS
      _crhigh={$_crhigh*0.3}
      _mghigh={$_mghigh*0.3}
      _ybhigh={$_ybhigh*0.3}

      if {$_crhigh>0}
         _hiinred={$_hiinred-$_crhigh}
         _hioutgreen={$_hioutgreen-$_crhigh}
         _hioutblue={$_hioutgreen-$_crhigh}
      else
         _hiingreen={$_hiingreen+$_crhigh}
         _hiinblue={$_hiinblue+$_crhigh}
         _hioutred={$_hioutred+$_crhigh}
      fi

      if {$_mghigh>0}
         _hiingreen={$_hiingreen-$_mghigh}
         _hioutred={$_hioutred-$_mghigh}
         _hioutblue={$_hioutblue-$_mghigh}
      else
         _hiinred={$_hiinred+$_mghigh}
         _hiinblue={$_hiinblue+$_mghigh}
         _hioutgreen={$_hioutgreen+$_mghigh}
      fi

      if {$_ybhigh>0}
         _hiinblue={$_hiinblue-$_ybhigh}
         _hioutred={$_hioutred-$_ybhigh}
         _hioutgreen={$_hioutgreen-$_ybhigh}
      else
         _hiinred={$_hiinred+$_ybhigh}
         _hiingreen={$_hiingreen+$_ybhigh}
         _hioutblue={$_hioutblue+$_ybhigh}
      fi

      if {$_highlev>0}
         _hiinred={$_hiinred-$_highlev}
         _hiingreen={$_hiingreen-$_highlev}
         _hiinblue={$_hiinblue-$_highlev}
      fi
      if {$_highlev<0}
         _hioutred={$_hioutred+$_highlev}
         _hioutgreen={$_hioutgreen+$_highlev}
         _hioutblue={$_hioutblue+$_highlev}
      fi

      levels $_lowinred,$_hiinred,$_gammared,$_lowoutred,$_hioutred,19
      levels $_lowingreen,$_hiingreen,$_gammagreen,$_lowoutgreen,$_hioutgreen,20
      levels $_lowinblue,$_hiinblue,$_gammablue,$_lowoutblue,$_hioutblue,21

jl_colorgrading_preview :
  gui_split_preview "-jl_colorgrading $*",$-1

#@gui _<b>Testing</b>
#---------------------

#@gui <i>Reptorian</i>
#@gui Modulos Operations : fx_modulo, fx_modulo_preview(0)
#@gui : note = note("This filters applies modulo operation after arithmetic operation. Future version of this filter might be able to be used on different color space and channels.")
#@gui : sep = separator()
#@gui : Multiply = float(1,0,32)
#@gui : Addition = int(0,0,255)
#@gui : sep = separator(), note = note("<small>Author : <i>Reptorian</i>.      Latest update : <i>2018/08/18</i>.</small>")
fx_modulo:
  repeat $! l[$>] split_opacity l[0]
    mul $1 add $2 mod 256
  endl a c endl done

fx_modulo_preview :
  gui_split_preview "fx_modulo $*"

#@gui _<i>Chris from Pixls.us</i>

#@gui Remove scratches : fx_remove_scratches, fx_remove_scratches_preview(0)
#@gui : note = note("<small><b>Note:</b> Scratch removal for scanned film images</small>")
#@gui : sep = separator()
#@gui : Threshold = float(72,0,100)
#@gui : Erosion = int(2,0,5)
#@gui : Dilation = int(4,0,7)
#@gui : Show preview after = choice(3,"Threshold","Erosion","Dilation","Final image")
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep = separator(), note = note("<small>Author: <i>Chris/Pixls.us</i>.      Latest update: <i>2017/04/01</i>.</small>")
_fx_remove_scratches :
  repeat $! l[$>] to_rgba
    sh 0,2
    sh.. 3
    <. {$1*255%}
    if {$4>=1} erode. $2 fi
    if {$4>=2} dilate. $3 fi
    if {$4<3} k... channels 3 * 255
    else inpaint_matchpatch.. . k... channels 0,2
    fi
  endl done

fx_remove_scratches :
  _fx_remove_scratches ${1-3},3

fx_remove_scratches_preview :
  gui_split_preview "_fx_remove_scratches $*",$-1


##########################################################

#@gui _<i>Deprecated</i>

#@gui Morphological filter (deprecated) : fx_morpho, fx_morpho_preview(0)
#@gui : Action = choice("Erosion","Dilation","Opening","Closing",
#@gui : "Original - Erosion","Dilation - Original","Original - Opening","Closing - Original")
#@gui : Size = int(5,2,60)
#@gui : Negative = bool()
#@gui : Shape = choice(0,"Square","Octagonal","Circular")
#@gui : sep = separator(), Channel(s) = choice("All","RGBA [all]","RGB [all]","RGB [red]","RGB [green]","RGB [blue]","RGBA [alpha]","Linear RGB [all]","Linear RGB [red]","Linear RGB [green]","Linear RGB [blue]","YCbCr [luminance]","YCbCr [blue-red chrominances]","YCbCr [blue chrominance]","YCbCr [red chrominance]","YCbCr [green chrominance]","Lab [lightness]","Lab [ab-chrominances]","Lab [a-chrominance]","Lab [b-chrominance]","Lch [ch-chrominances]","Lch [c-chrominance]","Lch [h-chrominance]","HSV [hue]","HSV [saturation]","HSV [value]","HSI [intensity]","HSL [lightness]","CMYK [cyan]","CMYK [magenta]","CMYK [yellow]","CMYK [key]","YIQ [luma]","YIQ [chromas]")
#@gui : Value action = choice("None","Cut","Stretch")
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep = separator(), note = note("<small>Author: <i>David Tschumperl&#233;</i>.      Latest update: <i>2014/06/08</i>.</small>")
fx_morpho :
  ac "-__fx_morpho ${^0}",$5,$6

fx_morpho_preview :
  gui_split_preview "fx_morpho ${^0}",$-1

__fx_morpho :
  if {$4==1} suf="_oct" elif {$4==0} suf="" else suf="_circ" fi
  if {$1==0} erode$suf $2
  elif {$1==1} dilate$suf $2
  elif {$1==2} erode$suf $2 dilate$suf $2
  elif {$1==3} dilate$suf $2 erode$suf $2
  elif {$1==4} repeat $! +erode$suf $2 -[-2,-1] mv. 0 done
  elif {$1==5} repeat $! +dilate$suf $2 rv[-2,-1] -[-2,-1] mv. 0 done
  elif {$1==6} repeat $! +erode$suf $2 dilate$suf. $2 -[-2,-1] mv. 0 done
  else repeat $! +dilate$suf $2 erode$suf. $2 rv[-2,-1] -[-2,-1] mv. 0 done
  fi
  if $3 repeat $! l[$>] split_opacity negate[0] a c endl done fi

##########################################################

#@gui _<i>Corvo</i>

#@gui corvo's painting_5 : fx_corvo_painting_5, fx_corvo_painting_5(0)
#@gui : note = note("Polygonize settings")
#@gui : Amplitude = int(35,0,2000)
#@gui : Smoothness = float(10,0,100)
#@gui : Minimal area = float(10,0,100)
#@gui : Alpha Polygonize = float(0.5,0,1)
#@gui : sep = separator()
#@gui : Texture = float(50,0,100)
#@gui : Plasma= float(0.3,0,1)
#@gui : sep = separator()
#@gui : note = note("Smooth settings")
#@gui : Amplitude = float(50,0,1000)
#@gui : Gradient smoothness = float(2,0,10)
#@gui : Tensor smoothness = float(5,0,10)
#@gui : Alpha Filter= float(1,0,1)
fx_corvo_painting_5 :
--polygonize $1,$2,$3,10,10
--blend[0,1] alpha,$4
-texturize_canvas[2] $5,0.5,0.6
-smooth[2] $7,0.4,0.7,$8,$9
--plasma[2] 0.7,100,8 n 0,255
-blend[3,2] grainmerge,$6
-bilateral[0,2] 10,7
-blend[0,2] alpha,$10
rm.

##########################################################

#@gui _<i>Lylejk</i>

#@gui Lylejk's stencil : fx_lylejk_stencil, fx_lylejk_stencil(0)
#@gui : Amplitude = int(5,1,10)
#@gui : Sharpness = float(10,0,100)
#@gui : Radius = float(3,0,10)
#@gui : Channel(s) = choice("All","RGBA","RGB","Luminance","Blue/red chrominances","Blue chrominance","Red chrominance","Lightness","ab-components","a-component","b-component","Hue","Saturation","Value","Key","Alpha","ch-components","c-component","h-component","Red","Green","Blue","Alpha")
#@gui : sep = separator(), note = note("<small>Authors: <i>Lyle Kroll, David Tschumperl&#233;</i>.      Latest update: <i>2010/29/12</i>.</small>")
fx_lylejk_stencil :
  apply_channels "repeat $1 b $3 unsharp $3,$2 c 0,255 mv. 0 done",$4,0

#@gui Blend [shape average] : fx_blend_shapeaverage, fx_blend_shapeaverage(0)
#@gui : Preserve shading = bool(1)
#@gui : Transparency = bool(0)
#@gui : Revert layers = bool(0)
#@gui : note = note{"<small><b>Note:</b>
#@gui : This filter needs two layers to work properly. Set the <i>Input layers</i> option to handle multiple input layers.
#@gui : </small>"}
#@gui : sep = separator(), note = note("<small>Author: <i>David Tschumperl&#233;</i>.      Latest update: <i>2011/19/10</i>.</small>")
fx_blend_shapeaverage :
  if ${3=0} _fx_revert_layers fi
  to_rgb
  repeat {int($!/2)}
    rv[-2,-1]
    if $1 i[0] . fi
    blend[-2,-1] shapeaverage0
    if $1 *[0,-1] /[0] 255 mv[0] $! fi
    if $2 to_rgba. replace_color. 0,0,0,0,0,255,0,0,0,0 fi
  mv. 0 done

#@gui _<i>RL</i>

#@gui RandomWaves : randomwaves, randomwaves
#@gui : Steps Number = int(84,1,1000)
#@gui : Probability of impulse (% / step) = float(80.,1.,100.)
#@gui : Lessening = float(1.2,0.01,10.)
#@gui : Random Initialization = int(42,1,100)
#@gui : sep = separator(), note = note("<small>Authors: <i>Jean-Baptiste Rolland, Julien Levillain</i>.      Latest update: <i>2013/28/03</i>.</small>")
randomwaves : check  "isint(${1=84})  &&  ${2=80}>=0  &&  $2<=100  && ${3=1.2}>0. && isint(${4=42})"
  srand $4
  (0,1,0;1,0,1;0,1,0) /. 2
  nm. matconv
  {0,w},{0,h},1,1 set. 255,{u(100)}%,{u(100)}%
  .
  repeat $1
    .
    if {${2}>=u(100)}
      circle. {u(100)}%,{u(100)}%,{u(3)},,255
    fi
    convolve. [matconv] /. $3 -. ...
    rm...
  done
  rm[-2,matconv]
  g. a[-1,-2] c -warp[0] .,1 rm.

#@gui Plasma Transition : plasma_transition, plasma_transition
#@gui : Balance = float(0.5,0,1)
#@gui : Scale = int(5,0,50)
#@gui : Smoothness = float(1,0,10)
#@gui : Random Initialization = int(42,1,100)
#@gui : sep = separator(), note = note("<small>Authors: <i>Jean-Baptiste Rolland, Julien Levillain</i>.      Latest update: <i>2013/28/03</i>.</small>")
plasma_transition: check "isint(${4=42}) && isint(${2=5}) && ${1=0.5}>=0  && $1<=1 && $2>=0 && ${3=1}>=0"
  repeat {int($!/2.0)}
    local[{$>},{$>+1}]
      if {$!<2} return fi
      r ${-max_whds},3
      100%,100% srand $4 plasma. 1,0,$2 n. 0,1
      +<=. $1 b. $3
      rm..
      j... ..,0,0,0,0,1,.
      k...
    endlocal
  done

##########################################################

#@gui _<i>Okyl168</i>

#@gui Jobs colors : fx_jobs_colors, fx_jobs_colors_preview
#@gui : Gamma = float(0,-2,2)
#@gui : Equalize = bool(0)
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep = separator(), note = note("<small>Author: <i>Oberon Leung</i>.      Latest update: <i>2014/25/01</i>.</small>")
fx_jobs_colors :
  n 0,255 if $2 equalize 256 fi
  luminance apply_gamma {10^$1} n 0,9 round
  (22,187,20,36,235,240,245,243,247,209^18,97,147,157,79,110,121,142,170,200^19,158,192,60,67,65,64,64,64,185)
  map[^-1] . rm.

fx_jobs_colors_preview :
  gui_split_preview "fx_jobs_colors $*",$-1

##########################################################

#@gui _<i>Telperion</i>

# ---------------------------------- v 2.2

# ---------------------------------- v 1.1
#@gui Mc_Flou : mc_flou, mc_flou_preview
#@gui : sep = separator()
#@gui : Sharp = float(30,10,400)
#@gui : Blur = float(6,3,20)
#@gui : Blend = float(1,0,1)
#@gui : sep = separator() ,note = note("Base image adjustement:")
#@gui : Skip = bool(true)
#@gui : Gamma = float(1,0.2,2)
#@gui : Value min = int(0,0,127)
#@gui : Value max = int(255,128,255)
#@gui : Gamma R = float(1,0.2,2)
#@gui : Gamma G = float(1,0.2,2)
#@gui : Gamma B = float(1,0.2,2)
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep = separator() ,note = note("Apply a flou effect with edges protection. v.1.1")

mc_flou:
  # base image value corrections
  if {$4==0}
    to_rgb
    apply_gamma[0] $5
    c[0] $6,$7 n[0] 0,255    # min max val
    s[0] c
    apply_gamma[0] $8
    apply_gamma[1] $9
    apply_gamma[2] $10
    a[0,1,2] c
  fi
  # -----
  # flou
  +fx_gradient_norm[0] 0,1.5,0,50.38,1,0
  sharpen[0] $1 #30
  b[1] 0.5
  n[1] 0,255
  equalize[1] 4,0%,98%
  +a[0,1] c
  b[2] $2 #10
  blend[0,2] alpha,$3
  remove_opacity[0]
  k[0]

mc_flou_preview:
  gui_split_preview "-mc_flou $*",$-1
# ------------------------------------------

#@gui Mc_Pendraw : mc_pendraw, mc_pendraw_preview
#@gui : sep = separator()
#@gui : Amplitude = float(8,0,30)
#@gui : Blur = float(0.8,0.1,2)
#@gui : Sharp = float(450,100,2000)
#@gui : Color = int(21,4,256)
#@gui : Dithering = float(0.5,0,1)
#@gui : Value = float(1,0,1)
#@gui : Mode 2 = bool(false)
#@gui : Color equal. = bool(false)
#@gui : Equal. limit = int(255,100,255)
#@gui : sep = separator()
#@gui : Lowers contrast = float(0,0,1)
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
mc_pendraw:
  repeat $! l[$>]
  split_opacity
  l[0]
  to_rgb
  # contrast mask
  if {$10>0}
    [0]
    b[0] 1
    negate[0]
    luminance[0]
    rv[0,1]
    blend[0,1] overlay,$10
  fi
  # pendraw
  +fx_gradient_norm[0] 0,1.5,0,50.38,1,0
  [0]
  smooth $1,0.2,1,3,3
  b $2
  sharpen $3
  [0]
  r[0] 20,20,1,3,2
  equalize[0] 256,0%,98%
  index[3] [0],1,1
  rm[0]
  # --
  nm[0] linee
  nm[1] orig
  nm[2] pen
  if {$7==0}
    rv[pen,linee]
    blend[pen,linee] multiply,1
  elif {$7==1}
    rv[orig,linee]
    blend[orig,linee] multiply,1
  fi
  n[0] 5,250
  autoindex[0] $4,$5
  rv[0,1]
  blend[0,1] value,$6
  if {$8==1}
    equalize 21,30,$9
  fi
  endl a c endl done

mc_pendraw_preview:
  gui_split_preview "-mc_pendraw $*",$-1

##########################################################

#@gui _<i>Ronounours</i>

#@gui Krita helper : fx_krita, fx_krita
fx_krita :
  text="Krita helper:\n"\
       "Image size = "{w}x{h}x{d}x{s}"\n"\
       "Minimal value = "{im}"\n"\
       "Maximal value = "{iM}"\n"\
       "Average value = "{_round(ia,0.1)}"\n\n\n"\
       "* We love Krita! *"
  n 0,255 drgba r 512,512,1,3
  to $text,3,3,5%


_gui_filter_sources : skip ${1=0}
  # ok_host={['$_host']!='gimp_qt'" && "['$_host']!='krita'" && "['$_host']!='standalone'}
  # ok_host=0
  # file_hc=${_path_rc}hc.gmic
  # if $file_hc # File exist
  #   i raw:$file_hc,uchar c={i[1]} rm.
  #   if {$c==126} # Filter already displayed : discard it
  #     if {!$1} (35,33) o. raw:{/$file_hc},uchar rm. fi
  #   elif $ok_host
  #     is_too_old={"Y = date(0); M = date(1); D = date(2); date_current = Y*365 + M*31 + D;
  #                  Y = date(0,"$file_hc"); M = date(1,"$file_hc"); D = date(2,"$file_hc"); date_file = Y*365 + M*31 + D;
  #                  delta = date_current - date_file;
  #                  "$c">=125 || ("$c"==32 && delta>12) || ("$c">32 && delta>45 && (delta<60 || delta>200))"}
  #     if $is_too_old
  #       ({'"\#~"\n\
  #          "\#@gui !<span color=\"red\">&#x2764; <b>One-click chocolate !</b></span> : _none_, fx_friends"\n\
  #          "\#@gui : note = note{\"Want to send a <b>free hot chocolate</b> to the <b>hard-working</b> developers who provide G\47MIC <b>for free</b> ?\\n"\n\
  #          "\#@gui : Just follow the link below (or copy/paste into your browser) and click <b>on the sponsored link</b> that is shown. It\47s as simple as that and"\n\
  #          "\#@gui : we\47ll drink to you :)\"}"\n\
  #          "\#@gui : url = link{\"Send a free hot chocolate to the G\47MIC developers\",\"http://gmic.eu/freechocolate.shtml\"}"\n\
  #          "\#@gui : url = link{\"http://gmic.eu/freechocolate.shtml\"}"\n\
  #          "\#@gui : note = note{\"If you\47d like to send <b>more</b> than a single hot chocolate for our efforts, you are welcome too!\"}"\n\
  #          "\#@gui : sep = separator()"\n\
  #          "\#@gui : note = note{\"<small><b>Note:</b> This filter won\47t appear anymore after you re-run the plug-in. So, don\47t miss the occasion!</small>\"}"\n\
  #       @gui/"\/   : sep = separator(), note = note(\"<small>Author: <i>David Tschumperl&#233;</i>.      Latest update: <i>06/17/2016</i>.</small>\")"\n\
  #       '})
  #       o. raw:$file_hc,uchar rm.
  #     else
  #       (35,{$c+1}) o. raw:{/$file_hc},uchar rm.
  #     fi
  #   fi
  # else # File does not exist
  #   if $ok_host (35,32) o. raw:$file_hc,uchar rm. fi
  # fi
  # if {$ok_host" && "isfile($file_hc)} ({'{/$file_hc}'}) fi

  # l[]
  #   strin="<i><a href=\"http://ow.ly/wpsV30fzhdI\">David Tschumperl&#233;</a></i>"
  #   strout="<i><a href=\"http://ow.ly/wpsV30fzhdI\">David Tschumperl&#233; / <span color=\"#FF6060\">&#x2764;&#x2764;</span></a></i>"
  #   filename=${_path_rc}update$_version.gmic
  #   i raw:$filename,uchar,32
  #   s -,10 is_marked={1,h>1} rm
  #   if $is_marked
  #     i raw:$filename,uchar
  #     replace_str "#@gmic\n##\n","#@gmic\n#\n"
  #     replace_str $strout,$strin
  #     o raw:$filename,uchar
  #   else
  #     if {u<0.2}
  #       i raw:$filename,uchar
  #       replace_str "#@gmic\n#\n","#@gmic\n##\n"
  #       replace_str $strin,$strout
  #       o raw:$filename,uchar
  #     fi
  #   fi
  #   rm
  # onfail rm
  # endl

#@gui GAAP Test : gaap_test, gaap_test
#@gui : Sigma = float(0,0,100)
#@gui : Color = color(0,0,0)
gaap_test :
  b $1
  u \{{$1+10}\}\{$2,$3,255\}

#@gui Layer info : gui_layer_info, gui_layer_info_preview
#@gui : Number of output layers for each input layer = int(1,1,5)
#@gui : note = note("<small><b>Note:</b> This filter displays layer info on each layer.</small>")
gui_layer_info :
  repeat $! l[$<] nm={n}
    animate b,0,10,$1
    nm $nm
  endl done

  repeat $! l[$>]
    0 t. "Layer indice: ""#"$>"\nLayer name: "${-gui_layer_name}"\nBlending mode: "${-gui_layer_mode}"\nOpacity : "${-gui_layer_opacity}"\nPosition: "${-gui_layer_pos},0,0,40,1,255
    to_rgba[0] expand_xy. 8,0 +dilate. 8 to_colormode[1] {0,s} j[0] [1],20,20,0,0,1,[2],255
    k[0]
  endl done

gui_layer_info_preview :
  gui_layer_info $1
  gui_preview

#@gui Graduated color accent : fx_gca, fx_gca_preview
#@gui : Reference color = color(255,255,255)
#@gui : Amplitude = float(1,0,5)
#@gui : Max value = choice("From input","From reference color","Maximum allowed")
#@gui : Channel = choice(0,"Saturation","Lightness")
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep = separator(), note = note("<small>Author: <i>David Tschumperl&#233;</i>.      Latest update: <i>2015/15/07</i>.</small>")
fx_gca :
  channel={1+$6}
  repeat $! l[$>] to_color split_opacity l[0]
    +fc $1,$2,$3
    -[1] [0] norm[1] /[1] {1e-6+iM} *[1] -1 +[1] 1 ^[1] $4
    rgb2hsl[0] s[0] c
    if {$5==0} *[$channel,-1]
    elif {$5==1} ($1^$2^$3) rgb2hsl. *[$channel] {i[$channel]} rm[-2,-1]
    else rv[$channel,-1] rm.
    fi
    a c hsl2rgb
  endl a c endl done

fx_gca_preview :
  gui_split_preview "fx_gca $*",$-1

#@gui Faded mirror : fx_faded_mirror, fx_faded_mirror(1)
#@gui : Axis = choice("x-axis","y-axis")
#@gui : Fading = float(10,0,100)
#@gui : Overlapping = float(10,0,100)
#@gui : sep = separator(), note = note("<small>Author: <i>David Tschumperl&#233;</i>.      Latest update: <i>2013/29/05</i>.</small>")
fx_faded_mirror :
  repeat $! l[$>]
    if {$1==0}  # X-axis
      100%,1,1,1,"a=1/(1-w*$2%);b=-a*(w-1);a*x+b" c. 0.01,1 *.. .
      r. 100%,.. a c r {2*w-w*$3%},100%,1,100%,0 +mirror x
    else # Y-axis
      1,100%,1,1,"a=1/(1-h*$2%);b=-a*(h-1);a*y+b" c. 0.01,1 r. ..,100% *.. .
      a c r 100%,{2*h-h*$3%},1,100%,0 +mirror y
    fi
     + s. c,-{s-1} /[-2,-1]
  endl done

#@gui Grain [old] : fx_grain, fx_grain_preview(0)
#@gui : Amplitude = float(40,0,512)
#@gui : Tone smoothness = float(5,0,15)
#@gui : Grain type = choice("Gaussian","Uniform")
#@gui : Channel(s) = choice(2,"All","RGBA","RGB","Luminance","Blue/red chrominances","Blue chrominance","Red chrominance","Lightness","ab-components","a-component","b-component","Hue","Saturation","Value","Key","Green chrominance","ch-components","c-component","h-component","Red","Green","Blue","Alpha")
#@gui : sep = separator()
#@gui : note = note("<small><b>Shadows:</b></small>")
#@gui : Strength = float(0.8,0,1)
#@gui : Scale = float(0.5,0,2)
#@gui : Channel correlation = float(0.5,0,1)
#@gui : sep = separator()
#@gui : note = note("<small><b>Mid-tones:</b></small>")
#@gui : Strength = float(1,0,1)
#@gui : Scale = float(0,0,2)
#@gui : Channel correlation = float(0.5,0,1)
#@gui : sep = separator()
#@gui : note = note("<small><b>Highlights:</b></small>")
#@gui : Strength = float(0.6,0,1)
#@gui : Scale = float(0.2,0,2)
#@gui : Channel correlation = float(0.5,0,1)
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep = separator(), note = note("<small>Author: <i>David Tschumperl&#233;</i>.      Latest update: <i>2013/21/11</i>.</small>")
fx_grain :
  repeat $! l[$>] apply_channels "_fx_grain ${1-13}",$4,0 endl done

_fx_grain :
  if {!$1} return fi
  s={s} +luminance

  # Shadows.
  if $5
    100%,100%,1,$s noise. 1,$3 b. $6 *. {(1-$7)/max(abs(im),abs(iM))}
    100%,100%,1,1 noise. 1,$3 b. $6 *. {$7/max(abs(im),abs(iM))}
    +[-2,-1] +ir[1] 0,85 b. $2 n. 0,1 *[-2,-1] *. $5
  fi

  # Midlights.
  if $8
    100%,100%,1,$s noise. 1,$3 b. $9 *. {(1-$10)/max(abs(im),abs(iM))}
    100%,100%,1,1 noise. 1,$3 b. $9 *. {$10/max(abs(im),abs(iM))}
    +[-2,-1] +ir[1] 86,169 b. $2 n. 0,1 *[-2,-1] *. $8
  fi

  # Highlights.
  if $11
    100%,100%,1,$s noise. 1,$3 b. $12 *. {(1-$13)/max(abs(im),abs(iM))}
    100%,100%,1,1 noise. 1,$3 b. $12 *. {$13/max(abs(im),abs(iM))}
    +[-2,-1] +ir[1] 170,256 b. $2 n. 0,1 *[-2,-1] *. $11
  fi

  rm[1] +[-3--1] n. -$1,$1 + c 0,255

fx_grain_preview :
  gui_split_preview "fx_grain $*",$-1

#@gui Shaded segmentation : dt_segment_shaded,dt_segment_shaded(0)
#@gui : Density = float(1,0,3)
#@gui : Shading = float(0.7,0,2)
#@gui : Smoothness = float(1,0,10)
#@gui : sep = separator(), note = note("<small>Author: <i>David Tschumperl&#233;</i>.      Latest update: <i>2013/01/02</i>.</small>")
dt_segment_shaded :
  repeat $! l[$>]
    b $3 segment_watershed $1,1
    +g xy,1 a[-2,-1] c norm. !=. 0 distance[1] 1 normalize_local. 1000
    n. 0,1 ^. {max(1e-5,$2)} n. 0,255
    blend value
  endl done

#@gui Perspective scale : fx_perspective_scale, fx_perspective_scale_preview(1)
#@gui : Iterations = int(2,2,10)
#@gui : Factor = float(75,0,100)
#@gui : X-offset = float(0,-100,100)
#@gui : Y-offset = float(0,-100,100)
#@gui : Output mode = _choice("Single layer","Multiple layers")
#@gui : sep = separator(), note = note("<small>Author: <i>David Tschumperl&#233;</i>.      Latest update: <i>2013/08/02</i>.</small>")
fx_perspective_scale :
  repeat $! l[$<] to_rgba
    w={w} h={h}
    f=100 repeat {$1-1} f={$f*$2%} +r[0] $f%,$f%,1,4,2 done
    repeat {$!-1} l[{$>+1}]
      sx={round(($>+1)*$w*$3%/($1-1))}
      sy={round(($>+1)*$h*$4%/($1-1))}
      r $w,$h,1,4,0,0,0.5,0.5 shift. $sx,$sy,0,0,0
    endl done
    if {!$5} repeat {$!-1} blend[0,1] alpha,1,1 done fi
  endl done

fx_perspective_scale_preview :
  fx_perspective_scale ${1-4},0

#@gui Auto-adjust orientation : fx_adjust_orientation, fx_adjust_orientation(1)
#@gui : Threshold = float(5,0,100)
fx_adjust_orientation :
  repeat $!
    M={max(w,h)}
    +gradient_norm. ge. $1%                      # Compute binary contours.
    +*. '1+y' *.. '1+x' a[-2,-1] c               # Extract contours points.
    r. {w*h},2,1,1,-1 sort. +,x autocrop. 0
    /. $M +r. 1,2,1,1,2 r. .. -[-2,-1]    # Estimate main axis.
    +transpose. m*[-2,-1]
    eigen. rm.. z. 0,0
    if {i<0} *. -1 fi
    theta={180*atan2(i(0,1),i)/pi}
    rm.
    if {w>h} rotate. {-$theta},1,0,50%,50%
    else rotate. {-$theta+90},1,0,50%,50%
    fi
  mv. 0 done

#@gui Curves : fx_apply_curve, fx_apply_curve_preview
#@gui : Starting Y = int(0,0,255)
#@gui : sep = separator()
#@gui : X-coord(1) = int(-1,-1,255)
#@gui : Y-coord(1) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(2) = int(-1,-1,255)
#@gui : Y-coord(2) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(3) = int(-1,-1,255)
#@gui : Y-coord(3) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(4) = int(-1,-1,255)
#@gui : Y-coord(4) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(5) = int(-1,-1,255)
#@gui : Y-coord(5) = int(128,0,255)
#@gui : sep = separator()
#@gui : Ending Y = int(255,0,255)
#@gui : sep = separator()
#@gui : Curve smoothness = float(1,0,1)
#@gui : sep = separator(), Channel(s) = choice("All","RGBA [all]","RGB [all]","RGB [red]","RGB [green]","RGB [blue]","RGBA [alpha]","Linear RGB [all]","Linear RGB [red]","Linear RGB [green]","Linear RGB [blue]","YCbCr [luminance]","YCbCr [blue-red chrominances]","YCbCr [blue chrominance]","YCbCr [red chrominance]","YCbCr [green chrominance]","Lab [lightness]","Lab [ab-chrominances]","Lab [a-chrominance]","Lab [b-chrominance]","Lch [ch-chrominances]","Lch [c-chrominance]","Lch [h-chrominance]","HSV [hue]","HSV [saturation]","HSV [value]","HSI [intensity]","HSL [lightness]","CMYK [cyan]","CMYK [magenta]","CMYK [yellow]","CMYK [key]","YIQ [luma]","YIQ [chromas]")
#@gui : Value action = choice("None","Cut","Normalize")
#@gui : Display histogram = float(0,0,1)
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep = separator(), note = note("<small>Author: <i>David Tschumperl&#233;</i>.      Latest update: <i>2010/29/12</i>.</small>")
fx_apply_curve :
  ac "_fx_apply_curve ${1-13}",$14,$15

_fx_apply_curve :
  apply_curve $13,0,$1,\
                   ${"if {$2>=0} u $2,$3, else u \"\" fi"}\
                   ${"if {$4>=0} u $4,$5, else u \"\" fi"}\
                   ${"if {$6>=0} u $6,$7, else u \"\" fi"}\
                   ${"if {$8>=0} u $8,$9, else u \"\" fi"}\
                   ${"if {$10>=0} u $10,$11, else u \"\" fi"}\
                   255,$12

fx_apply_curve_preview :
  function1d $13,0,$1,\
                  ${"if {$2>=0} u $2,$3, else u \"\" fi"}\
                  ${"if {$4>=0} u $4,$5, else u \"\" fi"}\
                  ${"if {$6>=0} u $6,$7, else u \"\" fi"}\
                  ${"if {$8>=0} u $8,$9, else u \"\" fi"}\
                  ${"if {$10>=0} u $10,$11, else u \"\" fi"}\
                  255,$12
  mv. 0
  repeat {$!-1}
    +gui_split_preview. "fx_apply_curve $*",$-1
    100%,100% axes. 0,255,255,0,13,1,255 +dilate. 3 r.. ... j... ..,0,0,0,0,1,.,255 rm[-2,-1]
    grid. 10%,10%,0,0,0.3,0xCCCCCCCC,255
    line. 0,100%,100%,0,0.3,0xCCCCCCCC,255
    if $-2
      .,. to_gray... histogram... 256,0,255 graph. ...,3,0,0,0,1,1 -!=. 0 *. 255 rm...
      +xor[-2,-1] j... .,0,0,0,0,$16,..,255 rm[-2,-1]
     else rm.. fi
     100%,100% graph. [0],1,0,255,0,1,255 +dilate. 3 r.. ... j... ..,0,0,0,0,1,.,255 rm[-2,-1]
     _fx_apply_curve_preview 0,$1,0 _fx_apply_curve_preview $2,$3,1
     _fx_apply_curve_preview $4,$5,2 _fx_apply_curve_preview $6,$7,3
     _fx_apply_curve_preview $8,$9,4 _fx_apply_curve_preview $10,$11,5
     _fx_apply_curve_preview 255,$12,6
  mv. 1 done rm[0]

_fx_apply_curve_preview :
  if {$1>=0}
    x={$1*100/255}% y={100-$2*100/255}%
    ellipse. $x,$y,3,3,0,1,0xFFFFFFFF,0,0,0 ellipse. $x,$y,2,2,0,1,0,255,0
    t. $3,$x,{$y*h-20},13,1,255
  fi

#@gui Curves [RGB]
#@gui Red : fx_apply_RGBcurve, fx_apply_Rcurve_preview
#@gui : Starting Y = int(0,0,255)
#@gui : sep = separator()
#@gui : X-coord(1) = int(-1,-1,255)
#@gui : Y-coord(1) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(2) = int(-1,-1,255)
#@gui : Y-coord(2) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(3) = int(-1,-1,255)
#@gui : Y-coord(3) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(4) = int(-1,-1,255)
#@gui : Y-coord(4) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(5) = int(-1,-1,255)
#@gui : Y-coord(5) = int(128,0,255)
#@gui : sep = separator()
#@gui : Ending Y = int(255,0,255)
#@gui : sep = separator()
#@gui : Curve smoothness = float(1,0,1)
#@gui : Display histogram = float(0,0,100)
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep = separator(), note = note("<small>Author: <i>David Tschumperl&#233;</i>.      Latest update: <i>2010/29/12</i>.</small>")

#@gui Green : fx_apply_RGBcurve, fx_apply_Gcurve_preview
#@gui : Starting Y = int(0,0,255)
#@gui : sep = separator()
#@gui : X-coord(1) = int(-1,-1,255)
#@gui : Y-coord(1) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(2) = int(-1,-1,255)
#@gui : Y-coord(2) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(3) = int(-1,-1,255)
#@gui : Y-coord(3) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(4) = int(-1,-1,255)
#@gui : Y-coord(4) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(5) = int(-1,-1,255)
#@gui : Y-coord(5) = int(128,0,255)
#@gui : sep = separator()
#@gui : Ending Y = int(255,0,255)
#@gui : sep = separator()
#@gui : Curve smoothness = float(1,0,1)
#@gui : Display histogram = float(0,0,100)
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep = separator(), note = note("<small>Author: <i>David Tschumperl&#233;</i>.      Latest update: <i>2010/29/12</i>.</small>")

#@gui Blue : fx_apply_RGBcurve, fx_apply_Bcurve_preview
#@gui : Starting Y = int(0,0,255)
#@gui : sep = separator()
#@gui : X-coord(1) = int(-1,-1,255)
#@gui : Y-coord(1) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(2) = int(-1,-1,255)
#@gui : Y-coord(2) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(3) = int(-1,-1,255)
#@gui : Y-coord(3) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(4) = int(-1,-1,255)
#@gui : Y-coord(4) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(5) = int(-1,-1,255)
#@gui : Y-coord(5) = int(128,0,255)
#@gui : sep = separator()
#@gui : Ending Y = int(255,0,255)
#@gui : sep = separator()
#@gui : Curve smoothness = float(1,0,1)
#@gui : Display histogram = float(0,0,100)
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep = separator(), note = note("<small>Author: <i>David Tschumperl&#233;</i>.      Latest update: <i>2010/29/12</i>.</small>")
#@gui _
fx_apply_RGBcurve : skip $1
  fx_apply_RGBcurve_configfile
  repeat {$!-1} l[$>,-1]
    to_colormode[0] {max(3,s)}
    sh[0] 0 _fx_apply_RGBcurve. {-2,@0-12} rm.
    sh[0] 1 _fx_apply_RGBcurve. {-2,@13-25} rm.
    sh[0] 2 _fx_apply_RGBcurve. {-2,@26-38} rm.
  endl done
  rm.

_fx_apply_RGBcurve :
  apply_curve $13,0,$1,\
                   ${"if {$2>=0} u $2,$3, else u \"\" fi"}\
                   ${"if {$4>=0} u $4,$5, else u \"\" fi"}\
                   ${"if {$6>=0} u $6,$7, else u \"\" fi"}\
                   ${"if {$8>=0} u $8,$9, else u \"\" fi"}\
                   ${"if {$10>=0} u $10,$11, else u \"\" fi"}\
                   255,$12
  c 0,255

fx_apply_Rcurve_preview :
  fx_apply_RGBcurve_configfile
  sh. 0,0,0,0 f. ${1--3} rm.
  fx_apply_RGBcurve_preview[^-1] {^},0,${-2,-1} rm.

fx_apply_Gcurve_preview :
  fx_apply_RGBcurve_configfile
  sh. 1,1,0,0 f. ${1--3} rm.
  fx_apply_RGBcurve_preview[^-1] {^},1,${-2,-1} rm.

fx_apply_Bcurve_preview :
  fx_apply_RGBcurve_configfile
  sh. 2,2,0,0 f. ${1--3} rm.
  fx_apply_RGBcurve_preview[^-1] {^},2,${-2,-1} rm.

fx_apply_RGBcurve_configfile :
  filename=${-path_tmp}.gmic_RGBcurve.dlm
  if $filename $filename else (0,-1,128,-1,128,-1,128,-1,128,-1,128,255,1) r. 100%,3 fi

fx_apply_RGBcurve_preview :
  (${1--3}) r. 13,3,1,1,-1 o. ${-path_tmp}.gmic_RGBcurve.dlm rm.
  function1d $13,0,$1,\
                  ${"if {$2>=0} u $2,$3, else u \"\" fi"}\
                  ${"if {$4>=0} u $4,$5, else u \"\" fi"}\
                  ${"if {$6>=0} u $6,$7, else u \"\" fi"}\
                  ${"if {$8>=0} u $8,$9, else u \"\" fi"}\
                  ${"if {$10>=0} u $10,$11, else u \"\" fi"}\
                  255,$12
  function1d $26,0,$14,\
                  ${"if {$15>=0} u $15,$16, else u \"\" fi"}\
                  ${"if {$17>=0} u $17,$18, else u \"\" fi"}\
                  ${"if {$19>=0} u $19,$20, else u \"\" fi"}\
                  ${"if {$21>=0} u $21,$22, else u \"\" fi"}\
                  ${"if {$23>=0} u $23,$24, else u \"\" fi"}\
                  255,$25
  function1d $39,0,$27,\
                  ${"if {$28>=0} u $28,$29, else u \"\" fi"}\
                  ${"if {$30>=0} u $30,$31, else u \"\" fi"}\
                  ${"if {$32>=0} u $32,$33, else u \"\" fi"}\
                  ${"if {$34>=0} u $34,$35, else u \"\" fi"}\
                  ${"if {$36>=0} u $36,$37, else u \"\" fi"}\
                  255,$38
  a[-3--1] y mv. 0
  repeat {$!-1}
    +gui_split_preview. "fx_apply_RGBcurve 0",$-1
    100%,100% axes. 0,255,255,0,13,1,255 +dilate. 3 r.. ... j... ..,0,0,0,0,1,.,255 rm[-2,-1]
    grid. 10%,10%,0,0,0.3,0xCCCCCCCC,255
    line. 0,100%,100%,0,0.3,0xCCCCCCCC,255
     if $-2
        .,.,1,1,-{$-2*255/100} to_gray... histogram... 256,0,255 graph. ...,3,0,0,0,1,0
        rm... +. {$-2*255/100} +[-2,-1] c. 0,255
     else rm.. fi
     line. 0,100%,100%,0,0.3,0xCCCCCCCC,255
     sh[0] 0,0,0,0
     graph.. .,1,0,255,0,1,255,128,128 -. 1
     graph.. .,1,0,255,0,0.5,200,0,0 rm.
     sh[0] 1,1,0,0
     graph.. .,1,0,255,0,1,128,255,128 -. 1
     graph.. .,1,0,255,0,0.5,0,200,0 rm.
     sh[0] 2,2,0,0
     graph.. .,1,0,255,0,1,128,128,255 -. 1
     graph.. .,1,0,255,0,0.5,0,0,200 rm.
     if {$40==0}
       _fx_apply_curve_preview 0,$1,0 _fx_apply_curve_preview $2,$3,1
       _fx_apply_curve_preview $4,$5,2 _fx_apply_curve_preview $6,$7,3
       _fx_apply_curve_preview $8,$9,4 _fx_apply_curve_preview $10,$11,5
       _fx_apply_curve_preview 255,$12,6
     elif {$40==1}
       _fx_apply_curve_preview 0,$14,0 _fx_apply_curve_preview $15,$16,1
       _fx_apply_curve_preview $17,$18,2 _fx_apply_curve_preview $19,$20,3
       _fx_apply_curve_preview $21,$22,4 _fx_apply_curve_preview $23,$24,5
       _fx_apply_curve_preview 255,$25,6
     else
       _fx_apply_curve_preview 0,$27,0 _fx_apply_curve_preview $28,$29,1
       _fx_apply_curve_preview $30,$31,2 _fx_apply_curve_preview $32,$33,3
       _fx_apply_curve_preview $34,$35,4 _fx_apply_curve_preview $36,$37,5
       _fx_apply_curve_preview 255,$38,6
     fi
  mv. 1 done rm[0]

#@gui Curves [YCbCr]
#@gui Luminance : fx_apply_YCbCrcurve, fx_apply_Ycurve_preview
#@gui : Starting Y = int(0,0,255)
#@gui : sep = separator()
#@gui : X-coord(1) = int(-1,-1,255)
#@gui : Y-coord(1) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(2) = int(-1,-1,255)
#@gui : Y-coord(2) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(3) = int(-1,-1,255)
#@gui : Y-coord(3) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(4) = int(-1,-1,255)
#@gui : Y-coord(4) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(5) = int(-1,-1,255)
#@gui : Y-coord(5) = int(128,0,255)
#@gui : sep = separator()
#@gui : Ending Y = int(255,0,255)
#@gui : sep = separator()
#@gui : Curve smoothness = float(1,0,1)
#@gui : Display histogram = float(0,0,100)
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep = separator(), note = note("<small>Author: <i>David Tschumperl&#233;</i>.      Latest update: <i>2010/29/12</i>.</small>")

#@gui Blue chrominance : fx_apply_YCbCrcurve, fx_apply_Cbcurve_preview
#@gui : Starting Y = int(0,0,255)
#@gui : sep = separator()
#@gui : X-coord(1) = int(-1,-1,255)
#@gui : Y-coord(1) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(2) = int(-1,-1,255)
#@gui : Y-coord(2) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(3) = int(-1,-1,255)
#@gui : Y-coord(3) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(4) = int(-1,-1,255)
#@gui : Y-coord(4) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(5) = int(-1,-1,255)
#@gui : Y-coord(5) = int(128,0,255)
#@gui : sep = separator()
#@gui : Ending Y = int(255,0,255)
#@gui : sep = separator()
#@gui : Curve smoothness = float(1,0,1)
#@gui : Display histogram = float(0,0,100)
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep = separator(), note = note("<small>Author: <i>David Tschumperl&#233;</i>.      Latest update: <i>2010/29/12</i>.</small>")

#@gui Red chrominance : fx_apply_YCbCrcurve, fx_apply_Crcurve_preview
#@gui : Starting Y = int(0,0,255)
#@gui : sep = separator()
#@gui : X-coord(1) = int(-1,-1,255)
#@gui : Y-coord(1) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(2) = int(-1,-1,255)
#@gui : Y-coord(2) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(3) = int(-1,-1,255)
#@gui : Y-coord(3) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(4) = int(-1,-1,255)
#@gui : Y-coord(4) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(5) = int(-1,-1,255)
#@gui : Y-coord(5) = int(128,0,255)
#@gui : sep = separator()
#@gui : Ending Y = int(255,0,255)
#@gui : sep = separator()
#@gui : Curve smoothness = float(1,0,1)
#@gui : Display histogram = float(0,0,100)
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep = separator(), note = note("<small>Author: <i>David Tschumperl&#233;</i>.      Latest update: <i>2010/29/12</i>.</small>")
#@gui _
fx_apply_YCbCrcurve : skip $1
  fx_apply_YCbCrcurve_configfile
  repeat {$!-1} l[$>,-1]
    to_colormode[0] {max(3,s)} sh[0] 0,2 rgb2ycbcr. rm.
    sh[0] 0 _fx_apply_YCbCrcurve. {-2,@0-12} rm.
    sh[0] 1 _fx_apply_YCbCrcurve. {-2,@13-25} rm.
    sh[0] 2 _fx_apply_YCbCrcurve. {-2,@26-38} rm.
    sh[0] 0,2 -ycbcr2rgb. rm.
  endl done
  rm.

_fx_apply_YCbCrcurve :
  apply_curve $13,0,$1,\
                   ${"if {$2>=0} u $2,$3, else u \"\" fi"}\
                   ${"if {$4>=0} u $4,$5, else u \"\" fi"}\
                   ${"if {$6>=0} u $6,$7, else u \"\" fi"}\
                   ${"if {$8>=0} u $8,$9, else u \"\" fi"}\
                   ${"if {$10>=0} u $10,$11, else u \"\" fi"}\
                   255,$12
  c 0,255

fx_apply_Ycurve_preview :
  fx_apply_YCbCrcurve_configfile
  sh. 0,0,0,0 f. ${1--3} rm.
  fx_apply_YCbCrcurve_preview[^-1] {^},0,${-2,-1} rm.

fx_apply_Cbcurve_preview :
  fx_apply_YCbCrcurve_configfile
  sh. 1,1,0,0 f. ${1--3} rm.
  fx_apply_YCbCrcurve_preview[^-1] {^},1,${-2,-1} rm.

fx_apply_Crcurve_preview :
  fx_apply_YCbCrcurve_configfile
  sh. 2,2,0,0 f. ${1--3} rm.
  fx_apply_YCbCrcurve_preview[^-1] {^},2,${-2,-1} rm.

fx_apply_YCbCrcurve_configfile :
  filename=${-path_tmp}.gmic_YCbCrcurve.dlm
  if $filename $filename else (0,-1,128,-1,128,-1,128,-1,128,-1,128,255,1) r. 100%,3 fi

fx_apply_YCbCrcurve_preview :
  (${1--3}) r. 13,3,1,1,-1 o. ${-path_tmp}.gmic_YCbCrcurve.dlm rm.
  function1d $13,0,$1,\
                  ${"if {$2>=0} u $2,$3, else u \"\" fi"}\
                  ${"if {$4>=0} u $4,$5, else u \"\" fi"}\
                  ${"if {$6>=0} u $6,$7, else u \"\" fi"}\
                  ${"if {$8>=0} u $8,$9, else u \"\" fi"}\
                  ${"if {$10>=0} u $10,$11, else u \"\" fi"}\
                  255,$12
  function1d $26,0,$14,\
                  ${"if {$15>=0} u $15,$16, else u \"\" fi"}\
                  ${"if {$17>=0} u $17,$18, else u \"\" fi"}\
                  ${"if {$19>=0} u $19,$20, else u \"\" fi"}\
                  ${"if {$21>=0} u $21,$22, else u \"\" fi"}\
                  ${"if {$23>=0} u $23,$24, else u \"\" fi"}\
                  255,$25
  function1d $39,0,$27,\
                  ${"if {$28>=0} u $28,$29, else u \"\" fi"}\
                  ${"if {$30>=0} u $30,$31, else u \"\" fi"}\
                  ${"if {$32>=0} u $32,$33, else u \"\" fi"}\
                  ${"if {$34>=0} u $34,$35, else u \"\" fi"}\
                  ${"if {$36>=0} u $36,$37, else u \"\" fi"}\
                  255,$38
  a[-3--1] y mv. 0
  repeat {$!-1}
    +gui_split_preview. "fx_apply_YCbCrcurve 0",$-1
    axes. 0,255,255,0,13,1,255
    100%,100% axes. 0,255,255,0,13,1,255 +dilate. 3 r.. ... j... ..,0,0,0,0,1,.,255 rm[-2,-1]
    grid. 10%,10%,0,0,0.3,0xCCCCCCCC,255
    line. 0,100%,100%,0,0.3,0xCCCCCCCC,255
     if $-2
        .,.,1,1,-{$-2*255/100} to_gray... histogram... 256,0,255 graph. ...,3,0,0,0,1,0
        rm... +. {$-2*255/100} +[-2,-1] c. 0,255
     else rm.. fi
     line. 0,100%,100%,0,0.3,0xCCCCCCCC,255
     sh[0] 0,0,0,0
     graph.. .,1,0,255,0,1,255,255,255 -. 1
     graph.. .,1,0,255,0,0.5,200,200,200 rm.
     sh[0] 1,1,0,0
     graph.. .,1,0,255,0,1,128,128,255 -. 1
     graph.. .,1,0,255,0,0.5,0,0,200 rm.
     sh[0] 2,2,0,0
     graph.. .,1,0,255,0,1,255,128,128 -. 1
     graph.. .,1,0,255,0,0.5,200,0,0 rm.
     if {$40==0}
       _fx_apply_curve_preview 0,$1,0 _fx_apply_curve_preview $2,$3,1
       _fx_apply_curve_preview $4,$5,2 _fx_apply_curve_preview $6,$7,3
       _fx_apply_curve_preview $8,$9,4 _fx_apply_curve_preview $10,$11,5
       _fx_apply_curve_preview 255,$12,6
     elif {$40==1}
       _fx_apply_curve_preview 0,$14,0 _fx_apply_curve_preview $15,$16,1
       _fx_apply_curve_preview $17,$18,2 _fx_apply_curve_preview $19,$20,3
       _fx_apply_curve_preview $21,$22,4 _fx_apply_curve_preview $23,$24,5
       _fx_apply_curve_preview 255,$25,6
     else
       _fx_apply_curve_preview 0,$27,0 _fx_apply_curve_preview $28,$29,1
       _fx_apply_curve_preview $30,$31,2 _fx_apply_curve_preview $32,$33,3
       _fx_apply_curve_preview $34,$35,4 _fx_apply_curve_preview $36,$37,5
       _fx_apply_curve_preview 255,$38,6
     fi
  mv. 1 done rm[0]

#@gui Curves [Lab]
#@gui Lightness : fx_apply_Labcurve, fx_apply_Lcurve_preview
#@gui : Starting Y = int(0,0,255)
#@gui : sep = separator()
#@gui : X-coord(1) = int(-1,-1,255)
#@gui : Y-coord(1) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(2) = int(-1,-1,255)
#@gui : Y-coord(2) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(3) = int(-1,-1,255)
#@gui : Y-coord(3) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(4) = int(-1,-1,255)
#@gui : Y-coord(4) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(5) = int(-1,-1,255)
#@gui : Y-coord(5) = int(128,0,255)
#@gui : sep = separator()
#@gui : Ending Y = int(255,0,255)
#@gui : sep = separator()
#@gui : Curve smoothness = float(1,0,1)
#@gui : Display histogram = float(0,0,100)
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep = separator(), note = note("<small>Author: <i>David Tschumperl&#233;</i>.      Latest update: <i>2010/29/12</i>.</small>")

#@gui A-color : fx_apply_Labcurve, fx_apply_acurve_preview
#@gui : Starting Y = int(0,0,255)
#@gui : sep = separator()
#@gui : X-coord(1) = int(-1,-1,255)
#@gui : Y-coord(1) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(2) = int(-1,-1,255)
#@gui : Y-coord(2) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(3) = int(-1,-1,255)
#@gui : Y-coord(3) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(4) = int(-1,-1,255)
#@gui : Y-coord(4) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(5) = int(-1,-1,255)
#@gui : Y-coord(5) = int(128,0,255)
#@gui : sep = separator()
#@gui : Ending Y = int(255,0,255)
#@gui : sep = separator()
#@gui : Curve smoothness = float(1,0,1)
#@gui : Display histogram = float(0,0,100)
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep = separator(), note = note("<small>Author: <i>David Tschumperl&#233;</i>.      Latest update: <i>2010/29/12</i>.</small>")

#@gui B-color : fx_apply_Labcurve, fx_apply_bcurve_preview
#@gui : Starting Y = int(0,0,255)
#@gui : sep = separator()
#@gui : X-coord(1) = int(-1,-1,255)
#@gui : Y-coord(1) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(2) = int(-1,-1,255)
#@gui : Y-coord(2) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(3) = int(-1,-1,255)
#@gui : Y-coord(3) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(4) = int(-1,-1,255)
#@gui : Y-coord(4) = int(128,0,255)
#@gui : sep = separator()
#@gui : X-coord(5) = int(-1,-1,255)
#@gui : Y-coord(5) = int(128,0,255)
#@gui : sep = separator()
#@gui : Ending Y = int(255,0,255)
#@gui : sep = separator()
#@gui : Curve smoothness = float(1,0,1)
#@gui : Display histogram = float(0,0,100)
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep = separator(), note = note("<small>Author: <i>David Tschumperl&#233;</i>.      Latest update: <i>2010/29/12</i>.</small>")
#@gui _
fx_apply_Labcurve : skip $1
  fx_apply_Labcurve_configfile
  repeat {$!-1} l[$>,-1]
    to_colormode[0] {max(3,s)} sh[0] 0,2 rgb2lab. rm.
    sh[0] 0 *. 2.55 _fx_apply_Labcurve. {-2,@0-12} /. 2.55 rm.
    sh[0] 1 +. 86 *. 1.38587 _fx_apply_Labcurve. {-2,@13-25} /. 1.38587 -. 86 rm.
    sh[0] 2 +. 108 *. 1.25616 _fx_apply_Labcurve. {-2,@26-38} /. 1.25616 -. 108 rm.
    sh[0] 0,2 lab2rgb. rm.
  endl done
  rm.

_fx_apply_Labcurve :
  apply_curve $13,0,$1,\
                   ${"if {$2>=0} u $2,$3, else u \"\" fi"}\
                   ${"if {$4>=0} u $4,$5, else u \"\" fi"}\
                   ${"if {$6>=0} u $6,$7, else u \"\" fi"}\
                   ${"if {$8>=0} u $8,$9, else u \"\" fi"}\
                   ${"if {$10>=0} u $10,$11, else u \"\" fi"}\
                   255,$12
  c 0,255

fx_apply_Lcurve_preview :
  fx_apply_Labcurve_configfile
  sh. 0,0,0,0 f. ${1--3} rm.
  fx_apply_Labcurve_preview[^-1] {^},0,${-2,-1} rm.

fx_apply_acurve_preview :
  fx_apply_Labcurve_configfile
  sh. 1,1,0,0 f. ${1--3} rm.
  fx_apply_Labcurve_preview[^-1] {^},1,${-2,-1} rm.

fx_apply_bcurve_preview :
  fx_apply_Labcurve_configfile
  sh. 2,2,0,0 f. ${1--3} rm.
  fx_apply_Labcurve_preview[^-1] {^},2,${-2,-1} rm.

fx_apply_Labcurve_configfile :
  filename=${-path_tmp}.gmic_Labcurve.dlm
  if $filename $filename else (0,-1,128,-1,128,-1,128,-1,128,-1,128,255,1) r. 100%,3 fi

fx_apply_Labcurve_preview :
  (${1--3}) r. 13,3,1,1,-1 o. ${-path_tmp}.gmic_Labcurve.dlm rm.
  function1d $13,0,$1,\
                  ${"if {$2>=0} u $2,$3, else u \"\" fi"}\
                  ${"if {$4>=0} u $4,$5, else u \"\" fi"}\
                  ${"if {$6>=0} u $6,$7, else u \"\" fi"}\
                  ${"if {$8>=0} u $8,$9, else u \"\" fi"}\
                  ${"if {$10>=0} u $10,$11, else u \"\" fi"}\
                  255,$12
  function1d $26,0,$14,\
                  ${"if {$15>=0} u $15,$16, else u \"\" fi"}\
                  ${"if {$17>=0} u $17,$18, else u \"\" fi"}\
                  ${"if {$19>=0} u $19,$20, else u \"\" fi"}\
                  ${"if {$21>=0} u $21,$22, else u \"\" fi"}\
                  ${"if {$23>=0} u $23,$24, else u \"\" fi"}\
                  255,$25
  function1d $39,0,$27,\
                  ${"if {$28>=0} u $28,$29, else u \"\" fi"}\
                  ${"if {$30>=0} u $30,$31, else u \"\" fi"}\
                  ${"if {$32>=0} u $32,$33, else u \"\" fi"}\
                  ${"if {$34>=0} u $34,$35, else u \"\" fi"}\
                  ${"if {$36>=0} u $36,$37, else u \"\" fi"}\
                  255,$38
  a[-3--1] y mv. 0
  repeat {$!-1}
    +gui_split_preview. "fx_apply_Labcurve 0",$-1
    axes. 0,255,255,0,13,1,255
    100%,100% axes. 0,255,255,0,13,1,255 +dilate. 3 r.. ... j... ..,0,0,0,0,1,.,255 rm[-2,-1]
    grid. 10%,10%,0,0,0.3,0xCCCCCCCC,255
    line. 0,100%,100%,0,0.3,0xCCCCCCCC,255
     if $-2
        .,.,1,1,-{$-2*255/100} to_gray... histogram... 256,0,255 graph. ...,3,0,0,0,1,0
        rm... +. {$-2*255/100} +[-2,-1] c. 0,255
     else rm.. fi
     line. 0,100%,100%,0,0.3,0xCCCCCCCC,255
     sh[0] 0,0,0,0
     graph.. .,1,0,255,0,1,255,255,255 -. 1
     graph.. .,1,0,255,0,0.5,200,200,200 rm.
     sh[0] 1,1,0,0
     graph.. .,1,0,255,0,1,255,128,128 -. 1
     graph.. .,1,0,255,0,0.5,200,0,0 rm.
     sh[0] 2,2,0,0
     graph.. .,1,0,255,0,1,128,128,255 -. 1
     graph.. .,1,0,255,0,0.5,0,0,200 rm.
     if {$40==0}
       _fx_apply_curve_preview 0,$1,0 _fx_apply_curve_preview $2,$3,1
       _fx_apply_curve_preview $4,$5,2 _fx_apply_curve_preview $6,$7,3
       _fx_apply_curve_preview $8,$9,4 _fx_apply_curve_preview $10,$11,5
       _fx_apply_curve_preview 255,$12,6
     elif {$40==1}
       _fx_apply_curve_preview 0,$14,0 _fx_apply_curve_preview $15,$16,1
       _fx_apply_curve_preview $17,$18,2 _fx_apply_curve_preview $19,$20,3
       _fx_apply_curve_preview $21,$22,4 _fx_apply_curve_preview $23,$24,5
       _fx_apply_curve_preview 255,$25,6
     else
       _fx_apply_curve_preview 0,$27,0 _fx_apply_curve_preview $28,$29,1
       _fx_apply_curve_preview $30,$31,2 _fx_apply_curve_preview $32,$33,3
       _fx_apply_curve_preview $34,$35,4 _fx_apply_curve_preview $36,$37,5
       _fx_apply_curve_preview 255,$38,6
     fi
  mv. 1 done rm[0]


cracks_old : skip ${1=0.2},${2=40},${3=0}
  e[^-1] "Add random cracks to image$?, with density $1."
  v - repeat $! l[$>]
    ({im},{iM}) ..,..,1,1 noise. $1,2 ==. 1 distance. 1 sharpen. 10000
    if $3 g. xy +[-2,-1] n. -1,1 else n. 0,1 fi
    *. $2 +[-3,-1] c.. {^} rm.
  endl done v +

fx_cracks_old :
  ac "-cracks_old $1,$2,$3",$4

negative :
  e[^-1] "Compute negative of image$?."
  v - repeat $! l[$>] - {iM} endl done * -1 v +

transfer_colors : skip ${2=0}
  e[^-1] "Transfer colors of image $1 to image$?."
  v - pass$1 0 mv. 0 to_rgb[0] to_colormode[^0] {max(3,${-max_s})} c 0,255   # Convert all images to RGB[A]
  repeat $! l[$>] split_opacity rgb2ycbcr[0] a c endl done                   # Perform RGB[A] to YCbCr[A] conversion.
  l[0] s c histogram_cumul 256,1,0,255 a c * 255 endl                        # Compute channel-by-channel cumulative histogram of target image.
  repeat {$!-1} l[0,{$<+1}]
    if $2 repeat 3 sh[0,1] $> equalize. 256,0,255 index. ..,0,0 rm[-2,-1] done     # Transfer brightness + colors.
    else repeat 2 sh[0,1] {$>+1} equalize. 256,0,255 index. ..,0,0 rm[-2,-1] done  # Transfer colors only.
    fi
  endl done rm[0]
  repeat $! l[$>] split_opacity ycbcr2rgb[0] a c endl done    # Perform YCbCr[A] to RGB[A] conversion.
  c 0,255
  v +

_transfer_colors :  # Check transfer_colors performance.
  repeat $! l[$>] rgb2ycbcr s c histogram 256,0,255 a c -dg 300,200 endl done

patchmatch : skip ${3=$2},${4=1},${5=5},${6=5},${7=0}
  pass$1
  matchpatch[^-1] .,${2-6},0,${7--1}
  rm.

matchpatch : skip ${3=$2},${4=1},${5=5},${6=5},${7=0},${8=0}
  pass$1
  patchmatch[^-1] .,${2-6},${8--1}
  rm.

#@gui ____<b>Artistic</b>
#--------------------------

#@gui Stylize : fx_stylize,fx_stylize_preview
#@gui : Style = choice{0,"Custom Style (Top Layer)","Custom Style (Bottom Layer)",
#@gui : "Braque: Landscape near Antwerp",
#@gui : "Braque: Le Viaduc &agrave; l'Estaque",
#@gui : "Braque: Little Bay at La Ciotat",
#@gui : "Braque: The Mandola",
#@gui : "Delaunay: Windows Open Simultaneously",
#@gui : "Hokusai: The Great Wave",
#@gui : "Kandinsky: Squares with Concentric Circles",
#@gui : "Kandinsky: Yellow-Red-Blue",
#@gui : "Klee: Death and Fire",
#@gui : "Klee: In the Style of Kairouan",
#@gui : "Klee: Oriental Pleasure Garden Anagoria",
#@gui : "Klee: Polyphony 2",
#@gui : "Klee: Red waistcoat",
#@gui : "Klimt: The Kiss",
#@gui : "Mondrian: Composition in Red-Yellow-Blue",
#@gui : "Mondrian: Evening; Red Tree",
#@gui : "Mondrian: Gray Tree",
#@gui : "Monet: San Giorgio Maggiore at Dusk",
#@gui : "Monet: Water-Lily Pond",
#@gui : "Monet: Wheatstacks - End of Summer",
#@gui : "Munch: The Scream",
#@gui : "Picabia: Udnie",
#@gui : "Picasso: Les Demoiselles d'Avignon",
#@gui : "Picasso: Seated Woman",
#@gui : "Picasso: The Reservoir - Horta de Ebro",
#@gui : "Pollock: Convergence",
#@gui : "Pollock: Summertime Number 9A",
#@gui : "Van Gogh; Almond Blossom",
#@gui : "Van Gogh; Irises",
#@gui : "Van Gogh: The Starry Night",
#@gui : "Van Gogh: Wheat Field with Crows"}
#@gui : Scale Style to Fit Target Resolution = choice(4,"No rescaling","30%","50%","75%","100%","150%","200%","250%","300%")
#@gui : Style variations = choice("None","All XY-flips","All 90&deg; rotations","All 45&deg; rotations")
#@gui : Preview Progression While Running = bool(1)
#@gui : sep = separator(), note = note{"<small><b><span color="red">Important note:</span></b>\n\n
#@gui : This filter tries to transfer colors and textures from a style image, to given input layers (a.k.a. target images). Please be aware of the following, before using this filter:\n
#@gui : \n&nbsp;&nbsp; - This filter is still in <b>alpha stage</b>. Use it at your own risk!
#@gui : \n&nbsp;&nbsp; - The transfer algorithm is <b>computationally demanding</b>, and use all available CPU cores.
#@gui : \n&nbsp;&nbsp; - For this reason, <b>no filter preview</b> can be calculated and displayed in a reasonable time.
#@gui : \n&nbsp;&nbsp; - This is also a good reason for testing the filter first on relatively small images (e.g. <i>resolution&lt;1024</i>).
#@gui : \n&nbsp;&nbsp; - The quality of the result depends on how both target and style images may match...
#@gui : \n&nbsp;&nbsp; - ..so sometimes, the filter just renders crap. Don't be surprised.
#@gui : </small>"}
#@gui : sep = separator(), note = note{"<small><b><span color="blue">Style/Target Parameters:</span></b></small>"}
#@gui : Fidelity to target (finest) = float(0.5,0,5)
#@gui : Fidelity to target (coarsest) = float(2,0,5)
#@gui : Fidelity smoothness (finest) = float(3,0,5)
#@gui : Fidelity smoothness (coarsest) = float(0.5,0,5)
#@gui : Fidelity chromaticity = float(0.1,0,1)
#@gui : sep = separator(), note = note{"<small><b><span color="blue">Image Matching Parameters:</span></b></small>"}
#@gui : Match Colors with = choice(2,"Nothing","Gamma Balance","Histogram Transfer")
#@gui : Colorspace = choice{5,"sRGB","Linear RGB","YCbCr","YCbCr (Luma Only)","YCbCr (Chroma Only)","Lab","Lab (Luma Only)","Lab (Chroma Only)"}
#@gui : Keep Color Channels = choice{"All","Luminance Only (YCbCr)","Luminance Only (Lab)","Chrominances Only (CbCr)","Chrominances Only (ab)"}
#@gui : Smoothness = float(0.7,0,5)
#@gui : Also match gradients = float(0.25,0,1)
#@gui : sep = separator(), note = note{"<small><b><span color="blue">Advanced Parameters:</span></b></small>"}
#@gui : Init. type = choice("Best Match","Identity","Randomized")
#@gui : Init. resolution = choice(1,"8px","16px","32px","64px","128px","256px")
#@gui : Init. with high gradients only = float(0,0,100)
#@gui : Patch size for analysis = int(5,2,16)
#@gui : Patch size for synthesis = int(5,2,16)
#@gui : Patch size for synthesis (final) = int(7,2,16)
#@gui : Number of matches (finest) = int(1,0,10)
#@gui : Number of matches (coarsest) = int(30,0,100)
#@gui : Penalize patch repetitions = int(1000,0,2000)
#@gui : Matching precision (smaller is faster) = float(2,0,5)
#@gui : Skip finest scales = int(0,0,3)
#@gui : sep = separator(), note = note("<small>Author: <i>David Tschumperl&#233;</i>.      Latest Update: <i>2018/12/04</i>.</small>")
fx_stylize : l[] if {!narg($$stylize)} _fx_stylize_ fi onfail endl
  init_resolution={arg(1+$16,8,16,32,64,128,256)}

  # Define image matching function
  colorspace=${"arg 1+$11,all,lrgb,ycbcr,ycbcr_y,ycbcr_cbcr,lab,lab_l,lab_ab"}
  match_colors="s c,-3 mv[1] 3 b[-2,-1] 1% negate[-2,-1] n[-2,-1] {1-$14},1"
  if {$10==1} match_colors=$match_colors" ac[0,1] \"balance_gamma ,\","$colorspace
  elif {$10==2} match_colors=$match_colors" transfer_histogram[0] [1],256,"$colorspace
  fi
  if {$12==1} match_colors=$match_colors" rgb2ycbcr[0,1] channels[0,1] 0"
  elif {$12==2} match_colors=$match_colors" srgb2lab[0,1] channels[0,1] 0"
  elif {$12==3} match_colors=$match_colors" rgb2ycbcr[0,1] channels[0,1] 1,2"
  elif {$12==4} match_colors=$match_colors" srgb2lab[0,1] channels[0,1] 1,2"
  fi
  match_colors=$match_colors" b[0,1] xy,$13 repeat 2 l[$>] s c n 0,255 a c endl done *[0,-2] *[1,-1]"

  # Insert style image at the end of the list.
  if {$1<2} # Custom style (top or bottom layer)
    if {$!<2} error "At least two layers are required in this mode." fi
    ind_first={$1==0?1:0} ind_style={$1==0?0:-1} N={$!-1} sh[$ind_style]
  else
    ind_first=0 N=$! ind_style= _fx_stylize {$1-2}
  fi

  # Process layers.
  is_window=0
  repeat $N l[{$ind_first+$>},-1] nm={0,n}
    if $2 +rr2d[1] {0,[w,h]*arg($2,0.33,0.5,0.75,1,1.5,2,2.5,3)},1,2 fi
    if {$3==1} . +mirror. x +mirror[-2,-1] y a[-4--1] z
    elif {$3==2} +l. r {u={max(w,h)};[u,u]},1,100%,0,3,0.5,0.5 repeat 3 +rotate[0] {90*$>},1,3,50%,50% done a z endl
    elif {$3==3} +l. r {u={max(w,h)};[u,u]},1,100%,0,3,0.5,0.5 repeat 7 +rotate[0] {45*$>},1,3,50%,50% done a z endl
    fi
    if $4 wsiz=${"fitscreen "{0,[w,h]}} w[0] $wsiz is_window={*} fi
    stylize[0] .,${5-9},$15,$init_resolution,${17-25},$match_colors
    k[0,1] nm[0] $nm0
    if {$is_window" && "!{*}} break fi
  endl done
  rm. # Remove style image
  if {0$_output_mode}
    if {narg($ind_style)} rm[$ind_style] fi # Do not duplicate style layer if output mode -> new layers
    if {$is_window" && "!{*}} rm fi # In case user closed the window, does not output new layers.
  fi


fx_stylize_preview :
  if {$1<2} # Custom style (top or bottom layer)
    if {$!<2} gui_warning_preview "At least two layers are required when specifying a custom style." return fi
    ind_first={$1==0?1:0} ind_style={$1==0?0:-1} N={$!-1} sh[$ind_style]
  else
    ind_first=0 N=$! ind_style= _fx_stylize {$1-2}
  fi
  repeat $N l[{$ind_first+$>},-1]
    gui_no_preview[0] ,
    +rr2d[1] {0,[w,h]*2/3},0,2 frame. 1,1,255 frame. 1,1,0,0,0,255 j[0] .,1%,30 rm. to[0] "Style:",1%,0,24
  endl done rm.
  if {narg($ind_style)} rm[$ind_style] fi

_fx_stylize : # Download pre-defined style image
  if {isval($1)}
    name=${"arg 1+$1,landscapenearantwerp,leviaducalestaque,littlebayatlaciotat,themandola,windowsopensimultaneously,\
      greatwave,squareswithconcentriccircles,yellowredblue,deathandfire,inthestyleofkairouan,orientalpleasuregardenanagoria,\
      polyphony2,redwaistcoat,thekiss,\
      compositionredyellowblue,redtree,graytree,sangiorgiomaggioreatdusk,waterlilypond,\
      wheatstacksendofsummer,scream,udnie,lesdemoisellesdavignon,seatedwoman,reservoirhortadeebro,convergence,summertime9a,\
      almondblossom,irises,starrynight,wheatfieldwithcrows"}
  else name="$1"
  fi
  filename=${_path_rc}style_$name.png
  if $filename $filename
  else i https://gmic.eu/img/style_$name.png o. $filename
  fi

_fx_stylize_ :
  m _b:base642img\ $""1 m _r:run\ \{t\}\ rm _b  _r. uncommand _b,_r
