#@gmic
#
#  File        : reptorian.gmic
#                ( G'MIC commands file )
#
#  Description : The author of these filter generally recreate filters that exists in one or few softwares to break through the software barrier. No reverse engineering has been applied without permission.
#
#  Copyright   : Reptorian
#                ( https://discuss.pixls.us/u/reptorian/summary )
#
#  License     : CeCILL v2.0
#                ( http://cecill.info/licences/Licence_CeCILL_V2-en.html )
#
#  This software is governed by the CeCILL  license under French law and
#  abiding by the rules of distribution of free software.  You can  use,
#  modify and/ or redistribute the software under the terms of the CeCILL
#  license as circulated by CEA, CNRS and INRIA at the following URL
#  "http://cecill.info".
#
#  As a counterpart to the access to the source code and  rights to copy,
#  modify and redistribute granted by the license, users are provided only
#  with a limited warranty  and the software's author,  the holder of the
#  economic rights,  and the successive licensors  have only  limited
#  liability.
#
#  In this respect, the user's attention is drawn to the risks associated
#  with loading,  using,  modifying and/or developing or reproducing the
#  software by the user in light of its specific status of free software,
#  that may mean  that it is complicated to manipulate,  and  that  also
#  therefore means  that it is reserved for developers  and  experienced
#  professionals having in-depth computer knowledge. Users are therefore
#  encouraged to load and test the software's suitability as regards their
#  requirements in conditions enabling the security of their systems and/or
#  data to be ensured and,  more generally, to use and operate it in the
#  same conditions as regards security.
#
#  The fact that you are presently reading this means that you have had
#  knowledge of the CeCILL license and that you accept its terms.
#

#-------------------------------
#
#@cli :: Reptorian's CLI Commands
#
#-------------------------------

#@cli rep_lerp_rgb_gray: eq. to rep_linear_interpolation_rgb_gray : (+)
rep_lerp_rgb_gray: rep_linear_interpolation_rgb_gray $*
#@cli rep_linear_interpolation_rgb_gray: 0%>=_red_factor(%)<=100%,0%>=_green_factor(%)<=100%,0%>=_blue_factor(%)<=100%,_gray_mode={ 0=luminosity | 1=luminosity_alternative | 2=lightness | 3=minimum_channel | 4=maximum_channel | 5=average } : 0%>=_red_factor(%)<=100%,0%>=_green_factor(%)<=100%,0%>=_blue_factor(%)<=100%,_red_weight,green_weight,blue_weight
rep_linear_interpolation_rgb_gray:
skip ${4=0},${5=},${6=}
total_arg=0
if isnum($1) total_arg+=1 fi
if isnum($2) total_arg+=1 fi
if isnum($3) total_arg+=1 fi
if isnum($4) total_arg+=1 fi
if isnum($5) total_arg+=1 fi
if isnum($6) total_arg+=1 fi
if $total_arg==5 error "narg!=5=F" fi

if $1>1||$1<0 error ""$"1>=0||<="$"1<=1" fi
if $2>1||$2<0 error ""$"2>=0||<="$"2<=1" fi
if $3>1||$3<0 error ""$"3>=0||<="$"3<=1" fi

f "
begin(
    rlvl=abs($1);
    glvl=abs($2);
    blvl=abs($3);
        
    if(narg($*)>5,
        tw=abs($4)+abs($5)+abs($6);
        c1f=abs($4)/tw;
        c2f=abs($5)/tw;
        c3f=abs($6)/tw;
        graymode(a,b,c)=a*c1f+b*c2f+c*c3f;
    ,        
        if($4==0,graymode(a,b,c)=a*0.22248840+b*0.71690369+c*0.06060791;,
        if($4==1,graymode(a,b,c)=a*0.2989+b*0.5870+c*0.1140;,
        if($4==2,graymode(a,b,c)=(max(a,b,c)+min(a,b,c))/2;,
        if($4==3,graymode(a,b,c)=min(a,b,c);,
        if($4==4,graymode(a,b,c)=max(a,b,c);,
                 graymode(a,b,c)=avg(a,b,c);
        );
        );
        );
        );
        );
    );
);
gl=graymode(i0,i1,i2);
[lerp(gl,i0,rlvl),lerp(gl,i1,glvl),lerp(gl,i2,blvl)]
"
#@cli rgb2ohta8
#@cli : Convert color representation of selected images from RGB to Ohta8. 
#@cli : Source: https://hbfs.wordpress.com/2018/04/24/ohta-colorspaces-iii/#more-6335
#@cli : $ image.jpg rgb2ohta split c
rgb2ohta8:
e[^-1] "Convert color representation of image$? from RGB to Ohta8."
f [avg(i0,i1,i2),(i0-i2+255)/2,(-i0+i1-i2+255)/3]
#@cli ohta82rgb
#@cli : Convert color representation of selected images from Ohta8 to RGB. 
#@cli : Source: https://hbfs.wordpress.com/2018/04/24/ohta-colorspaces-iii/#more-6335
#@cli : $ image.jpg ohta82rgb split c
ohta82rgb:
e[^-1] "Convert color representation of image$? from Ohta8 to RGB."
f c0=i0*3;c1=i1*2-255;c2=i2*3-255;[.25*c0+.5*c1-.25*c2,.5*c0+.5*c2,.25*c0-.5*c1-.25*c2]
#@cli rgb2ohta
#@cli : Convert color representation of selected images from RGB to Ohta. 
#@cli : Source: https://hbfs.wordpress.com/2018/04/24/ohta-colorspaces-iii/#more-6335
#@cli : $ image.jpg rgb2ohta split c
rgb2ohta:
e[^-1] "Convert color representation of image$? from RGB to Ohta."
f [i0+i1+i2,i0-i2,-i0+i1-i2]
#@cli ohta2rgb
#@cli : Convert color representation of selected images from Ohta to RGB. 
#@cli : Source: https://hbfs.wordpress.com/2018/04/24/ohta-colorspaces-iii/#more-6335
#@cli : $ image.jpg ohta2rgb split c
ohta2rgb:
e[^-1] "Convert color representation of image$? from Ohta to RGB."
f [.25*i0+.5*i1-.25*i2,.5*i0+.5*i2,.25*i0-.5*i1-.25*i2]
#@cli rgb2ydbdr
#@cli : Convert color representation of selected images from RGB to YDbDr. 
#@cli : Source: https://hbfs.wordpress.com/2018/05/15/ydbdr-colorspaces-vi/#more-6355
#@cli : $ image.jpg rgb2ydbdr split c
rgb2ydbdr:
e[^-1] "Convert color representation of image$? from RGB to YDbDr."
f [.299*i0+.587*i1+.114*i2,-.45*i0-.883*i1+1.333*i2,1.333*i0-1.109*i1-.217*i2]
#@cli rgb2ydbdr
#@cli : Convert color representation of selected images from YDbDr to RGB. 
#@cli : Source: https://hbfs.wordpress.com/2018/05/15/ydbdr-colorspaces-vi/#more-6355
#@cli : $ image.jpg rgb2ydbdr split c
ydbdr2rgb:
e[^-1] "Convert color representation of image$? from YDbDr to RGB."
f [1*i0+.525*i2,1*i0-.129*i1-.268*i2,1*i0+.665*i1]
#@cli rgb2k1
#@cli : Convert color representation of selected images from RGB to Kodak 1. 
#@cli : Source: https://hbfs.wordpress.com/2018/04/10/kodak-1-colorspaces-i/
#@cli : $ image.jpg rgb2k1 split c
rgb2k1:
e[^-1] "Convert color representation of image$? from RGB to Kodak 1."
f begin(third=1/3;);r=third*i0;g=third*i1;b=third*i2;[r+g+b,b-r-g,r-g-b]
#@cli k12rgb
#@cli : Convert color representation of selected images from Kodak 1 to RGB. 
#@cli : Source: https://hbfs.wordpress.com/2018/04/10/kodak-1-colorspaces-i/
#@cli : $ image.jpg k12rgb split c
k12rgb:
e[^-1] "Convert color representation of image$? from Kodak 1 to RGB."
f [1.5*i0+1.5*i2,-1.5*i1-1.5*i2,1.5*i0+1.5*i1];
#@cli rgb2k18
#@cli : Convert color representation of selected images from RGB to Kodak 1 in 8I. 
#@cli : Source: https://hbfs.wordpress.com/2018/04/10/kodak-1-colorspaces-i/
#@cli : $ image.jpg rgb2k18 split c
rgb2k18:
e[^-1] "Convert color representation of image$? from RGB to Kodak 1 - 8I."
f begin(third=1/3;);r=third*i0;g=third*i1;b=third*i2;[r+g+b,(b-r-g)+170,(r-g-b)+170]
#@cli k182rgb
#@cli : Convert color representation of selected images from Kodak 1 in 8I to RGB. 
#@cli : Source: https://hbfs.wordpress.com/2018/04/10/kodak-1-colorspaces-i/
#@cli : $ image.jpg k182rgb split c
k182rgb:
e[^-1] "Convert color representation of image$? from Kodak 1 - 8I to RGB."
f c1=i1-170;c2=i2-170;[1.5*i0+1.5*c2,-1.5*c1-1.5*c2,1.5*i0+1.5*c1];
#@cli rgb2yes
#@cli : Convert color representation of selected images from RGB to YES. 
#@cli : Source: Xerox Color Encoding Standard, (tech rep?) XNSS 289005 (1989?) ; https://hbfs.wordpress.com/2018/05/01/xerox-yes-colorspaces-iv/
#@cli : $ image.jpg rgb2yes split c
rgb2yes:
e[^-1] "Convert color representation of image$? from RGB to YES."
f [.253*i0+.684*i1+.063*i2,.5*i0-.5*i1,.25*i0+.25*i1-.5*i2]
#@cli yes2rgb
#@cli : Convert color representation of selected images from RGB to YES. 
#@cli : Source: Xerox Color Encoding Standard, (tech rep?) XNSS 289005 (1989?) ; https://hbfs.wordpress.com/2018/05/01/xerox-yes-colorspaces-iv/
#@cli : $ image.jpg yes2rgb split c
yes2rgb:
e[^-1] "Convert color representation of image$? from YES to RGB."
f [i0+1.431*i1+.126*i2,i0-.569*i1+.126*i2,i0+.431*i1-1.874*i2]
#@cli rgb2yes8
#@cli : Convert color representation of selected images from RGB to Yes8. 
#@cli : Source: Xerox Color Encoding Standard, (tech rep?) XNSS 289005 (1989?) ; https://hbfs.wordpress.com/2018/05/01/xerox-yes-colorspaces-iv/
#@cli : $ image.jpg rgb2yes8 split c
rgb2yes8:
e[^-1] "Convert color representation of image$? from RGB to Yes8."
f [.253*i0+.684*i1+.063*i2,(.5*i0-.5*i1)+127.5,(.25*i0+.25*i1-.5*i2)+127.5]
#@cli yes82rgb
#@cli : Convert color representation of selected images from Yes8 to RGB. 
#@cli : Source: Xerox Color Encoding Standard, (tech rep?) XNSS 289005 (1989?) ; https://hbfs.wordpress.com/2018/05/01/xerox-yes-colorspaces-iv/
#@cli : $ image.jpg yes82rgb split c
yes82rgb:
e[^-1] "Convert color representation of image$? from Yes8 to RGB."
f [i0+1.431*(i1-127.5)+.126*(i2-127.5),i0-.569*(i1-127.5)+.126*(i2-127.5),i0+.431*(i1-127.5)-1.874*(i2-127.5)]
#@cli rep_rbtt: eq. to 'rep_rotate_by_torus_top' : (+)
rep_rbtt: rep_rotate_by_torus_top $*
#@cli rep_rotate_by_torus_top: 0<=_torus_circu_min_dimension_percent_1(%)<=100,0<=_torus_circu_min_dimension_percent_2(%)<=100,_distort_ang,_mode_1={ 0=softmode | 1=midmode | 2=hardmode | 3=hardmode_alt | 4=distroymode | 5=invdistroymode | 6=quadextrudemode | 7=hexextrudemode },_mode_2={ 0=softmode | 1=midmode | 2=hardmode | 3=hardmode_alt | 4=distroymode | 5=invdistroymode | 6=quadextrudemode | 7=hexextrudemode },0<=_mode_percent_comb(%)<=100,_offx(%),_offy(%),_off_dup={ 0=no_duplicate_dist | 1=duplicate_dist },_bgremove={ 0=keep_background | 1=remove_background },_cent_isolat_torus_mode={ 0=do_not_center | 1=center },_interpolation={ 0=nearest | 1=linear },_boundary={ 0=none | 1=neumann | 2=periodic | 3=mirror }
#@cli : Inspired by the Donut Distortion plugin made by MadJik for Paint.NET, this version of donut distortion adds new features such as more modes, mode blending, isolated torus mode.
#@cli : (eq. to 'rep_rbtt')\n
#@cli : _torus_circu_min_dimension_percent_1 refers to the primary circumference of circle relative to the minimum image dimension.
#@cli : _torus_circu_min_dimension_percent_2 refers to the secondary circumference of circle relative to the minimum image dimension.
#@cli : _distort_ang refers to the maximum angle of distortion.
#@cli : _mode_1 refers to the first mode of donut distortion.
#@cli : _mode_1 refers to the second mode of donut distortion.
#@cli : _mode_percent_comb refers to the weighed average of combination of modes. This only works if and only if _mode_1 and _mode_2 are specified!
#@cli : _offx refers to the offset of donut distortion relative to the center in -1,1 x-coordinates. 100% means the center will be located in 1.
#@cli : _offy refers to the offset of donut distortion relative to the center in -1,1 y-coordinates. 100% means the center will be located in 1.
#@cli : _off_dup option defines whether distortion will wrap around when it reach out of bound.
#@cli : _bgremove defines whether the background is removed.
#@cli : _cent_isolat_torus_mode is a special mode used to aid into creating torus from image. This only works if _bgremove is active.
#@cli : _interpolation defines the smoothness of the image.
#@cli : _boundary defines how out-of-range values are wrapped as.
#@cli : Default values: '_torus_circu_min_dimension_percent_1=1','_torus_circu_min_dimension_percent_2=.5','_distort_ang=45','_mode_1=0','_mode_2=','_mode_percent_comb=50%','_offx=0%','_offy=0%','_off_dup=1','_bgremove=0','_cent_isolat_torus_mode=0','_interpolation=1','_boundary=2'
rep_rotate_by_torus_top:
skip ${1=1},${2=0},${3=45},${4=0},${5=},${6=.5},${7=0},${8=0},${9=1},${10=1},${11=0}${12=1},${13=2}

if {$1==$2} error ""$"1!="$"2=F" fi
if ($1>1||$1<0)||($2>1||$2<0) error "(0>="$"1<=1)||(0>="$"2<=1)=F" fi
if $4<0||$4>7 error "0<="$"4<=7=F" fi
if narg($5) if $5<0||$5>7 error "0<="$"5<=7=F" fi fi
if $6<0||$6>1 error "0<="$"6<=1=f" fi

if $12>0 r2dx 200%,1 fi
f "
begin(
    boundary=0;
    
    const s_id=s-1;
    
    sd=max(w,h)/min(w,h);
    sx=w>h?sd:1;
    sy=w>h?1:sd;
    
    ww=w-1;
    hh=h-1;
    cx=ww/2;
    cy=hh/2;
    offx=cx*$7*-1;
    offy=cy*$8;
    eps=10^-10;
    
    vallim_x(v)=v-ww*floor(v/(ww+eps));
    vallim_y(v)=v-hh*floor(v/(hh+eps));
    
    if($9,
        start_x(v)=vallim_x(v+offx);
        start_y(v)=vallim_y(v+offy);
    ,
        start_x(v)=v+offx;
        start_y(v)=v+offy;
    );
    
    torus_val_1=$1;
    torus_val_2=$2;
    new_min=min(torus_val_1,torus_val_2);
    new_max=max(torus_val_1,torus_val_2);
    nm(v)=(v-new_min)*(1/(new_max-new_min));
    limcut(v)=v>1?1:(v<0?0:v);
    bndcut(v)=v>1||v<0?0:1;
    
    maxang=$3*-1;
    ang2rad(v)=pi*(v/180);
    rot_x(a,b,c)=a*cos(ang2rad(c))-b*sin(ang2rad(c));
    rot_y(a,b,c)=a*sin(ang2rad(c))+b*cos(ang2rad(c));
    
    sur_x(v)=(v/ww-.5)*2*sx;
    sur_y(v)=(v/hh-.5)*2*sy;
    unsur_x(v)=(v/(2*sx)+.5)*ww;
    unsur_y(v)=(v/(2*sy)+.5)*hh;
    
    softmode(v)=(cos(v*(2*pi)-pi)+1)/2;
    midmode(v)=abs(cos(v*pi+pi/2));
    hardmode(v)=sqrt(1-(abs(v-.5)*2)^2);
    hardmode_alt(v)=(1-(abs(v-.5)*2)^2)^(1/(2+(1-v)));
    distroymode(v)=cos(v*pi)*boundary;
    invdistroymode(v)=(cos(v*pi)*-1)*boundary;
    quadextrudemode(v)=1-abs(v-.5)*2;
    hexextrudemode(v)=(r=(1-abs(v-.5)*2)*2;r>1?1:r);
    
     if($4==0,mode_1(v)=softmode(v);
    ,if($4==1,mode_1(v)=midmode(v);
    ,if($4==2,mode_1(v)=hardmode(v);
    ,if($4==3,mode_1(v)=hardmode_alt(v);
    ,if($4==4,mode_1(v)=distroymode(v);
    ,if($4==5,mode_1(v)=invdistroymode(v);
    ,if($4==6,mode_1(v)=quadextrudemode(v);
    ,if($4==7,mode_1(v)=hexextrudemode(v);
    );
    );
    );
    );
    );
    );
    );
    );
    
    if(narg($5),
    
         if($5==0,mode_2(v)=softmode(v);
        ,if($5==1,mode_2(v)=midmode(v);
        ,if($5==2,mode_2(v)=hardmode(v);
        ,if($5==3,mode_2(v)=hardmode_alt(v);
        ,if($5==4,mode_2(v)=distroymode(v);
        ,if($5==5,mode_2(v)=invdistroymode(v);
        ,if($5==6,mode_2(v)=quadextrudemode(v);
        ,if($5==7,mode_2(v)=hexextrudemode(v);
        );
        );
        );
        );
        );
        );
        );
        );
        
        if($6==0||$6==1
        ,if($6,mode(v)=mode_2(v);,mode(v)=mode_1(v););
        ,mode(v)=$6*mode_2(v)+(1-$6)*mode_1(v);
        );
    ,
        mode(v)=mode_1(v);
    );
    
    if($10&&(s==2||s>3)
        ,out(a,b)=[vectors_id(J(a,b,z,abs($12)?2:0,$13)),j(a,b,z,s_id,abs($12)?2:0,$13)*boundary]
        ,out(a,b)=J(a,b,z,abs($12)?2:0,$13);
    );
);
xx=start_x(x);
yy=start_y(y);
xx=sur_x(xx);
yy=sur_y(yy);
radial_gradient=nm(sqrt(xx^2+yy^2));
norm_gradient=limcut(radial_gradient);
boundary=bndcut(radial_gradient);
z_depth=mode(norm_gradient)*maxang;
XX=rot_x(xx,yy,z_depth);
YY=rot_y(xx,yy,z_depth);
XX=unsur_x(XX);
YY=unsur_y(YY);
xx=unsur_x(xx);
yy=unsur_y(yy);
diff_x=XX-xx;
diff_y=YY-yy;
out(diff_x,diff_y);
"

if $11&&$10
    offx={($7/2)*100*-1}
    offy={($8/2)*100}
    repeat $! l[$>]
        if s==2||s>3
            shift $offx%,$offy%,0,0,2,0
        fi
    endl done
fi

if $12>0 r2dx 50%,3 fi
#@cli rep_pxpush: eq. to 'rep_pixel_push' : (+)
rep_pxpush: rep_pixel_push $*
#@cli rep_pixel_push: -1<=_push_x<=1,-1<=_push_y<=1
#@cli : Pushes pixel relative to coordinate from the center. CLI filter is recreated from source code to TR's Pixel Push plugin for Paint.NET. Currently only Bezier option is supported until the secondary option is figured out.
#@cli : (eq. to 'rep_pxpush')\n
#@cli : Default values: '_push_x=0','_push_y=0'
rep_pixel_push:
f "begin(
ww=w-1;
hh=h-1;
cx=($1+1)/2;
cy=($2+1)/2;
if(cx>1,cx=1,if(cx<0,cx=0));
if(cy>1,cy=1,if(cy<0,cy=0));
);
spanx=x/ww;
spany=y/hh;
nx=(1-((cx*(1-spanx))*spanx+(1-spanx)*(cx*spanx+(1-spanx))))*ww;
ny=(1-((cy*(1-spany))*spany+(1-spany)*(cy*spany+(1-spany))))*hh;
i(nx,ny,z,c,2);
"
#@cli rep_pw: eq. to 'rep_point_warp' : (+)
rep_pw: rep_point_warp $*
#@cli rep_point_warp: 0%<=_pointwidth(%)<=100%,0%<=_distance(%)<=100%,0%,_radialInfluence<=100%,-1>=_distortion_center_x>=1,-1>=_distortion_center_y>=1,-360>=_distortion_angle>=360,_boundary={ 0=none | 1=neumann | 2=periodic | 3=mirror }
#@cli : Distorts image around a point. If you're using large radius, radialInfluence is not recommended to be set to 100%.
#@cli : (eq. to 'rep_pw')\n
#@cli : Default values: '_pointwidth=10%','_distance=10%','_radialInfluence=0%','_distortion_center_x=0','_distortion_center_y=0','_distortion_angle=0','_boundary=3'
rep_point_warp:
skip ${1=10},${2=10},${3=0},${4=0},${5=0},${6=0},${7=3}
f "begin(
img_hypotenuse=($2*sqrt(w^2+h^2));
radius=log2((10^(abs($3)*300))*1000)*e;
d=log(radius^($1*(.25*min(w,h))));
hw=w/2;
hh=h/2;
angle=($6/180)*pi+pi;
ox=cos(angle)*img_hypotenuse;
oy=sin(angle)*img_hypotenuse;
dx=$4*hw;
dy=$5*hh;
);
xd=x-dx;
yd=y+dy;
radinf=radius^(-(((xd-hw)/d)^2+((yd-hh)/d)^2)^2);
rx=(ox*radinf)+x;
ry=(oy*radinf)+y;
i(rx,ry,z,c,2,$7);
"
#@cli rep_rand_sqrrecfill: eq. to 'rep_random_square_rectangle_fill' : (+)
rep_rand_sqrrecfill: rep_random_square_rectangle_fill $*
#@cli rep_random_square_rectangle_fill: _palette,square_dimension>0,_rectangle_max_length_1>0,_rectangle_max_length_2>0,_erode,_output={ 0=none | 1=line },_reduce_nonrectangles={ 0=do_not_reduce_nonrectagles | 1=reduce_nonrectangles },_remove_black_from_palette={ 0=preserve | 1=remove },_seed,_colourspace,
#@cli : Create texture with aligned rectangle and squares with colors being optional.
#@cli : (eq. to 'rep_rand_sqrrecfill')
#@cli : Default values: '_palette=0','_rectangle_length_2=1','_frequency_of_rectangle=1','_erode=0','_output=1','_reduce_nonrectangles=1','_remove_black_from_palette=1','_seed=','_colourspace=6',
#@cli : Author: Reptorian.
rep_random_square_rectangle_fill:
skip ${1=0},${3=2},${4=1},${5=1},${6=0},${7=1},${8=1},${9=1},${10=},${11=0}

bool_state_pal=0
rand_pal=0

if narg($1)
    if isint($1)&&isnum($1) 
        if $1>0||$1<0 
            bool_state_pal=1
            text_mode=0
        fi
    else 
        if narg($1) 
            bool_state_pal=1 
            text_mode=1 
        fi
    fi
fi
rep_rand_sqrrectex ${2-6},{$bool_state_pal?(($1>0||$1<0)&&abs($7)?3:1):2},$8,$10
if $bool_state_pal
    if narg($10) srand $10 fi
    r. 100%,100%,100%,3
    if $text_mode 
        pal $1
    else 
        if $1<0 {iM},1,1,3,u(0,255)
              if $11==1 ryb2rgb.
            elif $11==2 hsi82rgb.
            elif $11==3 hsl82rgb.
            elif $11==4 hsv82rgb.
            elif $11==5 lab82rgb.
            elif $11==6 lch82rgb.
            elif $11==7 yiq82rgb.
            elif $11==8 yuv82rgb.
            fi
            rand_pal=1
        else pal $1
        fi
    fi
    
    if $9
        l.
            s x
            repeat $! l[$<] 
                if !{ia} rm fi 
            endl done
            a x
        endl
    fi
    
    if !$rand_pal
            {w#-1},1,1,1,u(0,1)
            pixelsort.. +,x,.
            rm.
    fi
    
    if !$7 +.. 1 fi
    f.. i0?i(#-1,i0-1,y,0,c,0,2)
    rm.
fi
#@cli rep_rand_sqrrecart: eq. to 'rep_random_square_rectangle_texture' : (+)
rep_rand_sqrrecart: rep_random_square_rectangle_artistic $*
#@cli rep_random_square_rectangle_artistic: square_dimension>0,_rectangle_max_length_1>0,_rectangle_max_length_2>0,_frequency_of_rectangle>0,_erode,_output={ 0=none | 1=line },_reduce_nonrectangles={ 0=do_not_reduce_nonrectagles | 1=reduce_nonrectangles },_distance_mode={ 0=regular_output | 1=distance_output },_seed,_output_resized={ 0=do_not_output_resized_original | 1=output_resized },_colourspace
#@cli : Create artistic rendering of image with aligned rectangle and squares.
#@cli : (eq. to 'rep_rand_sqrrecart')
#@cli : Default values: '_rectangle_max_length_1=2','_rectangle_length_2=1','_frequency_of_rectangle=1','_erode=0','_output=2','_reduce_nonrectangles=0','_seed=','_output_resized=0',_colourspace=0'
#@cli : Author: Reptorian.
rep_random_square_rectangle_artistic:
skip ${2=2},${3=1},${4=1},${5=0},${6=1},${7=1},${8=0},${9=},${10=0},${11=0}
convert_back=0
tcr=3
different_dimension=0
if $!>1
    cw={w#1}
    ch={h#1}
    iter=1
    do  
        iter-=1
        if (w#$iter!=$cw)||(h#$iter!=$ch) different_dimension=1 fi
        iter+=2
        cw={w#$iter}
        ch={h#$iter}
    while !$different_dimension&&$iter<$!
fi

if $different_dimension
    repeat $! l[$<]
        rep_rand_sqrrectex ${1-5},{$6?2:1},$7,$9
    endl done
else
    rep_rand_sqrrectex ${1-5},{$6?2:1},$7,$9
    rep_aspect_crop_2d[^-1] {w#-1},{h#-1}
    r[^.] {w#-1},{h#-1},100%,100%,2,2,.5,.5
    if $8
        +distance.. 0
        +blend[-2,-1] shapemax0
        /.. .
        rm.
        store. distance
    fi
    store. art_shape
    repeat $! l[$<]
        if (s==3||s==4)&&$11
            convert_back=1
            if $11!=2
                sh 0,2
                  if $11==1 rgb2ryb.
                elif $11==3 rgb2hcy.
                elif $11==4 rgb2hsi.
                elif $11==5 rgb2hsl.
                elif $11==6 rgb2hsv.
                elif $11==7 rgb2lab.
                elif $11==8 rgb2lch.
                elif $11==9 rgb2ycbcr.
                elif $11==10 rgb2ycbcrglic.
                elif $11==11 rgb2yiq.
                elif $11==12 rgb2yuv.
                elif $11==13 rgb2xyz.
                fi
                rm.
            else   
                  if s==3 rgb2cmyk tcr+=1
                elif s==4 s c,-3 rgb2cmyk.. a c
                fi
            fi
        fi
        
        if $10 +store output_resized fi
        
        $art_shape
    endl done
fi
#@cli rep_rand_sqrrectex: eq. to 'rep_random_square_rectangle_texture' : (+)
rep_rand_sqrrectex: rep_random_square_rectangle_texture $*
#@cli rep_random_square_rectangle_texture: square_dimension>0,_rectangle_max_length_1>0,_rectangle_max_length_2>0,_frequency_of_rectangle>0,_erode,_output={ 0=none | 1=filled_gray | 2=filled_line | 3=labeled_filled_line },_reduce_nonrectangles={ 0=do_not_reduce_nonrectagles | 1=reduce_nonrectangles },_seed
#@cli : Create a texture with aligned rectangle and squares.
#@cli : (eq. to 'rep_rand_sqrrectex')
#@cli : Note: '_reduce_nonrectangles' cannot be used to completely clear vectors of nonrectangle due to the algorithm provided, and no solution in context of vector exist as of now.
#@cli : Default values: '_rectangle_max_length=1','_rectangle_max_length=2','_frequency_of_rectangle=1','_erode=0','_output=2','_reduce_nonrectangles','_seed='
#@cli : Author: Reptorian.
#@cli : $ rep_random_square_rectangle_texture 20,3,3,2,,0
rep_random_square_rectangle_texture:
skip ${2=2},${3=1},${4=1},${5=0},${6=2},${7=1},${8=}
if narg($8) srand $8 fi
square_size=$1
rf=0

if abs($5) 
    if $5>0 square_size+={abs($5)}
    else square_size+=1
    fi
fi

if $1<2 error ""$"1>1==F" fi

mw=${-max_w}
mh=${-max_h}
nvw={ceil($mw/$square_size)}
nvh={ceil($mh/$square_size)}

$nvw,$nvh,1,1,"x+y*w"
if abs(round($2))==1&&abs(round($3))==1 error ""$"2>1||"$"3>1==F" fi

msize={sqrt(sqr(round($2)))+sqr(round(abs($3)))}

if $1<2 error ""$"2>1==F" fi

freq={int(avg(1/$msize,$4,.5)*(iM+1))}
val={iM+1}

repeat round($freq)
    orientation={round(u(0,1))}
    nsl_1={round(u(1,abs($2)))}
    nsl_2={round(u(1,abs($3)))}
    min_nsl={min($nsl_1,$nsl_2)}
    max_nsl={max($nsl_1,$nsl_2)}
    if $min_nsl==1&&$max_nsl==1 max_nsl={round(u(2,abs(max($2,$3))))} fi
    px={round(u(0,w#-1-1))}
    py={round(u(0,h#-1-1))}
    if $orientation $min_nsl,$max_nsl,1,1,$val j.. .,$px,$py rm.
    else $max_nsl,$min_nsl,1,1,$val j.. .,$px,$py rm.
    fi
    val+=1
done

label. 0,0

if $7&&($2>1&&$3>1)
if max($2,$3)>2
rf={max($2,$3)-2}
fi
repeat {2+$rf}
mirror. x
f. "
topleft   = i(x-1,y-1);
topmiddle = i(x,  y-1);
topright  = i(x+1,y-1);

middleleft  = i(x-1,y);
middle      = i;
middleright = i(x+1,y);

bottomleft    = i(x-1,y+1);
bottommiddle  = i(x,  y+1);
bottomright   = i(x+1,y+1);

F=i;

if( (  (avg(topmiddle,middleleft)==middle)
    || (avg(topmiddle,middleright)==middle)
    || (avg(bottommiddle,middleleft)==middle)
    || (avg(bottommiddle,middleright)==middle)
    )
    
    ||
    
    (  (avg(middleleft,topmiddle,middleright)==middle)
    || (avg(middleleft,bottommiddle,middleright)==middle)
    || (avg(bottommiddle,middleleft,topmiddle)==middle)
    || (avg(bottommiddle,middleright,topmiddle)==middle)
    )
    
    ||
    
    (  (avg(bottommiddle,bottomright,middleright)==middle)
    || (avg(bottommiddle,bottomleft,middleleft)==middle)
    || (avg(topmiddle,topright,middleright)==middle)
    || (avg(topmiddle,topleft,middleleft)==middle)
    )
    
    ,F*=-1;
  );

F;
"
label. 0,0
done
fi

if $6
    {$nvw*$square_size+2},{$nvh*$square_size+2},1,1,i(#-1,floor(x/$square_size),floor(y/$square_size),z,0,0,1) rm.. r. {w-1},{h-1}
    if $6>1 r2dx {(($1+1)/$1)*100}%,1 fi
    if $6>1 f. "(x!=0&&x!=w-1&&y!=0&&y!=h-1)?(i(x-1,y-1,z,c,0,1)==i(x,y))*((i(x-1,y,z,c,0,1)==i(x,y))&&(i(x,y-1,z,c,0,1)==i(x,y))):0"
        if $5 erode. {$5<0?(abs($5)>$1?$1:abs($5)):abs($5)} expand_xy. {int(abs($5)/2)},1 if !($5%2) r. {w-1},{h-1} fi fi
    fi
    if $6>2 label_fg. 0,0 fi
    if $6<2 r. {w-1},{h-1} fi
fi
#@cli rep_gradf: eq. to 'rep_graduated_filter' : (+)
rep_gradf: rep_graduated_filter $*
#@cli rep_graduated_filter: 0<strength<=1,0<=_lumastrength<=1,0<=_placement<=1,-360<=_ang<=360,_gradiated_colorspace= { 0=RGB | 1=HSV | 2=YUV },_color1,_color2,_color3
#@cli : Apply graduated filter on the YUV color space.
#@gui : (eq. to 'rep_gradf')
#@gui : Default values: '_lumastrength=0','_offset=0','_ang=0','_gradiated_colorspace=0','_color1=0','_color2=0','_color3=0'
rep_graduated_filter:
skip ${2=1},${3=.5},${4=0},${5=0},${6=0},${7=0},${8=0},${9=0}
rgb2yuv
if $5==2 ($6^$7^$8)
elif $5==1 ($6^$7^$8) hsv2rgb. rgb2yuv.
else ($6^$7^$8) rgb2yuv. 
fi
f[^-1] "begin(
    ss=h>w?w:h; #Pick shortside as basis for gradient#
    ang=pi*((180-$4)/180); #Convert Angle to radians#
    rot_y(a,b)=a*sin(ang)+b*cos(ang); #Rotate Function#
    mm_val(a)=a>1?1:(a<0?0:a); #Cut values to 0,1 range#
    offset=$3;
    offset-=.5;
);
pos_x=[mm_val((rot_y(x-w/2,y-h/2)/ss)+offset)];
Sub_YUV=[(1-i(#-1,0,0,z,0))*pos_x[0]*$2,i(#-1,0,0,z,1)*pos_x[0]*-1,i(#-1,0,0,z,2)*pos_x[0]*-1,0];
I-Sub_YUV*$1; #*.5 is strength#
"
yuv2rgb[^-1] rm.
#@cli rep_mj_newf: eq. to 'rep_madjik_newton_fractal' : (+)
rep_mj_newf:rep_madjik_newton_fractal $*
#@cli rep_madjik_newton_fractal: _zoom>0,_xpan,_ypan,_colrange>0,_factor_a,_factor_b,_factor_c,_factor_d,_expf>0,_depth>0,_bgfreq>0,-360<=_colang<360,_alternate_colfunc={ 0=Regular | 1=Alternate },_symmetry={ 0=Regular | 1=Symmetrical },_alternate_channels
#@cli : Near direct conversion of MadJik's Newton Fractal Paint.NET plugin. This is a early beta filter. Unlike Paint.NET version, every variables are float-based except for last two.
#@cli : (eq. to 'rep_mj_newf')
#@cli : Default values: '_zoom=16','_xpan=0','_ypan=0','_colrange=128','_factor_a=9','_factor_b=0','_factor_c=75','_factor_d=5','_expf=10','_depth=50','_bgfreq=50','_colang=45','_alternate_colfunc=0','_symmetry=0'
rep_madjik_newton_fractal:
skip ${1=16},${2=0},${3=0},${4=128},${5=9},${6=0},${7=75},${8=5},${9=10},${10=50},${11=50},${12=45},${13=0},${14=0},${15=0}
repeat $! l[$>]
ww={w}
hh={h}
r {max(w,h)*2},{max(w,h)*2},1,3
f "
begin(
    zoom=$1/100;
    fvar_b=8/9+$6/1000;
    fvar_c=$7/10;
    fvar_d=$8/10;
    afc=fvar_c*$5;
    afd=afc*fvar_d;
    bgfreq=$11/100;
    ang=$12/180*pi;
    fexp=10^-$9;
    funcb(w,t)=128+$4*sin(($15?(2-c)/2:c/2)*pi+(bgfreq*(ang+t+w*pi/180)));
    func(w,t)=128+$4*sin(($15?(2-c)/2:c/2)*pi+(bgfreq*(ang+(t+w)*pi/180)));
);
ex=sqr((x-w/2)-$2/100);
ey=sqr((y-h/2)-$3/100);
ix=(x-w/2)*100/(zoom*w)-$2/100;
iy=(y-h/2)*100/(zoom*h)-$3/100;
for(k=1,k<$10,k++,
    ix_2=ix*ix;
    ix_3=ix_2*ix;
    ix_4=ix_3*ix;
    ix_5=ix_4*ix;
    ix_6=ix_5*ix;
    ix_7=ix_6*ix;
    ix_8=ix_7*ix;
    iy_2=iy*iy;
    iy_3=iy_2*iy;
    iy_4=iy_3*iy;
    iy_5=iy_4*iy;
    iy_6=iy_5*iy;
    iy_7=iy_6*iy;
    iy_8=iy_7*iy;
    endval=(ix_2+iy_2)/2;
    for(m=0,m<3,m++,endval*=endval;);    
    ny=fvar_b*iy-($5*ix_7*iy-afc*ix_5*iy_3+afc*ix_3*iy_5-$5*ix*iy_7)/endval;
    nx=fvar_b*ix+(ix_8-afd*ix_6*iy_2+2.5*afd*ix_4*iy_4-afd*ix_2*iy_6+iy_8)/endval;
    if((abs(nx-ix)<fexp)&&(abs(ny-iy)<fexp),break());
    ix=nx;
    iy=ny;
);
v=k;
if($14,
    jx=(w-x-w/2)*100/(zoom*w)-$2/100;
    jy=(h-y-h/2)*100/(zoom*h)-$3/100;
    for(k=1,k<$10,k++,
            jx_2=jx*jx;
            jx_3=jx_2*jx;
            jx_4=jx_3*jx;
            jx_5=jx_4*jx;
            jx_6=jx_5*jx;
            jx_7=jx_6*jx;
            jx_8=jx_7*jx;
            jy_2=jy*jy;
            jy_3=jy_2*jy;
            jy_4=jy_3*jy;
            jy_5=jy_4*jy;
            jy_6=jy_5*jy;
            jy_7=jy_6*jy;
            jy_8=jy_7*jy;
            endval=(jx_2+jy_2)/2;
            for(m=0,m<3,m++,endval*=endval;);    
            ny=fvar_b*jy-($5*jx_7*jy-afc*jx_5*jy_3+afc*jx_3*jy_5-$5*jx*jy_7)/endval;
            nx=fvar_b*jx+(jx_8-afd*jx_6*jy_2+2.5*afd*jx_4*jy_4-afd*jx_2*jy_6+jy_8)/endval;
            if((abs(nx-jx)<fexp)&&(abs(ny-jy)<fexp),break());
            jx=nx;
            jy=ny;
        );
        v+=k;
        v/=2;
);
$13?func(sqrt(ex+ey),v):funcb(sqrt(ex+ey),v);
"
r {$ww*2},{$hh*2},100%,100%,0,0,.5,.5
r2dx 50%,3
endl done
#@cli rep_major: eq. to 'rep_majority' : (+)
rep_major:rep_majority $*
#@cli rep_majority: kernel_size>1,_mode={ 0=soft_regular | 1=soft_average_channels | 2=hard_regular | 3=hard_average_channels },_colourspace,_alpha
#@cli : Calculate whether to erode or dilate pixels using average.
#@cli : (eq. to 'rep_major_t').\n
#@cli : Custom Colour Space values can be specified with negative number for $3\n
#@cli : Primary Source: https://web.archive.org/web/20080214191501/http://interstices.info/display.jsp?id=c_27035
#@cli : Secondary Source: https://forums.getpaint.net/topic/3978-majority-color-effect-ymd100726/\n
#@cli : Default values: '_mode=0','_colourspace=0','_alpha=0'
rep_majority:
skip ${2=0},${3=0},${4=0}
if ($3>=0&&$3<=4)||($3==13||$3==14) colour="0,255"
elif $3>=5||$3<=8                   colour="0,360,0,1,0,1"
elif $3==9                          colour="0,100,-100,100,-100,100"
elif $3==10                         colour="0,100,0,100,-pi,pi"
elif $3==11                         colour="0,255,-100,100,-100,100"
elif $3==12                         colour="0,1,-1,1,-1,1"
elif $3==15                         colour="0,1,0,1,0,1"
elif $3==16                         colour="0,255,-127.5,127.5,-127.5,127.5"
elif $3==17                         colour="0,255,-170,85,-170,85"
elif $3==18                         colour="0,765,-255,255,-510,255"
elif $colour<0                      colour=${5--1}
fi
tcr=3
mergeback=0
repeat $! l[$>]
    ss={s}
    if (s==3||s==4)&&$3
        convert_back=1
        if $3!=4
            sh 0,2
            if $3==1 rgb2srgb.
            elif $3==2 rgb2ryb.
            elif $3==3 rgb2cmy.
            elif $3==5 rgb2hcy.
            elif $3==6 rgb2hsi.
            elif $3==7 rgb2hsl.
            elif $3==8 rgb2hsv.
            elif $3==9 rgb2lab.
            elif $3==10 rgb2lch.
            elif $3==11 rgb2yiq.
            elif $3==12 rgb2yuv.
            elif $3==13 rgb2ycbcr.
            elif $3==14 rgb2ycbcrglic.
            elif $3==15 rgb2xyz.
            elif $3==16 rgb2yes.
            elif $3==17 rgb2k1.
            elif $3==18 rgb2ohta.
            fi
            rm.
        else
            if s==3 rgb2cmyk tcr+=1
            elif s==4 s c,-3 rgb2cmyk.. a c
            fi
        fi
    fi
    
    if $4&&(s>$tcr||s==2) s c,-{s-1} mergeback=1 fi
    
    l[0]
        +boxfilter[0] $1
        if $2==1||$2==3 compose_channels. add /. $ss fi
        +erode[0] $1
        +dilate[0] $1
        if $2==3   f[0] "begin(const ts=s*2;if("$4",mm=vectorts("$colour",0,255);,mm=vectorts("$colour");););i<i0#1?mm[c*2]:mm[c*2+1];"
        elif $2==2 f[0] "begin(const ts=s*2;if("$4",mm=vectorts("$colour",0,255);,mm=vectorts("$colour");););i<i#1?mm[c*2]:mm[c*2+1];"
        elif $2==1 f[0] i<i0#1?i#2:i#3
        else     f[0] i<i#1?i#2:i#3 
        fi
        k[0]
    endl
    
    if $mergeback a c fi
    
    if $convert_back
        if $3!=4
            sh 0,2
            if $3==1 srgb2rgb.
            elif $3==2 ryb2rgb.
            elif $3==3 cmy2rgb.
            elif $3==5 hcy2rgb.
            elif $3==6 hsi2rgb.
            elif $3==7 hsl2rgb.
            elif $3==8 hsv2rgb.
            elif $3==9 lab2rgb.
            elif $3==10 lch2rgb.
            elif $3==11 yiq2rgb.
            elif $3==12 yuv2rgb.
            elif $3==13 ycbcr2rgb.
            elif $3==14 ycbcrglic2rgb.
            elif $3==15 xyz2rgb.
            elif $3==16 yes2rgb.
            elif $3==17 k12rgb.
            elif $3==18 ohta2rgb.
            fi
            rm.
        else
            if s==4 cmyk2rgb tcr-=1
            elif s==5 s c,-4 cmyk2rgb.. a c
            fi
        fi
    fi
endl done
#@cli rep_major_t: eq. to 'rep_majority_threshold' : (+)
rep_major_t:rep_majority_threshold $*
#@cli rep_majority_threshold: kernel_size>=2,0<=tolerance[%]<=100,_booldir={ 0=less_than | 1=greater_than },_alpha,_mode={ 0=soft | 1=hard },_colorspace
#@cli : Calculate whether to erode or dilate based on specified threshold.
#@cli : (eq. to 'rep_major_t').\n
#@cli : Custom Colour Space values can be specified with negative number for $6\n
#@cli : Primary Source: https://web.archive.org/web/20080214191501/http://interstices.info/display.jsp?id=c_27035
#@cli : Secondary Source: https://forums.getpaint.net/topic/3978-majority-color-effect-ymd100726/\n
#@cli : Default values: '_booldir=0','_mode=1','_alpha','_colourspace',
rep_majority_threshold:
skip ${3=0},${4=1},${5=0},${6=0}
remove_image=0

if $1<2 error ""$1">2==F" fi
if ($5>=0&&$5<=4)||($5==13||$5==14) colour="0,255"
elif $5>=5||$5<=8                   colour="0,360,0,1,0,1"
elif $5==9                          colour="0,100,-100,100,-100,100"
elif $5==10                         colour="0,100,0,100,-pi,pi"
elif $5==11                         colour="0,255,-100,100,-100,100"
elif $5==12                         colour="0,1,-1,1,-1,1"
elif $5==15                         colour="0,1,0,1,0,1"
elif $5==16                         colour="0,255,-127.5,127.5,-127.5,127.5"
elif $5==16                         colour="0,255,-127.5,127.5,-127.5,127.5"
elif $5==17                         colour="0,255,-170,85,-170,85"
elif $5==18                         colour="0,765,-255,255,-510,255"
elif $5<0                           colour=${7--1}
fi

if $5<0 if $#<6 error ""$#">6==F" fi fi

tcr=3

repeat $! l[$>]
if (s==3||s==4)&&$5
    convert_back=1
    if $5!=4
        sh 0,2
        if $5==1 rgb2srgb.
        elif $5==2 rgb2ryb.
        elif $5==3 rgb2cmy.
        elif $5==5 rgb2hcy.
        elif $5==6 rgb2hsi.
        elif $5==7 rgb2hsl.
        elif $5==8 rgb2hsv.
        elif $5==9 rgb2lab.
        elif $5==10 rgb2lch.
        elif $5==11 rgb2yiq.
        elif $5==12 rgb2yuv.
        elif $5==13 rgb2ycbcr.
        elif $5==14 rgb2ycbcrglic.
        elif $5==15 rgb2xyz.
        elif $5==16 rgb2yes.
        elif $5==17 rgb2k1.
        elif $5==18 rgb2ohta.
        fi
        rm.
    else
        if s==3 rgb2cmyk tcr+=1
        elif s==4 s c,-3 rgb2cmyk.. a c
        fi
    fi
fi

if !$6&&(s>$tcr||s==2) sh. 0,{s-2} remove_image=1 fi

f. "
begin(
    const dc=($1-1)/2;
    const kern=dc*2+1;
    const ts=s*2;
    NEW_COL=vectors(0);
    if($6,mm=vectorts("$colour",0,255);
         ,mm=vectorts("$colour");
    );
    skip=1;
);
for(ss=0,ss<s,ss++,
    N=crop(x-dc,y-dc,0,ss,kern,kern,1,1,1);
    min_val=min(mm[ss*2],mm[ss*2+1]);
    max_val=max(mm[ss*2],mm[ss*2+1]);
    tolerance=$2*(max_val-min_val)+min_val;
    if(skip,
        if($3,
                if($4
                ,calc_newcol()=i(x,y,z,ss)<tolerance?min_val:max_val;
                ,calc_newcol()=i(x,y,z,ss)<tolerance?min(N):max(N);
                );
            ,
                if($4
                ,calc_newcol()=i(x,y,z,ss)>tolerance?min_val:max_val;
                ,calc_newcol()=i(x,y,z,ss)>tolerance?min(N):max(N);
                );
        );
        skip--;
    );
    NEW_COL[ss]=calc_newcol();
);

NEW_COL;

end(if(!skip,
        if($3,
                if($4
                ,calc_newcol()=i(x,y,z,ss)<tolerance?min_val:max_val;
                ,calc_newcol()=i(x,y,z,ss)<tolerance?min(N):max(N);
                );
            ,
                if($4
                ,calc_newcol()=i(x,y,z,ss)>tolerance?min_val:max_val;
                ,calc_newcol()=i(x,y,z,ss)>tolerance?min(N):max(N);
                );
            );
        );
    );
"

if $remove_image rm. fi

if $convert_back
    if $5!=4
        sh 0,2
        if $5==1 srgb2rgb.
        elif $5==2 ryb2rgb.
        elif $5==3 cmy2rgb.
        elif $5==5 hcy2rgb.
        elif $5==6 hsi2rgb.
        elif $5==7 hsl2rgb.
        elif $5==8 hsv2rgb.
        elif $5==9 lab2rgb.
        elif $5==10 lch2rgb.
        elif $5==11 yiq2rgb.
        elif $5==12 yuv2rgb.
        elif $5==13 ycbcr2rgb.
        elif $5==14 ycbcrglic2rgb.
        elif $5==15 xyz2rgb.
        elif $5==16 yes2rgb.
        elif $5==17 k12rgb.
        elif $5==18 ohta2rgb.
        fi
        rm.
    else
        if s==4 cmyk2rgb tcr-=1
        elif s==5 s c,-4 cmyk2rgb.. a c
        fi
    fi
fi
endl done
#@cli rep_pstrk: eq. to 'rep_perspective_streak' : (+)
rep_pstrk: rep_perspective_streak $*
#@cli rep_perspective_streak: -1<=_xpos<=1,-1<=_ypos<=1,-1<=_alpha_exponential_factor,0<_distance_threshold<=1,0<_distance_start<=1,_direction={ 0=in | 1=out },_streak_mode={ 0=color | 1=gray | 2=binary | 3=gray+binary },_preserve_edges={ 0=do_not_preserve_edges | 1=preserve_edges }
#@cli : Create perspective streak effect. _preserve_details only is applicable on non-binary mode.
#@cli : (eq. to 'rep_pstrk').\n
#@cli : Default values: '_xpos=0','_ypos=0','_alpha_exponential_factor=1','_distance_threshold=1','_distance_start=0','_direction=0','_streak_mode=0','_preserve_edges=1'
rep_perspective_streak:
skip ${1=0},${2=0},${3=0},${4=1},${5=0},${6=0},${7=0},${8=1}
point={[$1,$2]}
if !$4 error "$4|"$"4>0" fi
repeat $! l[$>]
    if s!=3
        echo "Applying perspective streak at coordinate point $point!"
        if h>w orientation=1
        else orientation=0
        fi
        if s>1
            sh. 0,{s-2}
            +channels.. {s#0-1}
            f. i==0?1:0
            inpaint_pde.. .
            rm[-2,-1]
        fi
        rep_recpoltrans $point,-3
            if $5>0&&$5<1 f begin(sy=1/(((1-$5)*h)/h););i(x,y*sy,z,c,2); fi
            if $7||s==1
                channels {s-1}
                if $8 
                    if $7==3||$7==1 . n. 0,1 l. +f 1 rv a c endl store. details
                    else echo "Details cannot be preserved using binary mode!"
                    fi
                fi
                rep_axis_streak 1,!$6,$3
                if $4>0&&$4<1
                    f i>(1-$4)?i:(1-$4)
                    n 0,1
                fi
                if $7==2 f i>0?1:0 
                elif $7==3 +f i>0?1:0 a c fi
                if $8
                    if $7==3||$7==1
                        $details
                        s. c,-{s-1}
                        j[-3] [-2],0,0,0,0,1,[-1],1
                        rm[-2,-1]
                    fi
                fi
            else
                if $8 +store details fi
                if $4>0&&$4<1 
                    +channels {s-1} 
                    rep_axis_streak. 1,!$6,$3
                    f. i>(1-$4)?i:(1-$4)
                    f. i>im#-1?1:0
                fi
                rep_axis_streak[0] 1,!$6,$3
                if $4>0&&$4<1
                    sh[0] {s#0-1}
                    f. i0#-2*i
                    k[0]
                fi
                if $8
                    $details
                    s. c,-{s-1}
                    j[-3] [-2],0,0,0,0,1,[-1],{iM#-1}
                    rm[-2,-1]
                fi
            fi
        rep_recpoltrans $point,2,$orientation
    else echo "Not applicable to images with 3 channels!"
    fi
endl done
#@cli rep_axis_streak: orientation,direction,_alpha_exponential_factor
#@cli : Streaks pixels based on distance away from center and placement of visible objects.
#@cli : '_alpha_exponential_factor' is used to manipulate the alpha mixing within pixels. The more power that is assigned to the alpha, the less mixing there would be. 
rep_axis_streak:
skip ${3=0}
repeat $! l[$>]
    if s==2||s>3 rep_axis_streak_color ${1-3}
    elif s==1 rep_axis_streak_distance ${1-3}
    fi
endl done
#@cli rep_axis_streak_distance: orientation,direction,_alpha_exponential_factor
#@cli : Extract the alpha, then streaks pixels based on distance away from center and placement of visible objects.
#@cli : '_alpha_exponential_factor' is used to manipulate the alpha mixing within pixels. The more power that is assigned to the alpha, the less mixing there would be. 
rep_axis_streak_distance:
skip ${3=0}
repeat $! l[$>]
        channels {s-1}
        alp={iM}
        / $alp
        if $3<=-1 exp_f=-{1-10^-8} else exp_f=$3 fi
        f i^(1+$exp_f)
        eval ${-math_lib}"
            const hh=h-1;
            const ww=w-1;
            orientation=$1;
            direction=$2;
            if(orientation
               ,if(direction
                        ,for(xx=0,xx<=ww,xx++,break=0;
                                for(yy=hh,yy>=0,yy--,
                                    if(!break,if(i(xx,yy),break=1));if(break==1,z_level=hh;break+=1;alp=i(xx,yy));if(break==2,alp=alp+(1-alp)*i(xx,yy);z_level=yy*i(xx,yy)+(1-i(xx,yy))*z_level;if(yy,i(xx,yy)=(yy/z_level)*alp;););
                                );
                            );
                        ,for(xx=0,xx<=ww,xx++,break=0;
                                for(yy=0,yy<=hh,yy++,
                                    if(!break,if(i(xx,yy),break=1));if(break==1,z_level=hh;break+=1;alp=i(xx,yy));if(break==2,alp=alp+(1-alp)*i(xx,yy);z_level=(hh-yy)*i(xx,yy)+(1-i(xx,yy))*z_level;if(hh-yy,i(xx,yy)=((hh-yy)/z_level)*alp;););
                                );
                            );
                    );
               ,if(direction
                        ,for(yy=0,yy<=hh,yy++,break=0;
                                for(xx=0,xx<=ww,xx++,
                                    if(!break,if(i(xx,yy),break=1));if(break==1,z_level=ww;break+=1;alp=i(xx,yy));if(break==2,alp=alp+(1-alp)*i(xx,yy);z_level=(ww-xx)*i(xx,yy)+(1-i(xx,yy))*z_level;if(ww-xx,i(xx,yy)=((ww-xx)/z_level)*alp;););
                                );
                            );
                        ,for(yy=0,yy<=hh,yy++,break=0;
                                for(xx=ww,xx>=0,xx--,
                                    if(!break,if(i(xx,yy),break=1));if(break==1,z_level=ww;break+=1;alp=i(xx,yy));if(break==2,alp=alp+(1-alp)*i(xx,yy);z_level=xx*i(xx,yy)+(1-i(xx,yy))*z_level;if(xx,i(xx,yy)=(xx/z_level)*alp;););
                                );
                            );
                    );
               );
    "
endl done
#@cli rep_axis_streak_color: orientation,direction,_alpha_exponential_factor
#@cli : Streaks colored pixels taking into account of opacity.
#@cli : '_alpha_exponential_factor' is used to manipulate the alpha mixing within pixels. The more power that is assigned to the alpha, the less mixing there would be. 
rep_axis_streak_color:
skip ${3=0}
repeat $! l[$>]
    vv=0
    repeat s#0
        sh[0] $>
        tvv={iv#-1}
        vv+=$tvv
        rm.
    done
    if $vv
        sh 0,{s-2}
        sh.. {s}
        f.. i(#-1,x,y,z,0)==0?0:i
        alp={iM#-1}
        /. $alp
        f. i^(1+abs($3))
        
        eval ${-math_lib}"
            const hh=h-1;
            const ww=w-1;
            orientation=$1;
            direction=$2;
            if(orientation
                ,if(direction
                        ,for(xx=0,xx<=ww,xx++,
                                for(yy=hh,yy>=0,yy--,
                                    if(yy==hh,col=I(#-2,xx,yy);alp=i(#-1,xx,yy);
                                        ,newcol=I(#-2,xx,yy);newalp=i(#-1,xx,yy);if(newalp==0,I(#-2,xx,yy)=col;i(#-1,xx,yy)=alp;,
                                                                                    if(newalp==1,col=I(#-2,xx,yy);alp=i(#-1,xx,yy);
                                                                                    ,if(newalp!=alp,if(newcol!=col,I(#-2,xx,yy)=newcol*newalp+(1-newalp)*col;i(#-1,xx,yy)=alp+newalp*(1-alp);col=I(#-2,xx,yy);alp=i(#-1,xx,yy);
                                                                                                    ,i(#-1,xx,yy)=alp+newalp*(1-alp);col=I(#-2,xx,yy);alp=i(#-1,xx,yy););
                                                                                        ,if(newcol!=col,I(#-2,xx,yy)=newcol*newalp+(1-newalp)*col;i(#-1,xx,yy)=alp+newalp*(1-alp);col=I(#-2,xx,yy);alp=i(#-1,xx,yy););
                                                                                        );
                                                                                    );
                                                                                );
                                        );
                                    );
                            );
                    ,for(xx=0,xx<=ww,xx++,
                                for(yy=0,yy<=hh,yy++,
                                    if(yy==0,col=I(#-2,xx,yy);alp=i(#-1,xx,yy);
                                        ,newcol=I(#-2,xx,yy);newalp=i(#-1,xx,yy);if(newalp==0,I(#-2,xx,yy)=col;i(#-1,xx,yy)=alp;,
                                                                                    if(newalp==1,col=I(#-2,xx,yy);alp=i(#-1,xx,yy);
                                                                                    ,if(newalp!=alp,if(newcol!=col,I(#-2,xx,yy)=newcol*newalp+(1-newalp)*col;i(#-1,xx,yy)=alp+newalp*(1-alp);col=I(#-2,xx,yy);alp=i(#-1,xx,yy);
                                                                                                    ,i(#-1,xx,yy)=alp+newalp*(1-alp);col=I(#-2,xx,yy);alp=i(#-1,xx,yy););
                                                                                        ,if(newcol!=col,I(#-2,xx,yy)=newcol*newalp+(1-newalp)*col;i(#-1,xx,yy)=alp+newalp*(1-alp);col=I(#-2,xx,yy);alp=i(#-1,xx,yy););
                                                                                        );
                                                                                    );
                                                                                );
                                        );
                                    );
                            );
                    );
                ,if(direction
                        ,for(yy=0,yy<=hh,yy++,
                                for(xx=0,xx<=ww,xx++,
                                    if(xx==0,col=I(#-2,xx,yy);alp=i(#-1,xx,yy);
                                        ,newcol=I(#-2,xx,yy);newalp=i(#-1,xx,yy);if(newalp==0,I(#-2,xx,yy)=col;i(#-1,xx,yy)=alp;,
                                                                                    if(newalp==1,col=I(#-2,xx,yy);alp=i(#-1,xx,yy);
                                                                                    ,if(newalp!=alp,if(newcol!=col,I(#-2,xx,yy)=newcol*newalp+(1-newalp)*col;i(#-1,xx,yy)=alp+newalp*(1-alp);col=I(#-2,xx,yy);alp=i(#-1,xx,yy);
                                                                                                    ,i(#-1,xx,yy)=alp+newalp*(1-alp);col=I(#-2,xx,yy);alp=i(#-1,xx,yy););
                                                                                        ,if(newcol!=col,I(#-2,xx,yy)=newcol*newalp+(1-newalp)*col;i(#-1,xx,yy)=alp+newalp*(1-alp);col=I(#-2,xx,yy);alp=i(#-1,xx,yy););
                                                                                        );
                                                                                    );
                                                                                );
                                        );
                                    );
                            );
                    ,for(yy=0,yy<=hh,yy++,
                                for(xx=ww,xx>=0,xx--,
                                    if(xx==ww,col=I(#-2,xx,yy);alp=i(#-1,xx,yy);
                                        ,newcol=I(#-2,xx,yy);newalp=i(#-1,xx,yy);if(newalp==0,I(#-2,xx,yy)=col;i(#-1,xx,yy)=alp;,
                                                                                    if(newalp==1,col=I(#-2,xx,yy);alp=i(#-1,xx,yy);
                                                                                    ,if(newalp!=alp,if(newcol!=col,I(#-2,xx,yy)=newcol*newalp+(1-newalp)*col;i(#-1,xx,yy)=alp+newalp*(1-alp);col=I(#-2,xx,yy);alp=i(#-1,xx,yy);
                                                                                                    ,i(#-1,xx,yy)=alp+newalp*(1-alp);col=I(#-2,xx,yy);alp=i(#-1,xx,yy););
                                                                                        ,if(newcol!=col,I(#-2,xx,yy)=newcol*newalp+(1-newalp)*col;i(#-1,xx,yy)=alp+newalp*(1-alp);col=I(#-2,xx,yy);alp=i(#-1,xx,yy););
                                                                                        );
                                                                                    );
                                                                                );
                                        );
                                    );
                            );
                    );
                );
    "
    *. $alp
    rm[-2,-1]
    fi
endl done
#@cli rep_mn: eq. to 'rep_multinormalize'. : (+)
rep_mn: rep_multinormalize $*
#@cli rep_multinormalize: values
#@cli : Cut based on channels using values.
#@cli : (eq. to rep_mnormalize).
rep_multicut:
repeat $! l[$>]
    repeat s
        $=a
        $=b
        val_a=${a{$>*2+1}}
        val_b=${b{$>*2+2}}
        sh $>
        normalize. $val_a,$val_b
        rm.
    done
endl done
#@cli rep_mc: eq. to 'rep_multicut'. : (+)
rep_mc: rep_multicut $*
#@cli rep_multicut: values
#@cli : Cut based on channels using values.
#@cli : (eq. to rep_mcut).
rep_multicut:
repeat $! l[$>]
    repeat s
        $=a
        $=b
        val_a=${a{$>*2+1}}
        val_b=${b{$>*2+2}}
        sh $>
        cut. $val_a,$val_b
        rm.
    done
endl done
#@cli rep_2dcr: eq. to 'rep_2dcr'. : (+)
rep_2dcr: rep_2dchannelsranges
#@cli rep_2d_channels_ranges:
#@cli : Return the minimal and maximum values per channels in a image.
rep_2dchannelsranges: _rep_2dchannelsranges
_rep_2dchannelsranges:
if $!>1 error "Cannot be used on more than 1 images!" fi
repeat s
if $>==0
sh $>
minv={im#-1}
maxv={iM#-1}
cv=[$minv,$maxv]
rm.
else
sh $>
minv={im#-1}
maxv={iM#-1}
tcv=[$minv,$maxv]
cv=[$cv,$tcv]
rm.
fi
done
u {"chv="$cv";(chv)"}
#@cli rep_ol: eq. to 'rep_orientation_list'. : (+)
#@cli : Return dimensions of selected images.
rep_ol: rep_orientation_list
#@cli rep_orientation_list:
#@cli : Return orientation of selected images.
#@cli : (eq. to rep_ol).
rep_orientation_list: _rep_orientation_list
_rep_orientation_list: ti={$!} u {"ro=vector"$ti"(0);for (k=0,k<"$ti",++k,if(h#k>w#k,ro[k]=1,ro[k]=0););(ro)"}
#@cli rep_recpoltrans: eq. to 'rep_rectangular_polar_transformation'. : (+)
rep_recpoltrans: rep_rectangular_polar_transformation $*
#@cli rep_rectangular_polar_transformation : -1>=_xpos<=1,-1>=_ypos<=1,_fromto={ -3=to_inverted_rectangular_polar_preserved_details | -2=from_rectangular_polar_preserved_details_to_cartesian | -1=to_inverted_rectangular_polar | 0=to_rectangular_polar | 1=to_rectangular_polar_preserved_details| 2=from_preserved_details_inverted_rectangular_polar },orientation_0={ 0=landscape | 1=portrait },...,orientation_n
#@cli : Converts images to inversion of rectangular polar format or to rectangular polar format. Adapted for development of perspective filters. The first two variables defines the coordinates of revolution based on -1,1 ranges. 1,1 means the point of revolution is on top-right part of the image.
#@cli : (eq. to rep_recpoltrans).\n
#@cli : Note: When using 2 for $3, you need to define the orientation of every images. For every images, insert one argument per image after $3.
#@cli : Default values: '_xpos=0','_ypos=0','_fromto=0'
rep_rectangular_polar_transformation:
skip ${1=0},${2=0},${3=0}
if $1<-1||$1>1 error "($1>=-1&&$1<=1)=0" fi
if $2<-1||$2>1 error "($2>=-1&&$2<=1)=0" fi
repeat $! l[$>]
    ov=${-rep_2dcr}
    if $3==-3
        maxlength={max(w,h)}
        perimeter={(w+h)*2}        
        {$perimeter*2},{$maxlength*2},{d},{s},"
        begin(
            ww=w#0;
            hh=h#0;
            point_x=(($1*-1)*.5+.5)*ww;
            point_y=($2*.5+.5)*hh;
            inv_point_x=ww-point_x;
            inv_point_y=hh-point_y;
            cut_ang_s0=abs(atan2(inv_point_y,inv_point_x)*180/pi);
            cut_ang_s1=180-abs(atan2(inv_point_y,point_x)*180/pi);
            cut_ang_s2=180+abs(atan2(point_y,point_x)*180/pi);
            cut_ang_s3=360-abs(atan2(point_y,inv_point_x)*180/pi);
            distanceaway(value)=(
                    if(value==0,ww-point_x,
                    if(value==1,hh-point_y,
                    if(value==2,   point_x,
                                   point_y
                                         );
                                         );
                                         );
                );
            );
        surface_angle=(x/w)*360;
        if(surface_angle>cut_ang_s0&&surface_angle<=cut_ang_s1,side=1,
        if(surface_angle>cut_ang_s1&&surface_angle<=cut_ang_s2,side=2,
        if(surface_angle>cut_ang_s2&&surface_angle<=cut_ang_s3,side=3,
                                                               side=0
                                                                    );
                                                                    );
                                                                    );
        mdist=abs(side%2?1/sin((surface_angle/180)*pi):1/cos((surface_angle/180)*pi));
        dix=(point_x+cos((surface_angle/180)*pi)*distanceaway(side)*mdist*y/h)*((ww-1)/ww);
        diy=(point_y+sin((surface_angle/180)*pi)*distanceaway(side)*mdist*y/h)*((hh-1)/hh);
        i(#0,ww-(dix+1),hh-(diy+1),z,c,2);
        "
        k.
    elif $3==-1||$3==-2
        f "
        begin(
            point_x=(($1*-1)*.5+.5)*w;
            point_y=($2*.5+.5)*h;
            inv_point_x=w-point_x;
            inv_point_y=h-point_y;
            cut_ang_s0=abs(atan2(inv_point_y,inv_point_x)*180/pi);
            cut_ang_s1=180-abs(atan2(inv_point_y,point_x)*180/pi);
            cut_ang_s2=180+abs(atan2(point_y,point_x)*180/pi);
            cut_ang_s3=360-abs(atan2(point_y,inv_point_x)*180/pi);
            distanceaway(value)=(
                if(value==0,w-point_x,
                if(value==1,h-point_y,
                if(value==2,  point_x,
                              point_y;
                                    );
                                    );
                                    );
            );
        );
        surface_angle=(x/w)*360;
        if(surface_angle>=cut_ang_s0&&surface_angle<cut_ang_s1,side=1,
        if(surface_angle>=cut_ang_s1&&surface_angle<cut_ang_s2,side=2,
        if(surface_angle>=cut_ang_s2&&surface_angle<cut_ang_s3,side=3,
                                                               side=0
                                                                    );
                                                                    );
                                                                    );
        mdist=abs(side%2?1/sin((surface_angle/180)*pi):1/cos((surface_angle/180)*pi));
        dix=(point_x+cos((surface_angle/180)*pi)*distanceaway(side)*mdist*y/h)*((w-1)/w);
        diy=(point_y+sin((surface_angle/180)*pi)*distanceaway(side)*mdist*y/h)*((h-1)/h);
        i(w-(dix+1),h-(diy+1),z,c,2);
        "
        if $3<-1 r2dx 50%,6 fi
    elif $3==0||$3==1
        if $3>0 r2dx 200%,6 fi
        f "
        begin(
            ww=w-1;
            hh=h-1;
            sd=max(w,h)/min(w,h);
            sx=w>h?sd:1;
            sy=w>h?1:sd;
            cx=.5+$1*.5;
            cy=.5+$2*.5;
            px=cx*w;
            py=(1-cy)*h;
            sxl=(w/2)/px;
            sxr=(w/2)/(w-px);
            syt=(h/2)/py;
            syb=(h/2)/(h-py);
        );
        atx=(x/ww-cx)*sx;
        aty=(y/hh-(1-cy))*sy;
        sur_atan=(atan2(aty,atx)+pi)/(2*pi);
        xl=-1+(x/ww)*2*sxl;
        xr=1-(1-x/ww)*2*sxr;
        yt=-1+(y/hh)*2*syt;
        yb=1-(1-y/hh)*2*syb;
        xx=x>=px?xr:xl;
        yy=y>=py?yb:yt;
        sur_max=max(abs(xx),abs(yy));
        i(sur_atan*w,sur_max*h,z,c,2,2);
        "
        if $3>0 sharpen 2 fi
    elif $3==2
       $=val
        orientation=${val{$>+4}}
        half_perimeter={w/2}
        length_1={$half_perimeter-h}
        length_2={$half_perimeter-$length_1}
        if $orientation
            width={min($length_1,$length_2)}
            height={max($length_1,$length_2)}
        else
            width={max($length_1,$length_2)}
            height={min($length_1,$length_2)}
        fi
        $width,$height,{d},{s},"
        begin(
            ww=w#0;
            hh=h#0;
            ox="$width";
            oy="$height";
            sd=max(ox,oy)/min(ox,oy);
            if(w>h,
                sxf=ox>oy?sd:1;
                syf=ox>oy?1:sd;
            ,
                sxf=ox<oy?1:sd;
                syf=ox<oy?sd:1;
            );
            cx=.5+$1*.5;
            cy=.5+$2*.5;
            px=cx*ww;
            py=(1-cy)*hh;
            sxl=(ww/2)/px;
            sxr=(ww/2)/(ww-px);
            syt=(hh/2)/py;
            syb=(hh/2)/(hh-py);
        );
        xx=(x/(w-1))*ww;
        yy=(y/(h-1))*hh;
        xl=-1+(xx/ww)*2*sxl;
        xr=1-(1-xx/ww)*2*sxr;
        yt=-1+(yy/hh)*2*syt;
        yb=1-(1-yy/hh)*2*syb;
        nxx=xx>px?xr:xl;
        nyy=yy>py?yb:yt;
        ay=max(abs(nxx),abs(nyy));
        ax=(atan2((yy/hh-(1-cy))*syf,(xx/ww-cx)*sxf)+pi)/(2*pi);
        i(#0,abs(ax*ww),abs(ay*hh),z,c,2,1);
        "
        r2dx. 50%,6
        k.
    else error "$3|"$"3!=intnum[-3,2]"
    fi
    rep_multicut $ov
endl done
#@cli rep_sd: eq. to 'rep_spiral_distort'. : (+)
rep_sd: rep_spiral_distort $*
#@cli rep_spiral_distort: _revolution!=0,_height!=0,_refraction>0,_direction={ 0=clockwise | 1=counterclockwise },_angle,_continuous_spiral={ 0=periodic | 1=continuous },-1<=_preshift_x<=1,-1<=_preshift_y<=1,_preshift_boundary={ 0=periodic | 1=mirror },_skew_x,_skew_y,_skew_m,_scale_coord_x,_scale_coord_y,_offx,_offy,_spiral_boundary={ 0=none | 1=neumann | 2=periodic | 3=mirror },_interpolation={ 0=nearest | 1=average | 2=linear | 3=bicubic | 4=lanczos }
#@cli : Transform images into spiral by using spiral gradient for x coordinate, and radial gradient for y coordinate.
#@cli : (eq. to 'rep_sd').\n
#@cli : '_revolution' defines the number of revolution within the spiral assuming coordinates range of [-1,1].
#@cli : '_height' is the height of spiral. The higher the height of the spiral, the more duplicates will repeat within one revolution.
#@cli : '_refraction' refers to the logarithmic distortion within spiral.
#@cli : '_direction' determines if it clockwise or counter-clockwise.
#@cli : '_angle' determines the function angle.
#@cli : '_continuous_spiral' determines whether the spiral distortion is continuous or not.
#@cli : '_preshift_x' shifts the images before the spiral distortion along the x-axis.
#@cli : '_preshift_y' shifts the image before the spiral distortion along the y-axis.
#@cli : '_preshift_boundary' determines the boundary within the preliminary shift.
#@cli : '_skew_x' skews the distortion alongside the x-axis. It is recommended to keep ranges to -100% to 100%.
#@cli : '_skew_y' skews the distortion alongside the y-axis. It is recommended to keep ranges to -100% to 100%.
#@cli : '_skew_m' is the multiplier for skewing.
#@cli : '_scale_x' scales the coordinates alongside the x-axis.
#@cli : '_scale_y' scales the coordinates alongside the y-axis.
#@cli : '_offx' determines the offset-placement of the distortion alongside the x-axis. It is recommended to keep ranges to -100% to 100%.
#@cli : '_offy' determines the offset-placement of the distortion alongside the y-axis. It is recommended to keep ranges to -100% to 100%.
#@cli : '_spiral_boundary' determines how the out-of-bound values is to be evaluated.
#@cli : '_interpolation' determines the interpolation of the spiral distortion.\n
#@cli : Default values: '_frequency=1','_height=1','_refraction=0','_direction=0','_angle=0','_continuous_spiral=0','_preshift_x=0','_preshift_y=0','_preshift_boundary=0','_skew_x=0','_skew_y=0','_skew_m=1','_scale_x=1','_scale_y=1','_offx=0','_offy=0','_spiral_boundary=3','_interpolation=4'\n
#@cli : Author: Reptorian.
#@cli : $ rep_spiral_distort .5,4,-.5,1,40,1,.5,.5,0,50%,-25%,2,2,.5,-.5,2,4
rep_spiral_distort:
skip ${1=1},${2=1},${3=0},${4=0},${5=0},${6=0},${7=0},${8=0},${9=0},${10=0},${11=0},${12=1},${13=1},${14=1},${15=0},${16=0},${17=3},${18=4}
if !$! v + error "No images to perform spiral distortion on" v - fi
if $1==0 v + error ""$"1/_revolution cannot be 0!" v - fi
if $2==0 v + error ""$"2/_height cannot be 0!" v - fi
if $3==-1 v + error ""$"3/_refraction cannot be -1!" v - fi
if !$13||!$14 v + error ""$"13/_scale_x and "$"14/_scale_y cannot be 0!" v - fi
v -
skew_m={abs(2*$12)}
if $4 direction=counterclockwise
else direction=clockwise
fi
if $6 spiral_mode=continuous
else spiral_mode=periodic
fi
if abs($9) preshift_boundary=mirror
else preshift_boundary=periodic
fi
if abs($17)==0 spiral_boundary=none
elif abs($17)==1 spiral_boundary=neumann
elif abs($17)==2 spiral_boundary=periodic
elif abs($17)==3 spiral_boundary=mirror
fi
if abs($18)==0 interpolation=nearest
elif abs($18)==1 interpolation=average
elif abs($18)==2 interpolation=linear
elif abs($18)==3 interpolation=bicubic
elif abs($18)==4 interpolation=lanczos
fi
if abs($7)||abs($8) preshift="Preshift of {$7*100}% alongside the x-axis, and {$8*100}% alongside the y-axis has been applied before the distortion using "$preshift_boundary" boundary condition."
else preshift=""
fi
v +
e[] "Apply spiral distortion at coordinates $15,$16 with scale factor of $13 within x-axis and $14 within y-axis and skew-"$skew_m" distortion utilizing factor of $10 within x-axis and factor of $11 within y-axis to images using "$direction" "$spiral_mode" spiral with revolution of $1, height of $2, refraction factor of $3 using "$spiral_boundary" boundary condition and "$interpolation" interpolation. "$preshift""
v +
if abs($18)>1 r2dx 200%,{abs($18)>2?abs($18)+2:abs($18)+1} fi
if abs($7)||abs($8)
e[] "Apply of {$7*100}% alongside the x-axis, and {$8*100}% alongside the y-axis" 
f "begin(offx=(w/2)*$7*-1;offy=(h/2)*$8;interpolation=abs($18)>2?2:abs($18);boundary=(abs($9)+2););
i(x+offx,y+offy,z,c,interpolation,boundary);
"
fi
if $4 mirror x fi
f "begin(
    sd=max(w,h)/min(w,h);
    sx=w>h?sd:1;
    sy=w>h?1:sd;
    ang=pi*($5*-1/180);
    skew_x=($10*-1)/abs($13);
    skew_y=$11/abs($14);
    skew_m=abs(2*$12);
    offx=-.5+($15*-1/2);
    offy=-.5+($16*-1/2);
    nw=abs(w*sin(ang))+abs(h*cos(ang));
    nh=abs(w*cos(ang))+abs(h*sin(ang));
    rot_x(a,b)=a*cos(ang)-b*sin(ang);
    rot_y(a,b)=a*sin(ang)+b*cos(ang);
    interpolation=abs($18)>2?2:abs($18);
    boundary=abs($17);
);
XX=(x/w+offx)*sx*$13;
YY=(y/h+offy)*sy*$14;
xx=(rot_x(XX,YY)*(skew_m^(rot_x(XX,YY)*skew_x)))*2;
yy=(rot_y(XX,YY)*(skew_m^(rot_y(XX,YY)*skew_y)))*2;
radial=sqrt(xx^2+yy^2);
if($4,sur_atan=1-(atan2(xx,yy)+pi)/(2*pi);,sur_atan=(atan2(xx,yy)+pi)/(2*pi););
es=(sur_atan+radial*$1);
es=es-floor(es);
if($6,es=(es>.5?1-es:es)*2;);
i((es^(1+$3))*w*$2,radial*h,z,c,interpolation,boundary);
"
if abs($18)>1 r2dx 50%,{abs($18)>2?abs($18)+2:abs($18)+1} fi
v -
#@cli rep_fibosq: eq. to 'rep_fibonacci_squares'. : (+)
rep_fibosq: rep_fibonacci_squares $*
#@cli rep_fibonacci_squares: iterations,_corner_location>=0, _spiral_mode={ 0= non-spiral | 1= spiral_fill }
#@cli : Generate a new fibonacci image(s). The value of each squares are increased by 1 starting from 0 while the size of the squares are increased by Fibonacci iterations starting from 1.
#@cli : (eq. to 'rep_fibosq').\n
#@cli : Default values: '_corner_location=0','_spiral_mode=1'
rep_fibonacci_squares:
size1=0 size2=1 nextterm=0 wi=0
ti={$!}
size1={$size2}
size2={$nextterm}
nextterm={$size1+$size2}

switch=$2
ci=0


do
    $nextterm,$nextterm,1,1,$wi #Size of each squares are determined by nextterm while the value of each squares are determined by number of iteration within loop#
    size1={$size2}
    size2={$nextterm}
    nextterm={$size1+$size2}
    if ($!-$ti)==2
        if $ci%2
            if $3 if floor($switch/2)%2 rv[-2,-1] fi fi #Switches order of squares before appending to generate fibonacci square spirals#
            if $switch%2&&!$3 rv[-2,-1] fi #Enables non-spiral connection of fibonacci Squares to have different corner locations#
            a[-2,-1] x
        else
            if $3 if floor($switch/2)%2  rv[-2,-1] fi fi #Switches order of squares before appending to generate fibonacci spirals#
            if $switch>=2&&!$3 rv[-2,-1] fi #Enables non-spiral connection of fibonacci Squares to have different corner locations#
            a[-2,-1] y
        fi
    fi
    ci+=1
    wi+=1
    if $3 switch+=1 fi
while $wi<$1
#@cli rep_fibofill: eq. to 'rep_fibonacci_fill'. : (+)
rep_fibofill: rep_fibonacci_fill $*
#@cli rep_fibonacci_fill: _corner_location={ 0= top left | 1= top right | 2= bottom left | 3= bottom right }, _spiral_mode={ 0= non-spiral | 1= spiral_fill },_fill_images_with_fibonacci_fill= { 0= Adds fibonacci fill image | 1= Replaces all current images with fibonacci fill }, -1<=_spiral_place_center_x<=1,-1<=_spiral_place_center_y<=1
#@cli : Generates fibonacci filled image(s) based on dimensions of existing image(s). The value of each squares are increased by 1 starting from 0 while the size of the squares are increased by Fibonacci iterations starting from 1.
#@cli : (eq. to 'rep_fibonacci_fill').\n
#@cli : Note: Last two variables or _spiral_place_center variables series only works for spiral cases.\n
#@cli : Default values: '_corner_location=0','_spiral_mode=1','_fill_images_with_fibonacci_fill=0','_spiral_place_center_x=0','_spiral_place_center_y=0'
rep_fibonacci_fill:
skip ${1=0},${2=1},${3=1},${4=0},${5=0}
mw=0 mh=0 size1=0 size2=1 nextterm=0 #Starting variables#
ti={$!}

repeat $!
    if w#$>>$mw mw={w#$>} fi
    if h#$>>$mh mh={h#$>} fi
done

size1={$size2}
size2={$nextterm}
nextterm={$size1+$size2}

if $2
    if $mw==$mh||$mw>$mh
        switch={$1<=1?1-$1:$1}
        ci=0
    else
        switch={$1%2?3-$1:$1}
        ci=1
    fi
else
    switch=$1
    ci=0
fi

wi=0 #While Iteration#
wic=0 #While Iteration after length of value from the minimum to one of the size requirement has been met#

if !$2 mlb={sqrt(max($mh,$mw)^2+max($mh,$mw)^2)}
else mlb={max($mh,$mw)} fi

do
    $nextterm,$nextterm,1,1,$wi #Size of each squares are determined by nextterm while the value of each squares are determined by number of iteration within loop#
    size1={$size2}
    size2={$nextterm}
    nextterm={$size1+$size2}
    
    if $wi
        if $ci%2
            if $2 if floor($switch/2)%2 rv[$ti,{$ti+1}] fi fi #Switches order of squares before appending to generate fibonacci square spirals#
            if $switch%2&&!$2 rv[$ti,{$ti+1}] fi #Enables non-spiral connection of fibonacci Squares to have different corner locations#
            a[$ti,{$ti+1}] x
        else
            if $2 if floor($switch/2)%2  rv[$ti,{$ti+1}] fi fi #Switches order of squares before appending to generate fibonacci spirals#
            if $switch>=2&&!$2 rv[$ti,{$ti+1}] fi #Enables non-spiral connection of fibonacci Squares to have different corner locations#
            a[$ti,{$ti+1}] y
        fi
    fi
    ci+=1
    wi+=1
    if $2 switch+=1 fi
    cw={$2?min(xm#-1,w#-1-xm#-1):max(xm#-1,w#-1-xm#-1)}
    ch={$2?min(ym#-1,h#-1-xm#-1):max(ym#-1,h#-1-xm#-1)}
    if $2 cl={max($cw,$ch)} #Max Length of minimum value of spiral to one of the sides based on x or y axis#
    else cl={sqrt($cw^2+$ch^2)} fi #Hypotenuse of Fibonacci non-spiral form#
    if $cl>$mlb wic+=1 if !$2 wic+=1 fi fi #Iteration after size requirement has been met #
while $wic!=2

place_x={xm#-1}
place_y={ym#-1}
cex={(w#-1)/2}
cey={(h#-1)/2}
cex={$place_x>$cex?1:0}
cey={$place_y>$cey?1:0}

if $3
channels 0
    if $2
        repeat $ti
            sx={ceil(w#$>/2)}
            sy={ceil(h#$>/2)}
            sx+={$4*$sx}
            sy+={$5*$sy}
            f[$>] i(#-1,$place_x-$sx+x,$place_y-$sy+y)
        done
    else
        repeat $ti
            +r. {w#$>},{h#$>},100%,100%,0,0,$cex,$cey
            rv[$>,-1]
            rm.
        done
    fi
    rm.
fi
#@cli rep_gv: eq. to 'rep_glass_vignette'. : (+)
rep_gv: rep_glass_vignette $*
#@cli rep_glass_vignette: refraction,_refraction_power,_len_size=1,_chromatic_aberration,-100%<=_preliminary_shift_x<=100%,-100%<=_preliminary_shift_y<=100%,_image_additional_zoom>0,-360<=_image_angle<=360,_distortion_scale_x,_distortion_scale_y,_distortion_scale_xy>0,-360<=_distortion_angle<=360,_distortion_offset_x,_distortion_offset_y,0<=_colorspace<=1,_boundary={ 0=none | 1=neumann | 2=periodic | 3=mirror },_interpolation={ 0=nearest | 1=average | 2=linear | 3=grid | 4=bicubic | 5=lanczos },_subpixel>0
#@cli : Distorts images as if it is based from the view of a bulged car mirror or camera len. This G'MIC filter is a heavily extended version of TR's Glass Vignette plugin made for Paint.NET by TechnoRobbo. It can also be used for generating abstract art as well.
#@cli : (eq. to 'rep_gv').\n
#@cli : 'refraction' defines the strength of distortion. The farther the values from 0, the greater the distortion is. It is recommended to use percentage alongside a number.
#@cli : '_refraction_power' defines the distortion factor within the refraction. The farther the values from 0, the greater the distortion is. It is recommended to use percentage alongside a number.
#@cli : '_len_size' is the size of distortion accordingly to the terminal ends of the lens distortion.
#@cli : '_chromatic_aberration' is the degree of aberration within channels. The farther the values from 0, the greater the distortion per channels would be. It is recommended to use percentage alongside a number.
#@cli : '_preliminary_shift_x' is the preshift of images before the distortion effect. This is used in the original plugin. It is recommended to use percentage alongside a number.
#@cli : '_preliminary_shift_y' is the preshift of images before the distortion effect. This is used in the original plugin. It is recommended to use percentage alongside a number.
#@cli : '_image_additional_zoom' defines the scaling based on scaling of coordinates of image within the distortion effect. 0 starts with scaling of 1x, and 1 means scaling of 2x.
#@cli : '_image_angle' defines the angle of image within the distortion.
#@cli : '_distortion_scale_x' is the scaling of distortion within the x-axis. When this is set to 0, the ratio of image is used instead. 0 starts with scaling of 1x, and 1 means scaling of 2x.
#@cli : '_distortion_scale_y' is the scaling of distortion within the y-axis. When this is set to 0, the ratio of image is used instead. 0 starts with scaling of 1x, and 1 means scaling of 2x.
#@cli : '_distortion_scale_xy' is the scaling of distortion within the x and y axis at the same time.
#@cli : '_distortion_angle' is the angle of distortion effect. 0 starts with scaling of 1x, and 1 means scaling of 2x.
#@cli : '_distortion_offset_x' is the displacement of distortion within the x-axis. It is recommended to use percentage alongside a number.
#@cli : '_distortion_offset_y' is the displacement of distortion within the y-axis. It is recommended to use percentage alongside a number.
#@cli : '_colorspace' defines the color space of the image to process distortion on.
#@cli : '_boundary' defines how the out-of-bound areas is to be behave. 
#@cli : '_interpolation' defines the interpolation within distortion.
#@cli : '_subpixel' is the level of subpixel sampling to be used.
#@cli : Default values: '_refraction_power=0','_lensize=1','_chromatic_aberration=0','_preliminary_shift_x=0','_preliminary_shift_y=0','_image_zoom=0','_image_angle=0','_distortion_scale_x=1','_distortion_scale_y=1','_distortion_scale_xy=1','_distortion_angle=0','_distortion_offset_x=0','_distortion_offset_y=0','_colorspace=0','_boundary=3','_interpolation=5','_subpixel=1'
rep_glass_vignette:
skip ${2=0},${3=0},${4=1},${5=0},${6=0},${7=0},${8=0},${9=1},${10=1},${11=1},${12=0},${13=0},${14=0},${15=0},${16=3},${17=5},${18=1}
v -
convert_back=0
sub={1+abs($18)}
v +
v +
repeat $! l[$>]
    e[^-1] "Distorts image at angle of $12 with refraction factor of $1, chromatic aberration of $4, zoom factor of $7, preliminary shift of $5, preliminary shift of $6, scale x-axis distortion by $9 multiplied by $11, scale y-axis distortion by $10 multiplied by $11, refraction index by power of $2 placed at $13,$14 at angle of $8."
    if (s==3||s==4)&&$15
        convert_back=1
        if $15!=4
            sh 0,2
            if $15==1 rgb2srgb.
            elif $15==2 rgb2ryb.
            elif $15==3 rgb2cmy.
            elif $15==5 rgb2hcy.
            elif $15==6 rgb2hsi.
            elif $15==7 rgb2hsl.
            elif $15==8 rgb2hsv.
            elif $15==9 rgb2lab.
            elif $15==10 rgb2lch.
            elif $15==11 rgb2yiq.
            elif $15==12 rgb2yuv.
            elif $15==13 rgb2ycbcr.
            elif $15==14 rgb2ycbcrglic.
            elif $15==15 rgb2xyz.
            elif $15==16 rgb2yes.
            elif $15==17 rgb2k1.
            elif $15==18 rgb2ohta.
            fi
            rm.
        else
            if s==3 rgb2cmyk
            elif s==4 s c,-3 rgb2cmyk.. a c
            fi
        fi
    fi
    shift $5,$6,0,0,$16,{(abs($17)-1)?1}
    r2dx {$sub*100}%,{abs($17)+1}
    f "begin(
        aberate=((1-$1)-.001)/.999;
        aberate=sqr(1*aberate+(1-$4)*(1-aberate));
        offset_x=w/2*(1-$13);
        offset_y=h/2*(1-$14);
        if($9&&$10,
            mx=1/($9*(1/$11));
            my=1/($10*(1/$11));
        ,
            if(w>h,
                mx=1/(1*(1/$11));
                my=1/((h/w)*(1/$11));
            ,
                mx=1/((w/h)*(1/$11));
                my=1/(1*(1/$11));
            );
        );
        ang=pi*($8/180);
        dang=pi*($12/180);
        distrad=1*10^($2/10);
        rot_x(a,b)=a*cos(ang)-b*sin(ang);
        rot_y(a,b)=a*sin(ang)+b*cos(ang);
        dist_rot_x(a,b)=a*cos(dang)-b*sin(dang);
        dist_rot_y(a,b)=a*sin(dang)+b*cos(dang);
        sq2(a,b)=sqrt(a^2+b^2);
        sd=max(w,h)/min(w,h);
        sx=w>h?sd:1;
        sy=w>h?1:sd;
        rx(a)=((a/2+.5*sx)/sx)*w;
        ry(a)=((a/2+.5*sy)/sy)*h;        
        cv=sq2(rot_x(sx,sy)/2,rot_y(sx,sy)/2);
        cv*=(pi/2)*(max(w,h)/min(w,h))*$3;
        off_x_primary(a,b)=cos(a)*b*(abs($7)+1);
        off_y_primary(a,b)=sin(a)*b*(abs($7)+1);
        off_secondary(a,b,c)=a*(1-c)+b*c;
    );
    XX=((x+offset_x)/w-.5)*2;
    YY=((y+offset_y)/h-.5)*2;
    xx=dist_rot_x(XX,YY);
    yy=dist_rot_y(XX,YY);
    xx*=mx;
    yy*=my;
    xx*=sx;
    yy*=sy;
    XX=rot_x(xx,yy);
    YY=rot_y(xx,yy);
    far=sq2(XX,YY);
    rad=atan2(YY*distrad,XX+.0001);
    eff=far/cv;
    RB=far^(1-$1);
    RA=RB*aberate;
    off_xS=off_x_primary(rad,far);
    off_xA=off_x_primary(rad,RA);
    off_xB=off_x_primary(rad,RB);
    off_yS=off_y_primary(rad,far);
    off_yA=off_y_primary(rad,RA);
    off_yB=off_y_primary(rad,RB);
    offxA=off_secondary(off_xS,off_xA,eff);
    offyA=off_secondary(off_yS,off_yA,eff);
    offxB=off_secondary(off_xS,off_xB,eff);
    offyB=off_secondary(off_yS,off_yB,eff);
    fax=rx(offxA);
    fay=ry(offyA);
    fbx=rx(offxB);
    fby=ry(offyB);
    if(s==1,result=[i((fax+fbx)/2,(fay+fby)/2,z,1,(abs($17)-1)?1,$16)]);
    if(s==2,result=[i(fbx,fby,z,0,(abs($17)-1)?1,$16),i((fax+fbx)/2,(fay+fby)/2,z,1,(abs($17)-1)?1,$16)]);
    if(s==3,result=[i(fbx,fby,z,0,(abs($17)-1)?1,$16),i((fax+fbx)/2,(fay+fby)/2,z,1,(abs($17)-1)?1,$16),i(fax,fay,0,2,(abs($17)-1)?1,$16)]);
    if(s==4,result=[i(fbx,fby,z,0,(abs($17)-1)?1,$16),i((fax+fbx)/2,(fay+fby)/2,z,1,(abs($17)-1)?1,$16),i(fax,fay,0,2,(abs($17)-1)?1,$16),i((fax+fbx)/2,(fay+fby)/2,z,3,(abs($17)-1)?1,$16)]);
    if(s==5,result=[i(fbx,fby,z,0,(abs($17)-1)?1,$16),i((fax+fbx)/2,(fay+fby)/2,z,1,(abs($17)-1)?1,$16),i(fax,fay,0,2,(abs($17)-1)?1,$16),i((fax+fbx)/2,(fay+fby)/2,z,3,(abs($17)-1)?1,$16),i((fax+fbx)/2,(fay+fby)/2,z,4,(abs($17)-1)?1,$16)]);
    result;
    "
    r2dx {(1/$sub)*100}%,{abs($17)+1}
    if $convert_back
        if $15!=4
            sh 0,2
            if $15==1 srgb2rgb.
            elif $15==2 ryb2rgb.
            elif $15==3 cmy2rgb.
            elif $15==5 hcy2rgb.
            elif $15==6 hsi2rgb.
            elif $15==7 hsl2rgb.
            elif $15==8 hsv2rgb.
            elif $15==9 lab2rgb.
            elif $15==10 lch2rgb.
            elif $15==11 yiq2rgb.
            elif $15==12 yuv2rgb.
            elif $15==13 ycbcr2rgb.
            elif $15==14 ycbcrglic2rgb.
            elif $15==15 xyz2rgb.
            elif $15==16 yes2rgb.
            elif $15==17 k12rgb.
            elif $15==18 ohta2rgb.
            fi
            rm.
        else
            if s==4 cmyk2rgb
            elif s==5 s c,-4 cmyk2rgb.. a c
            fi
        fi
    fi
endl done
v -
#@cli rep_equi2cube: eq. to 'rep_equirectangular_panorama_to_cube_map'. : (+)
rep_equi2cube: rep_equirectangular_panorama_to_cube_map $*
#@cli rep_equirectangular_panorama_to_cube_map: 0<=_top_face_placement<=3,0<=_bottom_face_placement<=3
#@cli : An extension of a code provided by 'Salix alba' at stackoverflow to solve conversion from eqirectangular panorama to cube map. Source: https://stackoverflow.com/questions/29678510/convert-21-equirectangular-panorama-to-cube-map
#@cli : (eq. to 'rep_equi2cube').\n
#@cli : Note: _bottom_face_placement will use placement of _top_face_placement when not specified.
#@cli : Default values: '_top_face_placement=1','_bottom_face_placement=_top_face_placement'
rep_equirectangular_panorama_to_cube_map:
skip ${1=1}
if $#>2 v + error "Only 1 or 2 variables are accepted!" v - fi
if $1<0||$-1<0||$1>3||$-1>3||!isint($1)||!isint($-1) v + error "All variables should be integer number\(s\) in the range of \[0,3\]!" v - fi
repeat $! l[$>]
v + e[^-1] "Convert equirectangular panorama to cube map using face $1 for top placement and face $-1 for bottom placement!" v -
ratio={w/h}
if $ratio<2 r {w},{.5*w},100%,100%,5
else r {2*h},{h},100%,100%,5
fi
{w},{3/4*w},100%,100%,"
begin(edge=w/4;
    outImgToXYZ(xc,yc,face,edge)=(
        a=2*xc/edge;b=2*yc/edge;
        if(face==0,ret=[-1,1-a,3-b];); #Left Face#
        if(face==1,ret=[a-3,-1,3-b];); #Front Face#
        if(face==2,ret=[1,a-5,3-b];); #Right Face#
        if(face==3,ret=[7-a,1,3-b];); #Back Face#
        if($1==0,if(face==4,ret=[1-b,1-a,1];); #Top Face#
        ,if($1==1,if(face==4,ret=[a-3,1-b,1];);
        ,if($1==2,if(face==4,ret=[b-1,a-5,1];);
        ,if($1==3,if(face==4,ret=[7-a,b-1,1];);
        );
        );
        );
        );
        if($-1==0,if(face==5,ret=[b-5,1-a,-1;]); #Bottom Face#
        ,if($-1==1,if(face==5,ret=[a-3,b-5,-1;]);
        ,if($-1==2,if(face==5,ret=[5-b,a-5,-1;]);
        ,if($-1==3,if(face==5,ret=[7-a,5-b,-1;]);
        );
        );
        );
        );
        ret;
    );
);
face2=int(x/edge);
if(y<edge,face2=4;);
if(y>edge*2,face2=5;);
coord3=outImgToXYZ(x,y,face2,edge);
theta=atan2(coord3[1],coord3[0]);
r=sqrt(sqr(coord3[0])+sqr(coord3[1]));
phi=atan2(coord3[2],r);
uf=((theta+pi)/pi)*edge*2;
vf=((pi/2-phi)/pi)*edge*2;
if($1==$-1,if((x>=edge*$1&&x<edge*($1+1))||(y>=edge&&y<edge*2),i(#0,uf,vf,z,c,2,2););, #If first and last variable are the same, then visible output will show top and bottom faces along the same face#
if(y<edge*2,if((x>=edge*$1&&x<edge*($1+1))||(y>=edge&&y<edge*2),i(#0,uf,vf,z,c,2,2););,if((x>=edge*$-1&&x<edge*($-1+1))||(y>=edge&&y<edge*2),i(#0,uf,vf,z,c,2,2);););); #If first and last variable are not the same, then visible output will show top and bottom faces along the same face#
"
rm..
endl done
#@cli rep_trps: eq. to 'rep_tr_pixel_sharpener'. : (+)
rep_trps: rep_tr_pixel_sharpener $*
#@cli rep_tr_pixel_sharpener: sharpen,_internal_blur>=0,_type= { 0=Photo | 1= Horizontal | 2= Vertical | 3= One-Axis Angle | 4= Two-Axis Angle },-360<=_sharpening_angle<=360
#@cli : Extended version of the original TR's Pixel Sharpener for Paint.NET. Some code were changed to make more sense or is more practical. Negative values are enabled for first variable in the G'MIC version. The original code this was based on was created by TechnoRobbo. Source code - https://forums.getpaint.net/topic/26783-trs-pixel-sharpener-plugin-v20-dec-21-2014/
#@cli : (eq. to 'rep_trps').\n
#@cli : Default values: '_internal_blur=0','_blur_type=0','_sharpening_angle=0'
rep_tr_pixel_sharpener:
skip ${2=0},${3=0},${4=0}
f "
begin(
ang=pi*($4/180);
rot_x(a,b)=a*cos(ang)-b*sin(ang);
rot_y(a,b)=a*sin(ang)+b*cos(ang);
blur=(round(abs($2)+1)-1)*2+3;
qblur=sqr(blur);
eblur=floor(blur/2);
sblur=floor(blur/-2);
coeff=$1/100;
mult=qblur*coeff+eblur/round(abs($2)+1);
choice=abs($3)<=2?abs($3):0;
);
sum=i*mult;
for(k=int(sblur),k<=eblur,k++,
for(j=int(sblur),j<=eblur,j++,
if(k!=0&j!=0,
if($3==4,nx=x+rot_x(j,k);ny=y+rot_y(j,k););
if($3==3,nx=x+rot_x(j,0);ny=y+rot_y(j,0););
if($3==2,nx=x;ny=y+k;);
if($3==1,nx=x+j;ny=y;);
if($3==0,nx=x+j;ny=y+k;);
nfcalc=i(nx,ny,z,c,0,1);
sum-=nfcalc*coeff;
);
);
);
sum;
"
#@cli rep_trif: eq. to 'rep_technorobbo_intense_filtration'. : (+)
rep_trif: rep_technorobbo_intense_filtration $*
#@cli rep_technorobbo_intense_filtration: 0<=hue<=360,_gain,_mix,_style_based_on={ 0=Original | 1=Grayscale | 2=Hue },_use_255={ 0=1 | 1=255 }
#@cli : This command is a color filter and augmenter. The code is based from TechnoRobbo's Intense Filtration source code - https://forums.getpaint.net/topic/30148-trs-intense-filtration-v-13-oct-092014/
#@cli : (eq. to 'rep_trif').\n
#@cli : Warning: This command only works on images with 3 or 4 channel image. It doesn't discriminate between CMYK and RGBA image! So, make sure they're all RGB/RGBA images before using this command!\n
#@cli : 'hue' defines the color to augment.
#@cli : '_gain' defines the coefficient of image or number to multiple on data based on original image.
#@cli : '_mix' defines the strength of the filter.
#@cli : '_style_based_on' defines the style output of the filter based on corresponding name for number defined by filter.
#@cli : '_use_255' defines the maximum value for RGB image. If using float values from 0-1 range, then set to 0, else set to 1.\n
#@cli : Default values: '_gain=2','_mix=1','_style_based_on=0','_use_255=1'
rep_technorobbo_intense_filtration:
skip ${2=2},${3=1},${4=0},${5=1}
hue={abs($1)-floor(abs($1)/360)*360}
($hue^1^1)
hsv2rgb. /. 255
repeat $!-1
    if s#$>==3||s#$>==4
        sh[$>] 0,2
        f. "begin(endval(a,b)=(a*mix+(b-b*mix));
        mv=$5?255:1;
        mixval=abs($3)>1?1:abs($3);
        mix=1-mixval;
        thresh=abs($2)>1?mv/2:mv;
        himax=mv*abs($2)-thresh;
        );
        tmpv=i*abs($2)*i(#-2,0,0);
        tmpv=tmpv>mv?mv:tmpv;
        gray=((i0+i1+i2)/3)*abs($2);
        gray=gray>mv?mv:gray;
        cv=i*abs($2);
        cv=cv>thresh?(cv-thresh)*(mv-thresh)/himax+thresh:cv;
        graymix=gray/mv;
        gv=i(#-2,0,0)*graymix*mv*abs($2);
        gv>mv?mv:gv;
        $4==2?endval(gv,tmpv):($4==1?endval(gray,tmpv):endval(cv,tmpv));
        "
        rm.
    else v + error "Image \["$>"\] contains "{s#$>}" channels which does not meet the requirement of 3 or 4 channels!" v -
    fi
done
rm.
#@cli rep_colmt: eq. to 'rep_color_modulo_texture'. : (+)
rep_colmt: rep_color_modulo_texture $*
#@cli rep_color_modulo_texture: _modulo_method_1= { 0=Mod | 1=Reflected Mod | 2=Divmod | 3=Reflected Divmod },_modulo_value_a_1>0,_modulo_value_b_1>0,_angle_1<=360,_value_shift_1>0,_centered_1= { 0=Not centered | 1=Centered },_negate_mod_1= { 0=Not Negated | 1=Negated },_normalize_bool_1= { 0=Do not Normalize | 1=Normalize },_modulo_method_2= { 0=Mod | 1=Reflected Mod | 2=Divmod | 3=Reflected Divmod },_modulo_value_a_2>0,_modulo_value_b_2>0,_angle_2<=360,_value_shift_2>0,_centered_2= { 0=Not centered | 1=Centered },_negate_mod_2= { 0=Not Negated | 1=Negated },_normalize_bool_2= { 0=Do not Normalize | 1=Normalize },_modulo_method_3= { 0=Mod | 1=Reflected Mod | 2=Divmod | 3=Reflected Divmod },_modulo_value_a_3>0,_modulo_value_b_3>0,_angle_3<=360,_value_shift_3>0,_centered_3= { 0=Not centered | 1=Centered },_negate_mod_3= { 0=Not Negated | 1=Negated },_normalize_bool_3= { 0=Do not Normalize | 1=Normalize },_modulo_method_4= { 0=Mod | 1=Reflected Mod | 2=Divmod | 3=Reflected Divmod },_modulo_value_a_4>0,_modulo_value_b_4>0,_angle_4<=360,_value_shift_4>0,_centered_4= { 0=Not centered | 1=Centered },_negate_mod_4= { 0=Not Negated | 1=Negated },_normalize_bool_4= { 0=Do not Normalize | 1=Normalize },_diagonal_flip= { 0=not flipped | 1 = flipped },0<=_colorspacemode<=11,_contain_alpha= { 0=no_alpha | 1=alpha },_subpixel_processing_level>0,_interpolation= { 0=Nearest | 1=Average | 2=Linear | 3=Grid | 4=Bicubic | 5=Lanczos },0<=_channel_num_1<=4,0<=_channel_num_2<=4,0<=_channel_num_3<=4,0<=_channel_num_4<=4
#@cli : Inspired by MadJik's Color Modulo Texture for Paint.NET, this is a extension of that filter converted into G'MIC form. New features is being able to change color space, allow alpha, and anti-aliasing.
#@cli : (eq. to 'rep_colmt').\n
#@cli : '_modulo_method' defines what method of modulo operation would be applied to each channel.
#@cli : '_modulo_value_a' and 'modulo_value_b' is value used for calculation of modulo of function per channel.
#@cli : '_angle' defines the function angle.
#@cli : '_centered' defines if the function are centered.
#@cli : '_value_shift' adds value to function before modulo calculation.
#@cli : '_centered' is used to place function within -.5,.5 range instead of 0,1 range.
#@cli : '_negate_mod' negates the end modulo value.
#@cli : '_normalize_bool' is used to normalize values. Note - This can be used to make the filter behave similar to Madjik's Color Modulo Texture filter.
#@cli : '_diagonal_flip' is used to flip diagonal function.
#@cli : '_colorspacemode' defines the color space of modulo.
#@cli : '_contain_alpha' adds alpha value to modulo. In the case of CMYK, this option is nullified, and K is used to replace alpha instead.
#@cli : '_subpixel_processing_level' defines the subpixel processing level.
#@cli : '_interpolation' defines the method of interpolation.
#@cli : '_channel_num' defines the order of channel.\n
#@cli : Default values: '_modulo_method=3','_modulo_value_a=64','_modulo_value_b=255','_angle=0','_value_shift=0','_centered=1','_negate_mod=0','_normalize_bool=0','_diagonal_flip=0','_colorspacemode=3','_contain_alpha=0','_subpixel_processing_level=1','_interpolation=3','_channel_num_1=0','_channel_num_2=1','_channel_num_3=2','_channel_num_4=3'
#@cli : $ rep_color_modulo_texture 2,150,32,30,50,1,0,1,,,,,,,,,,,,,,,,,,,,,,,,,0,0,1,1.5,4,0,1,2,3
rep_color_modulo_texture:
skip ${1=},${2=},${3=},${4=},${5=},${6=},${7=},${8=},${9=},${10=},${11=},${12=},${13=},${14=},${15=},${16=},${17=},${18=},${19=},${20=},${21=},${22=},${23=},${24=},${25=},${26=},${27=},${28=},${29=},${30=},${31=},${32=},${33=1},${34=3},${35=0},${36=1},${37=3},${38=0},${39=1},${40=2},${41=3}
if narg($1)  modulo_method_1={$1%4}  else modulo_method_1=3 fi
if narg($2)  modvalue_a_1={abs($2)}  else modvalue_a_1=196 fi
if narg($3)  modvalue_b_1={abs($3)}  else modvalue_b_1=255 fi
if narg($4)  angle_1=$4              else angle_1=0 fi
if narg($5)  value_shift_1=$5        else value_shift_1=0 fi
if narg($6)  center_1=$6             else center_1=1 fi
if narg($7)  negate_1=$7             else negate_1=0 fi
if narg($8)  normalize_1=$8          else normalize_1=0 fi
if narg($9)  modulo_method_2={$9%4}  else modulo_method_2=$modulo_method_1 fi
if narg($10) modvalue_a_2={abs($10)} else modvalue_a_2=$modvalue_a_1 fi
if narg($11) modvalue_b_2={abs($11)} else modvalue_b_2=$modvalue_b_1 fi
if narg($12) angle_2=$12             else angle_2=$angle_1 fi
if narg($13) value_shift_2=$13       else value_shift_2=$value_shift_1 fi
if narg($14) center_2=$14            else center_2=$center_1 fi
if narg($15) negate_2=$15            else negate_2=$negate_1 fi
if narg($16) normalize_2=$16         else normalize_2=$normalize_1 fi
if narg($17) modulo_method_3={$17%4} else modulo_method_3=$modulo_method_2 fi
if narg($18) modvalue_a_3={abs($18)} else modvalue_a_3=$modvalue_a_2 fi
if narg($19) modvalue_b_3={abs($19)} else modvalue_b_3=$modvalue_b_2 fi
if narg($20) angle_3=$20             else angle_3=$angle_2 fi
if narg($21) value_shift_3=$21       else value_shift_3=$value_shift_2 fi
if narg($22) center_3=$22            else center_3=$center_2 fi
if narg($23) negate_3=$23            else negate_3=$negate_2 fi
if narg($24) normalize_3=$24         else normalize_3=$normalize_2 fi
if narg($25) modulo_method_4={$25%4} else modulo_method_4=$modulo_method_3 fi
if narg($26) modvalue_a_4={abs($26)} else modvalue_a_4=$modvalue_a_3 fi
if narg($27) modvalue_b_4={abs($27)} else modvalue_b_4=$modvalue_b_3 fi
if narg($28) angle_4=$28             else angle_4=$angle_3 fi
if narg($29) value_shift_4=$29       else value_shift_4=$value_shift_3 fi
if narg($30) center_4=$30            else center_4=$center_3 fi
if narg($31) negate_4=$31            else negate_4=$negate_3 fi
if narg($32) normalize_4=$32         else normalize_4=$normalize_3 fi
modnum_1={min($modvalue_a_1,$modvalue_b_1)}
modnum_2={min($modvalue_a_2,$modvalue_b_2)}
modnum_3={min($modvalue_a_3,$modvalue_b_3)}
modnum_4={min($modvalue_a_4,$modvalue_b_4)}
maxmodnum_1={max($modvalue_a_1,$modvalue_b_1)}
maxmodnum_2={max($modvalue_a_2,$modvalue_b_2)}
maxmodnum_3={max($modvalue_a_3,$modvalue_b_3)}
maxmodnum_4={max($modvalue_a_4,$modvalue_b_4)}
lcmod_1=$38
lcmod_2=$39
lcmod_3=$40
lcmod_4=$41
cs=$34
alp={$35?1}
diag=$33
interpolation={abs($37)+1}
subpixel={abs($36)+1}
tc={$cs!=3?3+$alp:4}
if $modvalue_a_1==$modvalue_b_1 v + error "Mod Value A for first channel and Mod Value B for first channel cannot be the same value!" v - fi
if $modvalue_a_2==$modvalue_b_2 v + error "Mod Value A for second channel and Mod Value B for second channel cannot be the same value!" v - fi
if $modvalue_a_3==$modvalue_b_3 v + error "Mod Value A for third channel and Mod Value B for third channel cannot be the same value!" v - fi
if $tc==4 if $modvalue_a_4==$modvalue_b_4 v + error "Mod Value A for fourth channel and Mod Value B for fourth channel cannot be the same value!" v - fi fi
repeat $! l[$>]
    iw={w}
    ih={h}
    maxv={max($iw,$ih)}
    sd={min($iw,$ih)/max($iw,$ih)}
    sx={w<h?$sd:1}
    sy={h<w?$sd:1}
    msx={.5*1*$sx}
    msy={.5*1/$sy}
    center=1
    f 0 r {$interpolation?$subpixel*100:100}%,{$interpolation?$subpixel*100:100}%,100%,$tc
    ($lcmod_1,$lcmod_2,$lcmod_3,$lcmod_4)
    l.
        s x ti=$! remove_duplicates
        if $!!=$ti v + error "Invalid channel inputs!" v - fi a x
    endl
    repeat $tc sh[0] {i(#1,$>,0)} done rm[1]
    f[1] begin(ang=pi*($angle_1/180));ix=(x/w)-.5;iy=(y/h)-.5;ix*=$sx;iy*=$sy;IX=ix*cos(ang)-iy*sin(ang);IX+=!$center_1?$msx;IX*=$maxv;ix=IX;ix if $center_1||$modulo_method_1==3 abs[1] fi
        if $negate_1 negate[1] fi
        +[1] $value_shift_1
        modf[1] $modulo_method_1,$maxmodnum_1,{($maxmodnum_1-$modnum_1)/$maxmodnum_1}
        if $normalize_1 n[1] $modnum_1,$maxmodnum_1 fi
    f[2] begin(ang=pi*($angle_2/180));ix=(x/w)-.5;iy=(y/h)-.5;ix*=$sx;iy*=$sy;IY=ix*sin(ang)+iy*cos(ang);IY+=!$center_2?$msy;IY*=$maxv;iy=IY;iy if $center_2||$modulo_method_2==3 abs[2] fi
        if $negate_2 negate[2] fi
        +[2] $value_shift_2
        modf[2] $modulo_method_2,$maxmodnum_2,{($maxmodnum_2-$modnum_2)/$maxmodnum_2}
        if $normalize_2 n[2] $modnum_2,$maxmodnum_2 fi
    f[3] begin(ang=pi*($angle_3/180));ix=(x/w)-.5;iy=(y/h)-.5;ix*=$sx;iy*=$sy;IX=ix*cos(ang)-iy*sin(ang);IY=ix*sin(ang)+iy*cos(ang);IX+=!$center_3?$msx;IX*=$maxv;IY+=!$center_3?$msy;IY*=$maxv;ix=IX;iy=IY;if($center_3||$modulo_method_3==3,($diag?(abs(ix)+abs(iy)):abs(abs(ix)-abs(iy))),($diag?ix+iy:-ix+iy))
        if $negate_3 negate[3] fi
        +[3] $value_shift_3
        modf[3] $modulo_method_3,$maxmodnum_3,{($maxmodnum_3-$modnum_3)/$maxmodnum_3}
        if $normalize_3 n[3] $modnum_3,$maxmodnum_3 fi
    if $tc==4
        f[4] begin(ang=pi*($angle_4/180));ix=(x/w)-.5;iy=(y/h)-.5;ix*=$sx;iy*=$sy;IX=ix*cos(ang)-iy*sin(ang);IY=ix*sin(ang)+iy*cos(ang);IX+=!$center_4?$msx;IX*=$maxv;IY+=!$center_4?$msy;IY*=$maxv;ix=IX;iy=IY;if($center_4||$modulo_method_4==3,(!$diag?(abs(ix)+abs(iy)):abs(abs(ix)-abs(iy))),(!$diag?ix+iy:-ix+iy))
        if $negate_4 negate[4] fi
        +[4] $value_shift_4
        modf[4] $modulo_method_4,$maxmodnum_4,{($maxmodnum_4-$modnum_4)/$maxmodnum_4}
        if $normalize_4 n[4] $modnum_4,$maxmodnum_4 fi
    fi
    k[0]
    if $interpolation&&$subpixel>1 r $iw,$ih,100%,100%,$interpolation fi
    if $cs!=3
        if $cs!=0 sh 0,2 fi
        if $cs==1 ryb2rgb.
        elif $cs==2 cmy2rgb.
        elif $cs==4 hsi82rgb.
        elif $cs==5 hsl82rgb.
        elif $cs==6 hsv82rgb.
        elif $cs==7 lab82rgb.
        elif $cs==8 lch82rgb.
        elif $cs==9 yiq82rgb.
        elif $cs==10 yuv82rgb.
        elif $cs==11 ycbcr2rgb.
        elif $cs==12 ycbcrglic2rgb.
        elif $cs==13 xyz82rgb.
        elif $cs==14 yes82rgb.
        fi
        if $cs!=0 rm. fi
    else
        cmyk2rgb
    fi
endl done
#@cli rep_shape_brick: brick_width>0,brick_height>0,_mortar_width>0,_mortar_height>0,_outline>=0,_bevel>=0,_bevel_style= { 0=round | 1=inverse_round | 2=diamond },-1>=_shift_val>=1,_shift_direction= { 0=horizontal | 1=vertical },_flip_offset= { 0= Do Not Flip | 1= Flip },_subpixel_processing_level>=0
#@cli : 'brick_width' - Width of brick(s)
#@cli : 'brick_height' - Height of brick(s)
#@cli : '_mortar_width' - Filling width between brick(s)
#@cli : '_mortar_height' - Filling height between brick(s)
#@cli : '_outline' - Thickness of outline of brick(s)
#@cli : '_bevel' - Beveling of corners of brick(s)
#@cli : '_bevel_style' - Form of beveling of brick(s)
#@cli : '_shift_val' - Shift of bricks
#@cli : '_shift_direction' - Direction of shift
#@cli : '_flip_offset' - Determines which order the offset from original, to original.
#@cli : '_subpixel_level' - Degree of antialiasing of brick(s)\n
#@cli : Default values: '_mortar_width','_mortar_height','_outline',
rep_shape_brick:
skip ${3=10},${4=10},${5=0},${6=0},${7=0},${8=1},${9=0},${10=0},${11=0}
v -
    sublevel={abs($11)}
    sublevel+=1
    brick_width={abs($1)*$sublevel}
    brick_height={abs($2)*$sublevel}
    mortar_width={abs($3)*$sublevel}
    mortar_height={abs($4)*$sublevel}
    outline={abs($5)*$sublevel}
    bevel={abs($6)*$sublevel}
    bevel_style={abs($7)>2?2:abs($7)}
    shift_val=$8
    shift_direction=$9
    flip_offset=$10
    
    if $bevel_style==2 brick_bevel_style="Diamond"
    elif $bevel_style==1 brick_bevel_style="Inverse-Round"
    else brick_bevel_style="Round"
    fi
    
    if $shift_direction dir="Every two column has displacement of"
    else dir="Every two row has displacement of"
    fi
    
    if abs($shift_val) no={$shift_val*100} offset=""$dir" "$no""%" from original point."
    else offset="" 
    fi
    
    if $outline linethick={abs($5)} linethick=" with outline of "$linethick" px"
    else linethick="" 
    fi
v +

e[] "Generate brick of "$brick_width" px and "$brick_height" px with mortar width of "$mortar_width" px and mortar height "$mortar_height" px"$linethick". "$offset""

v +

if !(($brick_width&&$brick_height)||$bevel) v + error "Brick Area must be greater than 0!" v - fi

if $bevel
    if $bevel_style==0||$bevel_style==1 shape_circle {$bevel*2}
    else shape_diamond {$bevel*2} fi
    *. 2
    if $outline
        if $bevel_style==0||$bevel_style==1 shape_circle {($bevel+$outline)*2}
        else shape_diamond {floor($bevel+($outline*(cos(45/180*pi)+sin(45/180*pi))))*2} r. {($bevel+$outline)*2},{($bevel+$outline)*2},100%,100%,0,0,.5,.5 fi
        j[-1] [-2],.5~,.5~,0,0,.5,[-2]
        rm..
    fi
    s. x,2
    s[-2,-1] y,2
fi

{$brick_width<$bevel*2?$bevel*2:$brick_width},{$brick_height<$bevel*2?$bevel*2:$brick_height},1,1,1

if $outline expand_xy. $outline,0 fi +. 1

if $bevel if $bevel_style==1 negate[-5--2] +f[-5--2] i==2?0:1 fi fi

if $bevel
    if $bevel_style==1
    j[-5] [-9],1~,1~,0,0,1,[-4]
    j[-5] [-8],1~,0~,0,0,1,[-3]
    j[-5] [-7],0~,1~,0,0,1,[-2]
    j[-5] [-6],0~,0~,0,0,1,[-1]
    rm[-4--1]
    else
    j[-1] [-5],0~,0~
    j[-1] [-4],0~,1~
    j[-1] [-3],1~,0~
    j[-1] [-2],1~,1~
    fi
    rm[-5--2]
fi

mw={w}
mh={h}
mw/=2
mh/=2

r. {w+$mortar_width},{h+$mortar_height},100%,100%,0,0,{!$flip_offset},{!$flip_offset}

if $shift_val
    if $shift_direction +shift. 0,{($shift_val/2)*100}%,0,0,2 a[-2,-1] x if $flip_offset mirror. x fi
    else +shift. {($shift_val/2)*100}%,0,0,0,2 a[-2,-1] y if $flip_offset mirror. y fi
    fi
fi

if $sublevel-1 r2dx. {(1/$sublevel)*100}%,5 fi

v -
#@cli rep_z_render: _reverse_z_layer={ 0=first_layer | last_layer },_z_depth_value>0,_mirror_order={ 0=do_not_mirror | 1=mirror },_color_z_render={ 0=image_z_per_luminosity | 1=image_z_per_channel }
#@cli : Generates the resulting image based on z-map layer.\n
#@cli : '_reverse_z_layer' determines whether the first or last layer should be used to determine the "frame" to use.
#@cli : '_z_depth_value' can be described as how smooth the transition between images should be
#@cli : '_mirror_order' can be used to reorder the image transition
#@cli : '_color_z_render' sets whether the transition are separated by channels or not.
#@cli : Note: Try to use gradient as the z-layer.\n
#@cli : Default values: '_reverse_layer=0','_z_depth_value=255','_mirror_order=0','_color_z_render=0'\n
rep_z_render:
skip ${1=0},${2=255},${3=0},${4=0}
if $!<3 v + error "You need at least 3 images!" v - fi
if $1 rv[0,-1] rv[0,-2] fi
if !$4 to_gray[0] fi
rep_aspect_crop_2d[^0] {w#0},{h#0}
r[^0] {w#0},{h#0},100%,100%,3
a[^0] z
n[0] 0,$2
r[^0] 100%,100%,$2,100%,3
if $3 negate[0] fi
r[0] 100%,100%,100%,{s#-1}
f[0] i(#-1,x,y,i,c,3,1)
k[0]
#@cli rep_acb: (eq. to rep_autofill_coloring_book)
rep_acb: rep_autofill_coloring_book $*
#@cli rep_autofill_coloring_book: 0<threshold<1,_dilate_erode>=0,_color_mode={ 0=hard | 1= soft },0<=_alpha_threshold<1,_seed
#@cli : rep_autofill_coloring_book is used for automatically coloring pictures with lines.\n
#@cli : _threshold defines the value that is to be split into binary values. If it over _threshold, then it becomes 1.
#@cli : _dilate_erode defines the increase/decrease in line. Values over 0 implies increase in thickness while values less than 1 implies decrease in thickness.
#@cli : _color_mode defines whether the black line is going to be black or smooth.
#@cli : _alpha threshold defines the value of alpha to be cutoff by percentage
#@cli : _seed can be seen as premade random result.\n
#@cli : Default values: '_threshold=128','_dilate_erode=0','_color_mode=1','_alpha_threshold=0','_seed='
rep_autofill_coloring_book:
skip ${2=0},${3=1},${4=0},${5=}
if narg($5) srand $5 fi
repeat $! l[$>]
    sh 0,2
    if s#0==4 sh.. {s} vv={iv#-1} fi
    rep_acb_color[1] ${1-3}
    if s#0==4
        if ($4>0&&$4<1)&&$vv f. i>(iM*$4)?255:0 fi
    fi
    k[0]
endl done
rep_acb_color:
if $1<=0 v + error "threshold must be greater than 0" v - fi
if $1>=1 v + error "threshold must be less than 1" v - fi
to_gray n 0,1
if !iv#-1 v + error "Invalid Image!" v - fi
if $3 +store line fi
f i>=$1?1:0
if abs($2)
    if $2<0 dilate {abs($2)}
    else erode {abs($2)}
fi fi
label_fg 0,1
cv={iM}
min_t=1
max_t={round(16777215/$cv)}
nt={$min_t}
ntt={$max_t}
1
repeat $cv
    1,1,1,1,round(u($nt,$ntt))
    nt={iM#-1+1}
    ntt={$nt+$max_t}
    a[-2,-1] x
done
repeat $cv
    temp_1={i(round(u(1,$cv)))}
    temp_2={i(round(u(1,$cv)))}
    if $temp_1!=$temp_2
        f. i==$temp_1?$temp_2:(i==$temp_2?$temp_1:i)
    fi
done
{w},1,1,3,[i0#-1%256,floor(i0#-1/256)%256,floor(i0#-1/(256^2))]
map... . rm[-2,-1]
if $3
    +select_color 0,0,0
    inpaint_pde [1],0,0,0
    rm.
    $line
    f.. i*i0#-1
    rm.
fi
#@cli rep_regm: eq. to 'rep_reverse_engineer_gradient_map'. : (+)
rep_regm: rep_reverse_engineer_gradient_map $*
#@cli rep_reverse_engineer_gradient_map: _array_size>0
#@cli : The array size is used to define the depth of gradient map, if you're using float, then you need to scale image to something higher than 256. The only instruction is to have two images of same width and height dimension with the first one being a grayscale image.
#@cli : (eq. to 'rep_regm').\n
#@cli : Default values: '_array_size=256'
rep_reverse_engineer_gradient_map:
skip ${1=256}
if $!!=2 v + e "Only 2 images are acceptable!" v - fi
if w#0!=w#1||h#0!=h#1 v + e "Dimensions do not match!" v - fi
if s#0==3||s#0==4 if !{(i0==i1)&&(i1==i2)} rgb2hsl8.. channels.. 2 else to_gray.. fi #Lightness is at least continuous all-around within RGB model, hence why this is used.#
elif s#0==5 s c.. -3 rm.. cmyk2rgb.. rgb2hsl8.. channels.. 2 #Extracting Lightness from CMYKA model#
elif s#0==2||s#0>5 channels.. 0
fi
if im#-2<0 -.. {im#-2} fi
f.. round(i)
$1,1,1,{s#-1}
eval ${-math_lib}"
    const ar = $1 ;
    for(v=0,v<ar,v++,
            p=0;
            for(xx=0,xx<w#0,xx++,
                for(yy=0,yy<h#0,yy++,
                    if(i(#0,xx,yy)==v,
                        I(#2,v)+=I(#1,xx,yy);
                        p+=1;
                    );
                );
            );
            if(p,I(#2,v)/=p);
        );
"
#@cli rep_primelist:
#@cli : Return vector of boolean values up to the maximum image value rounded. Values are found by whether the argument number within vector is a prime.
rep_primelist:
maxn=0
repeat $! maxn={round(max($maxn,max(abs(im#$>),iM#$>)))} done
u {"
prime=vector"$maxn"(1);
for(k=0,k<="$maxn",k++,
        if(k<=3,prime[k]=k>1?1:0;
        ,if(!(k%2)||!(k%3),prime[k]=0;
            ,for(m=4,m<=k/2,m++, 
                    if(k%m==0, 
                            prime[k]=0;
                            break(); 
                       );
                );
            );
        );
    );
(prime)
"}
#@cli rep_prime_surface: _width,_height,_negate= { 0=do_not_negate | 1=negate },_mirror
#@cli : Creates a simple prime surface by combining rep_primelist and spiralbw. Due to the time-consuming nature, this command will only create a new prime surface once.
#@cli : Default values: '_width=last_image_width','_height=last_image_height'
rep_prime_surface:
skip ${1=w},${2=h},${3=1},${4=0}
spiralbw {abs($1)},{abs($2)}
l.
    if $3 negate. fi
    if abs($4)==1 mirror. x
    elif abs($4)==2 mirror. y
    fi
    f "begin(prime=["${-rep_primelist}"];);
    prime[round(abs(i))];
    "
endl
#@cli rep_ced8: eq. to 'rep_color_existence_distribution_rgb8'. : (+)
rep_ced8: rep_color_existence_distribution_rgb8 $*
#@cli rep_color_existence_distribution_rgb8: _bool_found= { 0=colour_nonexistence | colour_existence }
#@cli : This cli command is used to find which colors exist within the color lookup table generated from 8-bit positive-only colors that ranges from 0-255. Millions of colors that does not exist within a image can be picked from a image generated with this command.
#@cli : (eq. to 'rep_ced8').
rep_color_existence_distribution_rgb8:
nk=$1
nk_1={$nk?255:0}
nk_2={$nk?0:255}
repeat $! l[$>]
    256,256,256 eval.. "++i(#-1,R,G,B)" k.
    4096,4096,1,4,[x%256,y%256,floor(x/256)+(floor(y/256)*16),i(#-1,x%256,y%256,floor(x/256)+(floor(y/256)*16))?$nk_1:$nk_2] k.
endl done
#@cli rep_sdaxy: eq. to 'rep_shift_angle_distance'. : (+)
rep_sdaxy: rep_shift_distance_angle_xy $*
#@cli rep_shift_distance_angle_xy: _offset>0,_angle,_boundary_condition={ 0=None | 1=Neumann | 2=Periodic | 3=Mirror },_interpolation={ 0=nearest_neighbor | 1=linear }
#@cli : Offset images at angle and distance.
#@cli : (eq. to 'rep_sdaxy').\n
#@cli : _offset refers to the displacement of image.\n
#@cli : Default value: 'boundary_condition=3','interpolation=1'
rep_shift_distance_angle_xy:
skip ${3=3},${4=1}
angle=$2
rad_ang={(abs(360+$angle)%360)*(pi/180)}
Dis=$1
DisX={cos($rad_ang)*$Dis}
DisY={sin($rad_ang)*$Dis}
shift $DisX,$DisY,0,0,$3,$4
#@cli rep_dupsdaxy: eq. to 'rep_duplicate_by_shift_angle_distance_xy'. : (+)
rep_dupsdaxy: rep_duplicate_by_shift_distance_angle_xy $*
#@cli rep_duplicate_by_shift_distance_angle_xy: duplicates_count>=2,_radius_offset>0,_offset_angle,_keep_original={ 0=remove_original | 1=keep_original },_boundary_condition={ 0=None | 1=Neumann | 2=Periodic | 3=Mirror },_interpolation={ 0=nearest_neighbor | 1=linear }
#@cli : Creates copies of image at a distance from original point.
#@cli : (eq. to 'rep_dupsdaxy').\n
#@cli : _radius_offset refers to the distance the duplicates are from the original image. Each circular duplicates are of the same distance. radius_offset can be in percentage form, or in integer form. When it is in percentage form, the length of each duplicates offset is equal to the percentage of hypotenuse of image.
#@cli : _offset_angle refers to the starting angle the original duplicate is at. The primary duplicate starts from the right.\n
#@cli : Default value: '_radius_offset={sqrt(w^2+h^2)*.05}','_offset_angle=0','_keep_original=0','_boundary_condition=0','_interpolation=1'
rep_duplicate_by_shift_distance_angle_xy:
skip ${2={sqrt(w^2+h^2)*.05}},${3=0},${4=0},${5=1},${6=1}
if {$1<2} v + error "Invalid duplicate numbers!" fi
aang={360/$1}
repeat $1 +rep_sdaxy[0] $2,{$>*$aang+$3},$5,$6 done if {$4==0} rm[0] fi
#@cli rep_frblur: eq. to 'rep_fragment_blur'. : (+)
rep_frblur: rep_fragment_blur $*
#@cli rep_fragment_blur: duplicates_count>=2,_radius_offset>0,_offset_angle,_keep_original={ 0=remove_original | 1=keep_original },_boundary_condition={ 0=None | 1=Neumann | 2=Periodic | 3=Mirror },_interpolation={ 0=nearest_neighbor | 1=linear },_color_space={ 0=RGB | 1=SRGB | 2=RYB | 3=CMYK | 4=HCY | 5=HSI | 6=HSL | 7=HSV | 8=LAB | 9=LCH }
#@cli : Fragment Blur is a effect that originated from the Windows software named Paint.NET. Copies or "fragments" of images are superimposed over their respective images. Copies are redrawn at a distance, and starting copy starts from the right at 0.
#@cli : (eq. to 'rep_frblur').\n
#@cli : _radius_offset refers to the distance the duplicates are from the original image. Each circular duplicates are of the same distance. radius_offset can be in percentage form, or in integer form. When it is in percentage form, the length of each duplicates offset is equal to the percentage of hypotenuse of image.
#@cli : _offset_angle refers to the starting angle the original duplicate is at. The primary duplicate starts from the right.
#@cli : _keep_original options is to keep the original image as a duplicate without offsetting it.\n
#@cli : Default values: '_radius_offset=5%','_offset_angle=0','_keep_original=0','_boundary_condition=1','_interpolation=1','_color_space=0'
rep_fragment_blur:
skip ${2=5%},${3=0},${4=0},${5=1},${6=1},${7=0}
repeat $! l[$>]
    if ${is_percent\ $2} dist={abs($2)*(sqrt(w^2+h^2)/2)}
    else dist=abs($2) fi
    tcr=3
    convert_back=0
    if (s==3||s==4)&&$7
        convert_back=1
        if $7!=3
            sh 0,2
            if $7==1 rgb2srgb.
            elif $7==2 rgb2ryb.
            elif $7==4 rgb2hcy.
            elif $7==5 rgb2hsi.
            elif $7==6 rgb2hsl.
            elif $7==7 rgb2hsv.
            elif $7==8 rgb2lab.
            elif $7==9 rgb2lch.
            elif $7>9 v + error "Color Space ID not found!" v -
            fi
            rm.
        else
            if s==3 tcr+=1 rgb2cmyk
            elif s==4 s c,-3 rgb2cmyk.. a c
            fi
        fi
    fi
    if !(s==1||s==$tcr)
        sh {s-1}
        vv={iv#-1}
        rm.
        if $vv
            rep_frblur_1 $1,$dist,${3-6}
        else
            sh 0,{s-2}
            rep_frblur_2. $1,$dist,${3-6}
            rm.
        fi
    else
        rep_frblur_2 $1,$dist,${3-6}
    fi
    if $convert_back
        if $7!=3
            sh 0,2
            if $7==1 srgb2rgb.
            elif $7==2 ryb2rgb.
            elif $7==4 hcy2rgb.
            elif $7==5 hsi2rgb.
            elif $7==6 hsl2rgb.
            elif $7==7 hsv2rgb.
            elif $7==8 lab2rgb.
            elif $7==9 lch2rgb.
            elif $7>9 v + error "Color Space ID not found!" v -
            fi
            rm.
        else
            if s==4 cmyk2rgb
            elif s==5 s c,-4 cmyk2rgb.. a c
            fi
        fi
    fi
endl done
rep_frblur_1:
skip ${2={sqrt(w^2+h^2)*.05}},${3=0},${4=0},${5=1},${6=1}
sh {s-1}
mina={im#-1}
vr={iv#-1}
maxa={iM#-1}
rm.
if $mina<=0
    if ($vr==0)&&($mina==0)
        v + error "Cannot be used on empty alpha!" v -
    elif $mina<0
        v + error "Last channel is cannot contain values less than zero!" v -
    fi
fi
f i{s-1}?i:0
+channels {s-1}
f. i?1
a c
rep_dupsdaxy $1,$2,$3,$4,{abs($5)},$6
add
s c,-{s-1}
sh[0] 0,{s#0-2}
sh[0] {s}
f.. i/(i0#1?i0#1:1)
f. i/($1+($4?1:0))
rm[1-3]
rep_frblur_2:
skip ${2={sqrt(w^2+h^2)*.05}},${3=0},${4=0},${5=1},${6=1}
rep_dupsdaxy $1,$2,$3,$4,{$5!=0?abs($5):1},$6
ti=$!
add / $ti
#@cli rep_ncee: _distance>0,0<=_angle<=360,boundary_condition={ 0=none | 1=neumann | 2=periodic | 3=mirror },_interpolation={ 0=nearest_neighbor | 1=linear },_contrast>=0,_process_alpha={ 0=do_not_process_alpha | 1=process_alpha },_color_space,_blend_mode,0<=_blend_opacity[%]<=1
#@cli : Default value: 'boundary_condition=3','interpolation=1','contrast=1','process_alpha=1','color_space=0','blend_mode=1','blend_opacity=100%'
rep_ncee:
skip ${3=3},${4=1},${5=1},${6=1},${7=0},${8=1},${9=1}
-m "MergeChoice : $""=_mode" -MergeChoice "add","alpha","and","average","blue","burn","darken","difference","divide","dodge","exclusion","freeze","grainextract","grainmerge","green","hardlight","hardmix","hue","interpolation","lighten","lightness","linearburn","linearlight","luminance","multiply","negation","or","overlay","pinlight","red","reflect","saturation","screen","shapeaverage","softburn","softdodge","softlight","stamp","subtract","value","vividlight","xor","edges","error"
to_a
split_opacity
l[0]
if $7==1 rgb2ryb
elif $7==2 rgb2cmy
elif $7==3 rgb2cmyk
elif $7==4 rgb2hsi8
elif $7==5 rgb2hsl8
elif $7==6 rgb2hsv8
elif $7==7 rgb2lab8
elif $7==8 rgb2lch8
elif $7==9 rgb2yiq8
elif $7==10 rgb2yuv8
elif $7==11 rgb2xyz8
elif $7==12 rgb2yes8
elif $7==13 rgb2k18
elif $7==14 rgb2ohta8
fi
[0] l[1]
rep_dupsdaxy 2,$1,$2,0,$3,$4 tci={$!} f. "255-i"  add / $tci - 127.5 * {2*$5} + 127.5 cut 0,255
endl
if {$7!=3}
blend ${_mode{$8+1}},$9
if $7==1 ryb2rgb
elif $7==2 cmy2rgb
elif $7==4 hsi82rgb
elif $7==5 hsl82rgb
elif $7==6 hsv82rgb
elif $7==7 lab82rgb
elif $7==8 lch82rgb
elif $7==9 yiq82rgb
elif $7==10 yuv82rgb
elif $7==11 xyz82rgb
elif $7==12 yes82rgb
elif $7==13 k182rgb
elif $7==14 ohta82rgb
fi
elif {$7==3}
s c repeat 4 l[$>,{$!-1}] to_rgb blend ${_mode{$8+1}},$9 endl done a c cmyk2rgb
fi
endl
l[1]
if $6 rep_dupsdaxy 0,2,$1,$2,$3,$4 tai={$!} add / $tai fi
endl a c
#@cli pal: 0<="palette_id"<=223
#@cli : Inserts pre-made user-made palette or palette that are based off older consoles or software.\n
#@cli : - The following list contains valid inputs directly next to their name, but anything after dashes is only for information purpose. Equal sign means that the commands are identical. -\n
#@cli : pal 0 = pal bw -- Black & White
#@cli : pal 1 = pal rgb -- Red-Green-Blue
#@cli : pal 2 = pal b_rgb -- Black w/ Red-Green-Blue
#@cli : pal 3 = pal bw_rgb -- Black & White w/ Red-Green-Blue
#@cli : pal 4 = pal cmy -- Cyan-Magenta-Yellow
#@cli : pal 5 = pal cmyk -- Cyan-Magenta-Yellow-Black
#@cli : pal 6 = pal wcmyk -- White-Cyan-Magenta-Yellow-Black
#@cli : pal 7 = pal rgbcmy -- Red-Green-Blue w/ Cyan-Magenta-Yellow
#@cli : pal 8 = pal 1bitrgb -- 1 BPC RGB
#@cli : pal 9 = pal aurora -- Aurora by GrafxKid
#@cli : pal 10 = pal playpal -- PLAYPAL by id Tech 1/DOOM Engine
#@cli : pal 11 = pal srb2 -- Sonic Robo Blast 2
#@cli : pal 12 = pal famicube -- Famicube by Arne
#@cli : pal 13 = pal kens16 -- Andrew Kensler - 16 by Andrew Kensler
#@cli : pal 14 = pal kens32 -- Andrew Kensler - 32 by Andrew Kensler
#@cli : pal 15 = pal kens54 -- Andrew Kensler - 54 by Andrew Kensler
#@cli : pal 16 = pal aap12 -- AAP-Micro 12 by Adigun A. Polack
#@cli : pal 17 = pal aap16 -- AAP-16 by Adigun A. Polack
#@cli : pal 18 = pal aap64 -- AAP-64 by Adigun A. Polack
#@cli : pal 19 = pal aap128 -- AAP-SPLENDOR128 by Adigun A. Polack
#@cli : pal 20 = pal db8 -- DB8 by DawnBringer
#@cli : pal 21 = pal db16 -- DB16 by DawnBringer
#@cli : pal 22 = pal db32 -- DB32 by DawnBringer
#@cli : pal 23 = pal db_iso22 -- DB-ISO22 by DawnBringer
#@cli : pal 24 = pal dimwid17 -- DimWiddy 17 by DimWiddy
#@cli : pal 25 = pal dimwid23 -- DimWiddy 23 by DimWiddy
#@cli : pal 26 = pal edg4 -- Endesga-4 by Endesga
#@cli : pal 27 = pal edg8 -- Endesga-8 by Endesga
#@cli : pal 28 = pal edg16 -- Endesga-16 by Endesga
#@cli : pal 29 = pal edg32 -- Endesga-32 by Endesga
#@cli : pal 30 = pal edg36 -- Endesga-36 by Endesga
#@cli : pal 31 = pal edg64 -- Endesga-64 by Endesga
#@cli : pal 32 = pal juicy32 -- Juicy-32 by Real Juice
#@cli : pal 33 = pal juicy56 -- Juicy-56 by Real Juice
#@cli : pal 34 = pal xaiue -- XAIUE-22 by xaiue
#@cli : pal 35 = pal 15pdx -- 15P-DX by GrafxKid
#@cli : pal 36 = pal 20pdx -- 20P-DX by GrafxKid
#@cli : pal 37 = pal 24pdx -- 24P-DX by GrafxKid
#@cli : pal 38 = pal cabana64 -- Cabana-64 by Crabby
#@cli : pal 39 = pal fant16 -- Fantasy 16 by Brettybooop
#@cli : pal 40 = pal fant24 -- Fantasy 24 by Gabriel C.
#@cli : pal 41 = pal tf23 -- Tranquil Fantasy 23 by windfall.apples
#@cli : pal 42 = pal tfp39 -- Tranquility Plus 39 by windfall.apples
#@cli : pal 43 = pal faraway48 -- Faraway 48 by Igor Ferreira.
#@cli : pal 44 = pal fleja_m -- Fleja Master Palette by Fleja
#@cli : pal 45 = pal koni 32 -- Koni32 by Konic
#@cli : pal 46 = pal linearbasic -- Linear Color Palette Basic by GrafxKid
#@cli : pal 47 = pal vinelinear -- Vines Flexible Linear Ramps by Vine 2D
#@cli : pal 48 = pal arcade29 -- Arcade Standard 29 by GrafxKid
#@cli : pal 49 = pal arq16 -- ARQ16 by Endesga
#@cli : pal 50 = pal blk36 -- BLK 36 by BlackedIRL.
#@cli : pal 51 = pal blkneo -- BLK-NEO by BlackedIRL.
#@cli : pal 52 = pal brokefac -- Broken Facility by u/telepathic-melon
#@cli : pal 53 = pal bubblegum -- Bubblegum-16 by PineTreePizza
#@cli : pal 54 = pal cade15 -- Cade 15 by MonstersGoBoom
#@cli : pal 55 = pal calder8 -- Calder 8 by Philip Dodderige
#@cli : pal 56 = pal chrom16 -- Chromatic16 by DragonDePlatino
#@cli : pal 57 = pal cdbac -- CD-BAC by DimWiddy
#@cli : pal 58 = pal cgarne -- CG Arne by Arne Niklas Jansson
#@cli : pal 59 = pal cpcboy -- CPC BOY by Arne Niklas Jansson
#@cli : pal 60 = pal dino -- Dinoknight 16 by Retrospec
#@cli : pal 61 = pal 4l -- ||||-22 by ||||
#@cli : pal 62 = pal ftzeth16 -- FZT Ethereal 16 by Fusionnist
#@cli : pal 63 = pal gzxp -- GZXP by GrafxKid
#@cli : pal 64 = pal indc -- Indecision by Nelson SMG
#@cli : pal 65 = pal island16 -- Island Joy 16 by Kerrie Lake
#@cli : pal 66 = pal journey -- Journey by PineTreePizza
#@cli : pal 67 = pal juicy -- Juicy 17 by JerryPie
#@cli : pal 68 = pal oak -- Oak21 by Dan Oak
#@cli : pal 69 = pal nature55 -- Nature's Embrace 55 by GrafxKid
#@cli : pal 70 = pal nauris16 -- Nauris-16 by Nauris
#@cli : pal 71 = pal pear36 -- Pear 36 by PineTreePizza
#@cli : pal 72 = pal peach -- Peachy Pop 16 by Kerrie Lake
#@cli : pal 73 = pal pineapple32 -- Pineapple 32 by PineTreePizza
#@cli : pal 74 = pal resurrect -- Resurrect 32 by Kerrie Lake
#@cli : pal 75 = pal rosy42 -- Rosy 42 by PineTreePizza
#@cli : pal 76 = pal slso -- SLSO-CLR17 by Luis Miguel Maldonado
#@cli : pal 77 = pal softy15 -- Softy 15 by Eggy
#@cli : pal 78 = pal spec12 -- SPEC12 by Smalls
#@cli : pal 79 = pal starmancer -- Starmancer by Ominux Games
#@cli : pal 80 = pal sup8 -- Superb 8 by BigPotato
#@cli : pal 81 = pal superfuture -- SuperFuture25 by Endesga
#@cli : pal 82 = pal sweetie16 -- Sweetie 16 by GrafxKid
#@cli : pal 83 = pal taffy16 -- Taffy 16 by PineTreePizza
#@cli : pal 84 = pal todayland -- Todayland Palette V2 by GrafxKid
#@cli : pal 85 = pal vivid17 -- Vivid-17 by Irenaart
#@cli : pal 86 = pal voodo -- Voodo34 by Shamaboy
#@cli : pal 87 = pal zu32 -- Zughy 32 by Zughy
#@cli : pal 88 = pal enos16 -- ENOS16 by Endesga
#@cli : pal 89 = pal undertones -- Undertones-17 by Irenaart
#@cli : pal 90 = pal equpix15 -- Equpix 15 by Night
#@cli : pal 91 = pal night16 -- Night 16 by Night
#@cli : pal 92 = pal star29 -- Star 29 by Starlane
#@cli : pal 93 = pal star34 -- Star 34 by Starlane
#@cli : pal 94 = pal stilllife -- Still-Life by cure
#@cli : pal 95 = pal simjpc16 -- SimpleJPC-16 by Adigun A. Polack
#@cli : pal 96 = pal acid15 -- Acid 15 by pyrometal
#@cli : pal 97 = pal battery24 -- Battery 24 by Battery Jellyfish
#@cli : pal 98 = pal clump18 -- Clumpy 18 by windfall.apples
#@cli : pal 99 = pal cthul -- Cthulhu by Starlane
#@cli : pal 100 = pal crimso11 -- Crimso 11 by Crimso
#@cli : pal 101 = pal coptec -- Copper-Tech by Arne Niklas Jansson
#@cli : pal 102 = pal drz15 -- DRZ15A by Drazille
#@cli : pal 103 = pal eggy15 -- Eggy 15 by Eggy
#@cli : pal 104 = pal eroge -- Eroge-Copper by Arne Niklas Jansson
#@cli : pal 105 = pal europa -- Europa 16 by Starlane
#@cli : pal 106 = pal greyt -- GreyT-bit by Sam Keddy
#@cli : pal 107 = pal jewel -- Jewel by AprilSundae
#@cli : pal 108 = pal polar11 -- Polar 11 by Smalls
#@cli : pal 109 = pal sheltzy -- Sheltzy 32 by Please Check - NatTorpedia
#@cli : pal 110 = pal rube-goldberg -- Rube-Goldberg
#@cli : pal 111 = pal boomboom -- BoomBoom by Salman_Shh
#@cli : pal 112 = pal g8 -- Generic-8 by GrafxKid
#@cli : pal 113 = pal matriax8c -- Matriax8c by Davit Masia
#@cli : pal 114 = pal nt1h -- NT1H by NatTorpedia
#@cli : pal 115 = pal au15 -- Autum 15 by jok
#@cli : pal 116 = pal au15y -- Autum 15 [Yellow] by jok
#@cli : pal 117 = pal jerrypie22 -- JerryPie 22 by JerryPie
#@cli : pal 118 = pal naji16 -- Naji 16 by Naji
#@cli : pal 119 = pal blessing -- Blessing by Maruki
#@cli : pal 120 = pal crayola -- Crayola Blind
#@cli : pal 121 = pal easter -- Easter Island by skamocore
#@cli : pal 122 = pal fairy -- Fairy Tales by lollige
#@cli : pal 123 = pal fuzz4 -- Fuzzy Four by P-Tux7
#@cli : pal 124 = pal xdb_01 -- 0xdb-01 by 0xDB
#@cli : pal 125 = pal ocaso -- Ocaso by Minord
#@cli : pal 126 = pal pastel -- Oh Hell, Pastel by StarlitSunset
#@cli : pal 127 = pal pastel17 -- 17 Pastels by Irenaart
#@cli : pal 128 = pal pollen8 -- Pollen-8 by Conker
#@cli : pal 129 = pal nopal -- Nopal-12 by BlackedIRL.
#@cli : pal 130 = pal sy17 -- Sy17 by xaiue
#@cli : pal 131 = pal syz15 -- Syz15 by Fusionnist
#@cli : pal 132 = pal tui15 -- TUI-15 by Jeremy
#@cli : pal 133 = pal cave -- Cave by PineTreePizza
#@cli : pal 134 = pal psygnosia -- Psygnosia by Arne Niklas Jansson
#@cli : pal 135 = pal marshmellow32 -- MarshMellow32 by FormalPrejudice
#@cli : pal 136 = pal rabbit7 -- Rabbit 7 by GrafxKid
#@cli : pal 137 = pal finlal11 -- Finlal 11 by Finlal
#@cli : pal 138 = pal vinik24 -- Vinik 24 by Vinik
#@cli : pal 139 = pal ykb22 -- YKB-22 by yahkehbu
#@cli : pal 140 = pal graveyard -- Graveyard-21 by AprilSundae
#@cli : pal 141 = pal steamlords -- Steam Lords by Slynyrd
#@cli : pal 142 = pal aaprad -- AAP-RadiantXV by Adigun A. Polack
#@cli : pal 143 = pal aapmaj -- AAP-Majesty XVII by Adigun A. Polack
#@cli : pal 144 = pal daruda -- Daruda 22 by daruda
#@cli : pal 145 = pal rust6 -- Rust-6 by Blue Phoenix
#@cli : pal 146 = pal xaiue_rad -- XAIUE-Radiant by xaiue
#@cli : pal 147 = pal firestorm -- Firestorm by theartistjulian
#@cli : pal 148 = pal supernova7 -- SuperNova 7 by Blue Phoenix
#@cli : pal 149 = pal nyx8 -- NYX8 by Javier Guerrero
#@cli : pal 150 = pal oil6 -- OIL6 by GrafxKid
#@cli : pal 151 = pal sgm -- SGM-Palette 2 by s.g.m
#@cli : pal 152 = pal fornaxvoid1 -- Fornax Void I by Fornax Void
#@cli : pal 153 = pal fornaxvoid2 -- Fornax Void II by Fornax Void
#@cli : pal 154 = pal pixelwave -- Pixelwave by Reptorian
#@cli : pal 155 = pal spaceyeaster -- Spacey Easter by Spark Norris
#@cli : pal 156 = pal moon39 -- Moonlit-39 by theartistjulian
#@cli : pal 157 = pal pet8 -- Petite-8 by Adigun A. Polack
#@cli : pal 158 = pal pet8d -- Petite-8 Afterdark by Adigun A. Polack
#@cli : pal 159 = pal autochrome -- Autochrome 3 by Reptorian
#@cli : pal 160 = pal autochrome5 -- Autochrome 5 by Reptorian
#@cli : pal 161 = pal gb_d_1 -- GB Default #1
#@cli : pal 162 = pal gb_d_2 -- GB Default #2
#@cli : pal 163 = pal gb_andrade -- GB Andrade by Andrade
#@cli : pal 164 = pal gb_blue -- GB Blue Seni by WildLeoKnight
#@cli : pal 165 = pal gb_bz -- GB Blackzone
#@cli : pal 166 = pal gb_crimson -- GB Crimson by WildLeoKnight
#@cli : pal 167 = pal gb_didi -- GB Didi by DidiGameboy
#@cli : pal 168 = pal gb_dirty -- GB Dirty by WildLeoKnight
#@cli : pal 169 = pal gb_arne -- GB Arne by Arne
#@cli : pal 170 = pal gb_easy -- GB Easy by GrafxKid
#@cli : pal 171 = pal gb_forest -- GB Forest
#@cli : pal 172 = pal gb_hg -- GB Harsh Green by WildLeoKnight
#@cli : pal 173 = pal gb_lg -- GB Light Green by WildLeoKnight
#@cli : pal 174 = pal gb_nostalgia -- GB Nostalgia by WildLeoKnight
#@cli : pal 175 = pal gb_platinum -- GB Platinum by WildLeoKnight
#@cli : pal 176 = pal gb_kirokaze -- GB Kirokaze by Kirokaze
#@cli : pal 177 = pal gb_pj -- GB PJ
#@cli : pal 178 = pal gb_cyber -- GB Cyber
#@cli : pal 179 = pal gb_wish -- GB Wish by Kerrie Lake
#@cli : pal 180 = pal gb_grapefruit -- GB Grapefruit by GrafxKid
#@cli : pal 181 = pal gb_ice_cream -- GB Ice Cream by Kerrie Lake
#@cli : pal 182 = pal gb_rb -- GB Red_Blue
#@cli : pal 183 = pal gb_space -- GB Spacehaze by WildLeoKnight
#@cli : pal 184 = pal gb_choco -- GB Chocolate by GrafxKid
#@cli : pal 185 = pal gb_purpdawn -- GB Purple Dawn by WildLeoKnight
#@cli : pal 186 = pal gb_gray -- GB Gray by GrafxKid
#@cli : pal 187 = pal arne4 -- ARNE4 by Arne
#@cli : pal 188 = pal hal4 -- HallowPumpkin by WildLeoKnight
#@cli : pal 189 = pal amiga2600ntsc -- Amiga 2600 NTSC
#@cli : pal 190 = pal amiga2600pal -- Amiga 2600 PAL
#@cli : pal 191 = pal amiga2600secam -- Amiga 2600 SECAM
#@cli : pal 192 = pal amiga7800mess -- Amiga 7800 M.E.S.S by Nabuko78
#@cli : pal 193 = pal amiga7800 -- Amiga 7800
#@cli : pal 194 = pal amstrad_cpc -- Amstrad CPC
#@cli : pal 195 = pal apple2 -- Apple II
#@cli : pal 196 = pal cga -- CGA
#@cli : pal 197 = pal cga00 -- CGA Mode 0 [Low]
#@cli : pal 198 = pal cga01 -- CGA Mode 0 [High]
#@cli : pal 199 = pal cga10 -- CGA Mode 1 [Low]
#@cli : pal 200 = pal cga11 -- CGA Mode 1 [High]
#@cli : pal 201 = pal cga20 -- CGA Mode 2 [Low]
#@cli : pal 202 = pal cga21 -- CGA Mode 2 [High]
#@cli : pal 203 = pal c64_pepto -- Commodore 64 - https://www.pepto.de/projects/colorvic/2001/
#@cli : pal 204 = pal c64_colodore -- Commodore 64 - https://www.pepto.de/projects/colorvic/
#@cli : pal 205 = pal com_vic_20 -- Commodore VIC-20
#@cli : pal 206 = pal colecovision -- Colecovision
#@cli : pal 207 = pal jmp -- Japanese Machine Palette by Arne Niklas Jansson
#@cli : pal 208 = pal mac2 -- Macintosh II
#@cli : pal 209 = pal nes -- NES
#@cli : pal 210 = pal pico_8 -- PICO-8 by Lexaloffle Games
#@cli : pal 211 = pal risc -- RISC OS
#@cli : pal 212 = pal samcoupe -- SAM Coupe
#@cli : pal 213 = pal mo5 -- Thomson MO5
#@cli : pal 214 = pal vga -- VGA
#@cli : pal 215 = pal zx -- ZX Spectrum
#@cli : pal 216 = pal gnome32 -- GNOME 32
#@cli : pal 217 = pal elc22 -- Electronic Crayon 22
#@cli : pal 218 = pal chip16 -- Chip16
#@cli : pal 219 = pal msx -- MSX
#@cli : pal 220 = pal deluxepaint -- Deluxe Paint
#@cli : pal 221 = pal lms -- Legacy Paint
#@cli : pal 222 = pal msxp -- XP Paint
#@cli : pal 223 = pal vis -- Vista Paint
pal:
v - _gmic_s="$?" v +
_$0 $"*"
_pal:
v - mode="$1"
if {isnum("$1")} if {isint("$1")}
if {$1!=abs($1)} mode="i" else
mode=${arg\ 1+$1,bw,rgb,b_rgb,bw_rgb,cmy,cmyk,wcmyk,rgbcmy,1bitrgb,aurora,playpal,srb2,famicube,kens16,kens32,kens54,aap12,aap16,aap64,aap128,db8,db16,db32,db_iso22,dimwid17,dimwid23,edg4,edg8,edg16,edg32,edg36,edg64,juicy32,juicy56,xaiue,15pdx,20pdx,24pdx,cabana64,fant16,fant24,tf23,tfp39,faraway48,fleja_m,koni32,linearbasic,vinelinear,arcade29,arq16,blk36,blkneo,brokefac,bubblegum,cade15,calder8,chrom16,cdbac,cgarne,cpcboy,dino,4l,fzteth16,gzxp,indc,island16,journey,juice,oak,nature55,nauris16,pear36,peach,pineapple32,resurrect,rosy42,slso,softy15,spec12,starmancer,sup8,superfuture,sweetie16,taffy16,todayland,vivid17,voodo,zu32,enos16,undertones,equpix15,night16,star29,star34,stilllife,simjpc16,acid15,battery24,clump18,cthul,crimso11,coptec,drz15,eggy15,eroge,europa,greyt,jewel,polar11,sheltzy,rube_goldberg,boomboom,g8,matriax8c,nt1h,au15,au15y,jerrypie22,naji16,blessing,crayola,easter,fairy,fuzz4,xdb_01,ocaso,pastel,pastel17,pollen8,nopal,sy17,syz15,tui15,cave,psygnosia,marshmellow32,rabbit7,finlal11,vinik24,ykb22,graveyard,steamlords,aaprad,aapmaj,daruda,rust6,xaiue_rad,firestorm,supernova7,nyx8,oil6,sgm,fornaxvoid1,fornaxvoid2,pixelwave,spaceyeaster,moon39,pet8,pet8d,autochrome3,autochrome5,gb_d_1,gb_d_2,gb_andrade,gb_blue,gb_bz,gb_crimson,gb_didi,gb_dirty,gb_arne,gb_easy,gb_forest,gb_hg,gb_lg,gb_nostalgia,gb_platinum,gb_kirokaze,gb_pj,gb_cyber,gb_wish,gb_grapefruit,gb_ice_cream,gb_rb,gb_space,gb_choco,gb_purpdawn,gb_gray,arne4,hal4,amiga2600ntsc,amiga2600pal,amiga2600secam,amiga7800mess,amiga7800,amstrad_cpc,apple2,cga,cga00,cga01,cga10,cga11,cga20,cga21,c64_pepto,c64_colodore,com_vic_20,colecovision,jmp,mac2,nes,pico_8,risc,samcoupe,mo5,vga,zx,gnome32,elc22,chip16,msx,deluxepaint,lms,msxp,vis}
fi fi fi
v + e[^-1] "Create palette '"$mode"'." v -
_pal_$mode
_pal_i: if {$!==2} if {w#1==1||h#1==1} if {w#1>256||h#1>256} v + error "ERROR: There are no palette!" fi to_rgb. elif {w#0==1||h#0==1} if {w#0>256||h#0>256} v + error "ERROR: There are no palette!" fi rv to_rgb. else +autocrop _ia={w#2*h#2}  _ib={w#3*h#3} _ic={$_ia>$_ib} rm[^0-1] if {!$_ic} rv fi fx_extract_objects. 0,0,0,0,0,0,1 rm. if {h#1*w#1>255} v + error "ERROR: There are no palette!" fi if {h#1>w#1} rotate. 90 fi s. y,{h#1} autocrop. 0,0,0,0 a[^0] x to_rgb. fi else v + error "ERROR: You must have use only two images to use this command!" fi
_pal_srb2:(255,247,239,231,223,215,207,199,191,183,175,167,159,151,143,135,127,119,111,103,95,87,79,71,63,55,47,39,31,23,15,7,0,191,183,175,167,159,150,142,134,126,117,109,101,93,84,76,67,191,179,171,163,155,143,135,127,119,107,95,83,75,63,51,43,255,255,255,255,255,255,255,255,255,247,239,231,223,215,207,203,255,255,255,255,255,255,255,255,243,229,216,203,190,177,164,151,255,255,255,255,255,255,255,255,255,207,175,143,111,79,47,15,255,235,215,195,175,155,135,115,255,255,255,255,255,255,255,255,239,223,207,191,175,159,143,127,111,95,79,63,47,31,15,255,243,231,219,203,191,179,167,142,134,126,117,109,101,93,85,119,112,105,97,90,82,75,67,60,53,45,38,30,23,15,7,222,199,173,149,124,100,74,50,0,0,0,0,0,0,0,0,255,255,223,191,159,127,95,63,233,196,157,119,84,65,46,27,213,191,170,149,128,106,85,63,55,47,39,31,0,0,0,0,231,198,173,140,115,82,49,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,207,183,159,135,111,87,63,39^255,247,239,231,223,215,207,199,191,183,175,167,159,151,143,135,127,119,111,103,95,87,79,71,63,55,47,39,31,23,15,7,0,167,160,152,144,137,129,121,114,106,98,90,83,75,67,60,51,123,115,111,107,99,95,87,83,79,71,67,63,55,47,43,35,235,227,219,211,207,199,191,187,179,171,163,155,147,139,131,127,238,220,203,185,168,151,134,117,109,101,93,85,77,69,61,54,255,255,255,255,255,255,255,255,255,207,175,143,111,79,47,15,255,219,187,155,123,91,67,43,223,191,159,127,95,63,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,183,163,143,123,107,91,79,63,46,39,32,25,18,11,5,0,255,240,224,208,192,176,160,144,128,112,96,80,64,48,32,15,255,228,200,173,146,119,90,63,255,223,191,159,127,95,63,31,111,0,0,0,0,0,0,0,233,196,157,119,84,65,46,27,241,235,227,221,214,207,200,191,157,143,119,95,191,127,95,63,231,198,173,140,115,82,49,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,127,111,95,79,63,47,31,15^255,247,239,231,223,215,207,199,191,183,175,167,159,151,143,135,127,119,111,103,95,87,79,71,63,55,47,39,31,23,15,7,0,143,136,128,120,113,105,97,90,82,74,66,59,51,43,36,27,75,71,67,63,59,55,51,47,43,39,35,31,27,23,19,15,223,211,199,187,179,167,155,147,131,123,115,107,99,91,83,79,220,185,151,117,85,54,25,0,0,0,0,0,0,0,0,0,239,207,175,143,111,79,47,15,0,0,0,0,0,0,0,0,115,87,67,47,31,19,7,0,223,191,159,127,95,63,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,183,163,143,123,107,91,79,63,0,0,0,0,0,0,0,0,79,75,70,65,60,55,50,45,40,35,30,25,20,15,10,4,168,148,128,107,88,68,48,29,0,0,0,0,0,0,0,0,255,255,223,191,159,127,95,63,243,225,206,187,167,131,92,52,255,255,255,255,255,255,255,255,223,191,159,127,191,127,95,63,255,255,255,255,255,255,255,255,255,231,206,181,156,132,107,82,79,63,55,39,31,15,7,255,207,183,159,135,111,87,63,39)
_pal_famicube:(0,224,255,215,168,123,52,21,13,65,113,189,37,10,0,0,32,88,19,0,23,55,106,140,190,238,182,147,204,255,255,246,173,35,92,174,197,226,79,130,218,225,245,255,255,207,135,163,204,213,254,226,166,106,90,33,61,98,155,152,91,10,2,0^0,60,255,215,168,123,52,21,32,93,166,255,226,152,82,96,181,211,157,78,40,109,180,214,235,255,193,151,143,187,231,143,78,23,60,108,151,215,21,60,101,130,183,233,130,60,22,40,105,156,201,201,117,49,25,22,52,100,160,220,168,137,74,23^0,40,255,215,168,123,52,21,48,102,161,202,205,172,128,75,98,50,8,0,8,3,23,18,113,169,33,23,21,49,55,55,26,18,13,55,130,181,7,61,94,137,132,197,206,113,70,179,228,252,237,255,254,202,145,64,165,220,239,255,255,255,202,125)
_pal_dimwid17:(20,103,117,135,139,119,14,41,87,240,177,179,221,248,254,242,173^4,16,75,123,157,202,103,48,125,121,111,60,128,204,201,254,211^21,16,55,86,83,115,63,101,172,163,185,111,34,1,175,255,254)
_pal_edg4:(251,229,66,32^247,176,110,40^243,131,93,61)
_pal_juicy32:(51,102,153,204,255,229,178,127,61,7,79,135,216,255,255,178,80,37,16,10,18,56,107,184,255,145,53,62,25,91,165,211^14,36,76,137,204,114,53,24,6,0,31,77,157,199,235,214,178,124,84,57,29,71,122,197,255,224,130,106,40,53,82,116^34,53,76,124,181,57,53,75,61,14,27,54,97,89,140,96,71,73,72,71,53,102,153,216,242,204,130,178,102,130,139,132)
_pal_juicy56:(0,255,200,165,120,85,55,25,20,15,15,65,115,220,178,140,90,55,255,245,230,195,140,65,125,170,215,240,255,255,190,100,35,15,15,130,65,20,20,15,15,60,100,160,230,255,75,130,180,230,255,255,230,190,150,110^0,255,225,190,145,100,65,30,70,115,165,205,255,155,98,60,20,10,210,165,110,65,35,0,0,20,45,105,170,230,215,165,125,85,50,255,215,160,105,55,15,30,45,65,90,140,20,10,35,80,140,205,155,105,70,40^5,255,235,205,165,125,90,60,90,115,105,115,115,120,71,50,35,20,165,110,70,45,35,65,65,60,45,35,50,90,45,30,20,25,35,225,215,205,195,155,105,140,180,215,230,200,60,100,110,120,140,180,150,115,95,80)
_pal_20pdx:(23,71,120,177,235,104,169,217,235,82,129,188,235,14,4,1,85,23,90,177^13,71,120,185,255,41,68,126,208,60,96,139,205,76,110,163,222,121,178,227^32,87,118,166,218,62,0,0,0,20,49,87,147,88,146,195,183,71,23,41)
_pal_24pdx:(23,72,137,201,252,111,192,238,255,76,142,204,247,13,32,102,201,0,0,111,99,183,255,255^15,69,122,183,245,36,70,131,196,44,83,140,199,65,121,182,226,113,171,221,44,70,121,189^7,66,108,156,232,29,14,0,45,53,64,88,139,87,73,50,81,157,196,213,83,108,134,169)
_pal_vinelinear:(21,40,54,104,180,244,244,255,12,3,9,17,87,185,26,41,94,143,244,254,14,27,34,70,42,125,34,47,67,116,175,248,25,36,37,58,86,151^10,11,16,24,35,104,192,253,19,40,73,131,197,237,17,25,28,23,93,181,9,24,45,91,192,242,12,19,30,52,93,153,16,30,49,92,161,219^31,38,39,36,19,11,71,240,39,43,63,55,43,94,46,69,90,103,146,139,47,83,129,231,242,207,39,22,30,26,35,58,46,68,94,133,191,210)
_pal_blkneo:(0,18,41,70,107,144,193,255,255,242,195,153,114,63,178,229,255,255,140,66,34,20,15,10,29,50,53,62,80,140,180,133,93,67,255,255,255,178,114,165,221,255,120,39,0,0^0,23,50,75,116,158,217,255,204,159,114,76,51,31,46,66,110,165,255,188,137,102,74,42,26,45,74,131,185,218,131,76,47,30,224,170,105,60,28,38,55,102,250,211,170,135^0,61,104,140,178,221,242,255,208,170,137,105,82,60,105,134,175,213,155,127,110,91,76,51,89,137,178,209,235,255,239,191,140,102,145,110,90,64,47,57,69,117,230,203,165,130)
_pal_brokefac:(36,137,173,204,249,86,131,163,181,202,77,152,209,221,243,200,216,232,242,248,23,72,122,164,205,80,94,127,157,202,32,63,119,185,203,237,243,219,233,213^33,131,169,202,248,55,87,114,150,184,28,25,36,75,121,104,153,192,219,241,96,140,189,207,222,68,156,198,226,241,44,45,38,40,81,167,190,235,221,196^30,119,158,196,247,53,72,84,105,128,45,30,36,99,226,38,63,79,137,198,31,54,64,65,94,186,204,206,223,234,86,109,115,79,53,216,221,235,232,223)
_pal_bubblegum:(22,127,214,255,255,250,255,255,148,67,35,104,191,16,0,0^23,6,36,132,209,253,128,38,33,0,73,174,255,210,120,40^26,34,17,38,0,255,164,116,106,103,117,212,60,117,153,89)
_pal_cade15:(16,53,68,76,4,28,92,124,56,142,188,250,212,255,226^15,22,98,186,85,153,74,142,16,2,70,125,146,215,241^12,92,188,255,36,36,108,141,0,50,4,97,12,80,210)
_pal_calder8:(213,12,4,226,235,0,8,33,253,117,128^4,37,121,201,73,95,164,67,170,29,123^7,165,55,6,29,168,132,203,29,107,115)
_pal_chrom16:(0,144,255,128,255,160,255,255,255,32,64,0,48,0,160,255^0,176,255,0,0,80,128,192,255,172,255,48,112,208,0,96^0,176,255,24,0,0,0,128,0,0,0,112,176,255,224,255)
_pal_dino:(15,41,83,149,241,197,141,81,236,234,205,124,48,0,71,31^21,39,88,146,241,141,82,61,213,119,61,63,66,131,164,97^27,50,103,143,234,101,66,61,109,48,61,140,113,200,77,67)
_pal_indc:(255,143,68,40,47,75,69,242,212,227,148,87,156,209,180,109,44^244,204,148,87,43,59,124,182,110,66,53,37,101,180,186,140,27^224,203,137,99,92,156,214,61,51,98,61,59,108,140,71,50,46)
_pal_juice:(225,37,84,55,60,99,215,160,163,130,114,198,209,233,215,117,72^246,34,180,79,114,228,233,113,172,132,89,148,198,157,80,78,216^210,44,60,122,82,116,91,77,166,132,151,168,170,70,60,59,206)
_pal_oak:(248,179,98,174,238,255,177,82,24,32,37,116,86,62,56,129,163,69,110,175,255^135,73,26,57,141,244,211,127,40,67,118,241,149,76,18,74,119,75,120,188,255^61,91,142,172,255,159,110,85,58,74,119,235,217,146,50,84,95,78,128,197,255)
_pal_peach:(253,255,251,206,143,83,173,159,86,10,39,12,172,255,255,255^255,134,71,24,11,3,109,185,127,84,140,231,252,236,167,64^255,134,113,106,95,75,234,255,235,123,127,167,173,109,99,64)
_pal_resurrect:(255,251,232,131,195,240,246,252,227,171,150,98,62,11,11,30,145,251,251,205,158,122,107,144,168,234,143,77,77,72,48,143^255,107,59,28,36,79,129,167,200,148,108,85,53,94,138,188,219,255,185,104,69,48,62,94,132,173,211,155,101,74,225,248^255,29,59,93,84,120,129,144,150,122,108,101,70,101,143,115,105,134,84,61,57,69,117,169,243,237,255,230,180,119,185,226)
_pal_slso:(46,62,85,116,65,42,59,36,86,198,243,196,181,97,143,234,193^44,65,96,125,222,164,119,147,190,222,194,101,65,64,61,97,229^59,95,125,136,149,170,166,55,68,120,32,28,49,122,167,157,234)
_pal_superfuture:(16,24,96,183,255,44,150,219,248,192,28,54,112,255,77,97,210,255,228,255,0,0,69,156,255^8,30,111,217,255,25,80,147,218,192,51,105,195,255,77,27,53,128,187,0,255,128,16,9,0^32,51,171,238,255,35,57,87,172,192,45,67,59,0,77,50,47,0,64,64,225,255,126,204,255)
_pal_vivid17:(7,45,60,74,129,49,85,247,226,255,200,149,241,120,83,98,170^8,39,73,74,97,145,246,255,190,223,107,39,89,85,111,149,231^24,71,101,168,197,231,255,224,87,49,54,74,169,55,97,60,93)
_pal_voodo:(17,55,98,131,189,28,45,90,141,51,106,164,236,41,20,85,160,58,128,244,107,198,248,254,199,225,232,242,58,101,134,122,185,248^20,61,103,142,208,33,66,119,201,39,68,103,152,72,157,191,231,195,243,251,24,34,66,149,45,93,147,216,34,50,82,98,137,208^38,95,137,168,239,83,128,185,242,93,138,195,247,74,99,65,114,144,181,248,48,78,132,205,30,44,31,51,34,35,52,64,104,148)
_pal_undertones:(20,65,58,53,143,94,69,220,255,255,204,161,164,244,194,129,188^25,65,127,227,217,187,131,211,254,208,146,92,47,91,73,88,176^35,104,167,227,112,73,82,123,229,53,69,62,59,122,152,141,194)
_pal_star29:(142,241,83,44,13,27,37,45,54,92,255,179,116,68,32,186,236,123,81,50,108,211,63,33,96,175,53,34,17^36,34,31,18,18,29,49,71,109,196,255,179,122,76,40,93,129,57,37,22,50,60,38,24,163,239,109,68,31^54,60,40,29,25,70,105,141,192,249,255,225,165,108,56,47,47,42,32,21,150,242,104,57,61,73,50,43,25)
_pal_star34:(13,27,63,108,211,240,255,241,142,83,44,37,45,54,92,179,116,68,32,50,81,123,170,217,238,255,245,236,186,17,34,53,96,175^18,29,38,50,60,104,255,34,36,31,18,49,71,109,196,179,122,76,40,22,37,57,100,153,202,206,158,129,93,31,68,109,163,239^25,70,104,150,242,125,255,60,54,40,29,105,141,192,249,225,165,108,56,21,32,42,57,90,146,95,63,47,47,25,43,50,61,73)
_pal_stilllife:(63,122,209,224,93,104,179,18,81,40,155,168,204,199^40,34,59,127,133,193,232,38,49,111,139,228,130,181^17,34,39,138,58,39,104,21,85,184,255,212,24,129)
_pal_clump18:(112,178,224,236,236,179,123,96,73,38,70,86,120,181,231,219,184,153^26,42,132,188,229,203,130,26,17,24,32,76,127,197,232,192,131,78^106,121,172,210,255,255,254,188,115,29,27,56,83,155,183,158,71,46)
_pal_cthul:(29,165,240,82,43,30,59,82,125,199,184,126,143,229,206,133^37,229,250,165,98,48,66,123,193,255,203,141,169,222,160,71^49,197,253,147,103,58,81,146,193,243,216,161,144,187,97,49)
_pal_coptec:(0,38,53,96,137,90,145,255,244,191,197,158,95,220,110,22^0,33,82,116,137,168,217,255,205,181,136,91,67,57,169,81^0,68,120,138,137,178,243,255,114,136,67,71,81,45,44,221)
_pal_eroge:(13,79,130,197,240,251,255,190,123,116,65,50,42,125,193,232^8,43,91,145,189,223,249,187,178,173,128,83,35,56,108,153^13,36,49,84,119,155,228,178,78,187,160,95,73,64,91,115)
_pal_europa:(255,117,49,40,26,46,79,164,236,148,59,32,81,164,220,240^255,206,122,55,27,53,102,188,248,212,120,50,32,62,125,204^255,234,215,133,53,78,120,194,96,70,80,46,49,75,94,144)
_pal_greyt:(87,132,207,248,141,105,209,255^67,136,211,200,219,207,179,142^104,211,193,104,52,239,255,101)
_pal_sheltzy:(140,69,131,201,70,21,44,34,86,139,204,255,204,163,104,0,56,102,139,156,94,57,128,195,255,189,236,255,255,255,244,255^255,184,151,236,198,137,91,42,106,171,226,219,172,109,60,0,0,59,114,216,150,83,12,75,148,31,97,164,246,218,176,255^222,179,64,133,87,104,109,92,137,191,225,165,104,62,52,0,44,147,222,252,221,192,83,145,179,63,74,104,174,112,60,255)
_pal_rube_goldberg:(225,243,203,240,206,240,4,84,35^225,215,190,189,108,52,176,160,39^223,84,173,138,55,40,216,79,34)
_pal_crayola:(142,202,255,252,147,181,2,0,255^49,52,145,214,223,179,164,70,255^121,53,164,103,184,92,211,140,255)
_pal_easter:(246,230,134,121,245,237,204,202,57,141,129,104,157,126,86,5^246,209,134,71,225,195,141,101,212,188,132,96,192,167,120,22^191,209,145,101,122,141,134,126,185,210,171,134,133,136,100,37)
_pal_xdb_01:(32,64,150,220,255,156,217,242,247,82,195,48,99,157,74,153,255^32,64,150,220,255,31,122,187,237,202,217,153,226,182,82,54,89^64,96,150,192,230,46,70,104,124,100,76,156,212,255,194,151,136)
_pal_ocaso:(75,126,207,243,250,185,126,82,76,118,98,203,254,255,191,152,146^65,89,104,147,218,199,182,166,119,109,87,129,142,249,240,184,153^74,86,90,106,109,115,120,126,104,109,96,119,143,187,240,209,173)
_pal_pastel17:(55,104,94,37,17,105,239,248,163,109,161,249,200,247,155,28,89^50,53,107,113,171,246,240,229,231,68,101,139,76,145,156,134,177^84,111,130,140,190,191,215,116,92,66,87,183,102,82,130,109,94)
_pal_pollen8:(115,171,238,255,255,255,114,52^70,86,106,167,224,231,220,172^76,117,124,165,126,214,187,186)
_pal_nopal:(226,197,168,146,255,251,241,204,241,228,202,171^228,207,181,146,236,212,180,163,234,219,193,164^223,196,174,156,237,210,180,163,182,160,138,123)
_pal_sy17:(253,37,128,187,111,57,62,76,153,218,193,179,102,2,68,144,198^253,42,128,191,160,114,93,143,191,213,162,112,64,2,64,95,141^248,140,128,221,192,190,88,73,105,115,167,182,150,7,34,63,65)
_pal_syz15:(14,157,242,176,201,216,82,14,104,141,18,83,34,18,34^12,31,140,86,173,225,180,79,6,90,111,38,20,47,52^25,47,140,33,35,169,102,56,47,136,126,154,82,112,33)
_pal_vinik24:(0,111,154,197,139,195,165,102,154,194,124,65,141,190,104,56,110,147,110,85,157,126,93,67^0,103,154,204,85,136,147,96,79,141,161,106,98,149,172,112,105,161,170,112,159,158,104,52^0,118,151,184,128,144,165,146,80,117,192,163,104,92,169,128,98,103,120,100,127,153,114,85)
_pal_aapmaj:(244,177,109,49,15,118,173,212,234,151,88,43,56,44,108,118,196^243,137,83,35,12,38,80,147,207,171,120,64,78,153,220,56,84^222,97,79,44,15,38,35,34,90,57,42,36,150,204,213,88,113)
_pal_sgm:(17,51,68,102,102,119,187,221,255,255,255,255,255,187,119,170,221^17,17,34,68,85,136,187,221,238,238,204,136,51,68,68,102,153^17,51,85,119,187,255,255,255,255,153,102,119,136,102,85,102,136)
_pal_spaceyeaster:(32,79,207,101,127,225,125,54,154,78,171,229,182,66,53,132,65^28,75,42,54,123,77,72,48,26,43,162,109,133,25,24,201,132^52,88,131,125,141,157,152,66,95,97,191,174,207,47,68,245,175)
_pal_pet8:(10,24,39,71,123,197,239,248^10,27,47,83,128,175,217,244^16,34,59,78,70,99,141,228)
_pal_pet8d:(7,13,22,39,75,119,160,187^8,15,28,43,74,97,124,154^16,17,32,41,39,49,67,103)
_pal_gb_andrade:(32,94,174,227^32,103,186,238^32,69,137,192)
_pal_gb_blue:(208,112,60,28^244,176,52,8^248,192,104,32)
_pal_gb_crimson:(27,122,186,239^3,28,80,249^38,75,68,214)
_pal_gb_didi:(33,58,119,220^11,101,175,254^46,90,104,207)
_pal_gb_dirty:(196,139,77,31^207,149,83,31^161,109,60,31)
_pal_gb_hg:(23,55,106,190^40,109,180,235^8,3,23,113)
_pal_gb_lg:(244,104,30,5^251,207,145,36^208,104,120,31)
_pal_gb_nostalgia:(208,160,112,64^208,168,128,80^88,64,40,16)
_pal_gb_platinum:(24,80,168,224^48,120,192,240^48,104,176,232)
_pal_gb_wish:(98,117,96,139^46,80,143,229^76,232,207,255)
_pal_gb_space:(11,107,204,248^6,31,52,227^48,177,149,196)
_pal_gb_gray:(43,112,168,224^43,107,159,219^38,102,148,205)
_pal_gb_purpdawn:(0,45,154,238^27,117,123,253^46,126,188,237)
_pal_autochrome3:(88,31,223^66,106,85^147,56,41)
_pal_autochrome5:(88,31,223,126,13^66,106,85,141,203^147,56,41,227,163)
_pal_rabbit7:(212,232,236,79,170,59,92^117,196,236,164,211,50,97^100,152,224,165,149,74,130)
_pal_nt1h:(255,172,70,21,34,66,101,143,189,171,139,86,56,255,237,222,194,75,138,188,228,255,156,94,57,25^255,246,198,137,47,93,144,185,223,209,171,106,58,241,198,153,94,0,0,19,54,154,216,150,83,21^255,147,87,104,70,105,139,172,204,210,191,137,99,141,96,60,34,59,71,52,54,112,252,221,192,127)
_pal_moon39:(126,159,188,42,42,44,38,131,52,36,54,33,40,26,54,32,71,125,88,76,61,56,63,21,113,112,104,127,101,53,128,103,66,40,36,17,104,137,39^177,211,221,129,106,90,103,204,166,75,105,65,79,51,61,63,71,219,110,103,104,96,112,84,184,181,172,205,169,119,209,178,129,98,84,54,179,221,72^213,249,244,152,152,122,103,194,196,103,73,89,107,70,84,86,76,206,103,108,110,98,122,80,161,157,156,173,154,105,174,155,124,107,103,82,156,181,97)
_pal_koni32:(0,11,22,34,43,48,52,73,164,255,242,204,245,166,153,115,77,70,140,242,255,179,112,64,31,33,39,65,109,137,187,255^0,10,21,38,64,101,168,242,255,242,165,122,64,58,83,55,42,52,46,97,168,223,165,124,80,62,47,69,112,139,189,255^0,13,36,64,87,102,112,90,99,64,63,71,37,58,72,88,73,106,184,218,212,255,250,255,204,166,102,88,120,140,191,255)
_pal_15pdx:(110,187,223,236,131,39,23,4,23,129,253,199,135,70,32^50,87,146,210,168,114,59,104,161,219,249,178,113,63,23^50,53,69,116,22,36,71,148,169,205,241,149,91,60,8)
_pal_island16:(13,79,130,197,240,251,255,190,123,116,65,50,42,125,193,232^8,43,91,145,189,223,249,187,178,173,128,83,35,56,108,153^13,36,49,84,119,155,228,178,78,187,160,95,73,64,91,115)
_pal_arcade29:(241,255,159,255,240,241,201,151,87,114,35,10,48,47,105,51,50,40,201,108,255,229,23,150,88,42,185,126,65^240,77,30,196,108,194,126,63,20,203,133,75,197,126,222,165,89,35,92,52,170,93,25,165,108,55,165,99,47^238,77,49,56,0,132,79,63,46,37,49,77,173,131,255,255,226,123,209,157,188,172,27,171,121,71,136,82,47)
_pal_cabana64:(0,167,103,71,48,58,90,195,241,253,255,255,240,224,178,130,255,255,169,109,69,104,149,218,242,255,255,255,221,192,144,96,74,210,163,97,51,63,97,143,210,242,218,150,57,34,52,34,16,105,162,113,67,44,8,27,91,182,209,170,76,28,13,10^0,154,84,53,32,22,38,104,110,164,226,216,157,105,78,51,255,252,128,71,45,11,28,72,118,175,245,118,57,34,12,1,74,204,146,84,47,13,24,75,145,237,255,218,174,116,58,20,16,132,188,159,86,50,67,116,190,255,255,255,212,131,57,37^0,95,31,19,26,3,11,10,3,20,44,135,81,38,44,20,255,219,90,52,37,118,188,221,255,252,246,147,57,20,71,25,74,243,212,118,58,118,148,236,255,255,254,255,255,255,241,120,16,156,197,147,85,51,57,74,97,140,204,216,148,147,111,99)
_pal_journey:(5,17,59,105,156,212,245,255,255,255,214,148,66,34,16,37,61,115,189,237,255,255,198,119,66,44,21,5,14,12,3,20,72,120,176,250,199,146,91,57,36,14,19,26,16,40,61,248,240,207,143,82,15,53,100,155,212,237,255,212,156,105,69,45^9,5,6,23,50,100,161,207,122,65,26,0,0,0,7,8,17,38,64,123,184,245,216,176,144,100,60,33,4,11,39,68,139,215,255,255,212,143,83,41,20,15,34,70,144,192,255,255,194,150,87,41,2,0,0,14,30,76,151,102,52,27,12,0^20,36,58,73,71,83,93,142,125,125,136,122,78,41,38,44,50,61,53,57,74,64,49,42,88,94,74,55,33,66,105,145,212,255,241,255,225,184,125,70,44,44,67,107,142,116,110,184,151,140,101,75,46,59,76,62,60,64,87,47,26,34,40,46)
_pal_nauris16:(140,88,62,154,215,245,192,100,228,157,210,112,126,52,23,31^143,69,33,99,155,237,199,125,148,48,100,55,196,133,67,14^174,99,55,72,125,186,65,52,58,59,113,127,193,157,75,28)
_pal_nature55:(27,254,226,168,105,255,231,190,122,208,151,90,255,235,205,104,37,27,123,56,41,37,94,32,38,48,163,120,84,239,182,116,67,255,234,175,117,235,177,227,177,116,62,223,156,97,42,184,117,82,253,204,145,93,56^20,147,83,36,27,191,130,83,50,128,78,48,201,138,224,178,125,78,236,170,119,68,215,150,98,51,204,141,88,161,108,68,47,178,109,64,34,113,65,196,142,100,63,221,170,123,78,216,157,106,245,193,134,91,56^30,90,34,36,40,137,90,64,28,88,73,63,92,6,66,41,44,68,191,145,126,108,239,205,171,134,255,222,192,206,190,141,101,178,157,127,74,113,92,176,142,127,100,154,116,71,50,209,169,152,241,190,146,110,76)
_pal_colecovision:(0,33,66,41,90,156,57,214,255,222,214,24,214,206,255^0,173,214,49,115,41,231,57,115,231,214,123,49,206,255^0,24,90,214,255,24,247,33,90,41,123,16,231,206,255)
_pal_fornaxvoid1:(122,117,112,108,103,99,94,89,85,80,76,71,66,62,57,53,47,55,63,70,78,86,93,101,109,116,124,132,139,147,155,162,0,7,13,20,26,32,39,45,52,58,64,71,77,84,90,96,240,224,208,192,176,160,144,128,112,96,80,64,48,32,16,0,255,242,230,218,206,194,181,169,157,145,133,120,108,96,84,72,243,231,219,208,196,185,173,161,150,138,127,115,103,92,80,69,255,255,255,255,255,255,255,255,224,192,160,128,96,64,48,32,216,196,176,157,137,117,98,78,58,39,19,0,0,0,0,0,255,238,221,204,187,170,153,136,119,102,85,68,51,34,17,0,0,5,9,13,18,22,26,30,35,39,43,47,52,56,60,64,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,238,221,204,187,170,153,136,119,102,85,68,51,34,17,0,0,16,31,46,61,76,91,106,122,137,152,167,182,197,212,227,255,242,229,217,204,192,176,160,128,96,80,64,48,40,32,16,166,178,189,200,211,222,233,244,255,218,182,145,109,72,36,0,227,211,196,181,166,151,136,121,105,90,75,60,45,30,15,0^37,42,47,51,56,60,65,70,74,79,83,88,93,97,102,106,222,214,206,198,190,182,174,166,158,150,142,134,126,118,110,102,204,195,186,177,168,160,151,142,133,124,116,107,98,89,80,72,240,233,226,220,213,206,200,193,186,180,173,166,160,153,146,140,255,242,230,218,206,194,181,169,157,145,133,120,108,96,84,72,142,136,130,124,118,112,106,100,94,88,82,76,70,64,58,53,216,194,172,150,128,96,64,0,0,0,0,0,0,0,0,0,216,196,176,157,137,117,98,78,58,39,19,0,0,0,0,0,43,40,38,36,34,32,30,28,25,23,21,19,17,15,13,11,0,5,9,13,18,22,26,30,35,39,43,47,52,56,60,64,255,240,225,210,195,180,165,150,136,121,106,91,76,61,46,32,160,157,155,153,151,149,147,145,142,140,138,136,134,132,130,128,0,9,18,27,36,45,54,63,72,81,90,99,108,117,126,134,192,172,153,134,115,96,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,211,196,181,166,151,136,121,105,90,75,60,45,30,15,0^255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,235,242,249,255,255,255,255,255,255,255,255,255,255,255,255,255,204,208,211,215,218,221,225,228,232,235,238,242,245,249,252,255,240,233,226,220,213,206,200,193,186,180,173,166,160,153,146,140,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,224,192,160,128,96,64,48,32,255,247,240,232,225,217,210,202,195,187,180,173,145,118,91,64,255,246,238,229,221,212,204,195,187,178,170,161,153,144,136,128,0,17,34,51,68,85,102,119,136,153,170,187,204,221,238,255,255,240,225,210,195,180,165,150,136,121,106,91,76,61,46,32,255,246,238,229,221,212,204,195,187,178,170,161,153,144,136,128,0,17,34,51,68,85,102,119,136,153,170,187,204,221,238,255,255,255,255,255,255,255,255,255,232,208,192,128,96,80,64,48,255,223,191,159,127,95,63,31,0,10,19,28,37,46,55,64,255,240,225,210,195,180,165,150,136,121,106,91,76,61,46,32)
_pal_fornaxvoid2:(32,48,64,96,128,160,192,224,255,255,255,255,255,255,255,255,16,32,40,48,64,80,96,128,160,176,192,204,217,229,242,255,69,80,92,103,115,127,138,150,161,173,185,196,208,219,231,243,255,238,221,204,187,170,153,136,119,102,85,68,51,34,17,0,32,64,128,192,255,255,255,255,0,0,0,0,1,128,192,232,0,0,0,0,32,64,128,160,192,216,36,72,109,145,182,218,0,0,0,0,0,1,32,64,128,192,224,255,0,0,0,0,0,17,34,51,68,85,102,119,136,153,170,187,204,221,238,255^0,0,0,0,0,0,0,0,0,64,96,128,150,172,194,216,0,0,0,0,0,0,0,0,0,48,96,115,134,153,172,192,53,58,64,70,76,82,88,94,100,106,112,118,124,130,136,142,154,155,156,158,159,161,162,163,165,166,168,169,170,172,173,175,0,0,0,0,0,128,192,232,32,64,128,192,255,255,255,255,0,0,0,0,32,64,128,160,192,216,0,0,0,0,0,0,32,64,128,192,224,255,32,64,128,192,224,255,25,51,76,102,0,17,34,51,68,85,102,119,136,153,170,187,204,221,238,255^32,48,64,96,128,160,192,224,255,255,255,255,255,255,255,255,48,64,80,96,128,192,208,232,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,250,244,238,233,227,221,216,210,204,199,193,187,182,176,170,0,0,0,0,0,128,192,232,0,0,0,0,0,128,192,232,64,128,192,255,255,255,255,255,255,255,219,183,146,110,73,37,32,64,128,192,224,255,0,0,0,0,0,0,230,205,179,154,0,17,34,51,68,85,102,119,136,153,170,187,204,221,238,255)
_pal_vga:(0,0,0,0,170,170,170,170,85,85,85,85,255,255,255,255,16,32,53,69,101,117,138,154,186,202,223,239,0,65,130,190,255,255,255,255,255,255,255,255,255,190,130,65,1,1,1,1,1,0,0,0,130,158,190,223,255,255,255,255,255,255,255,255,255,223,190,158,130,130,130,130,130,130,130,130,186,202,223,239,255,255,255,255,255,255,255,255,255,239,223,202,186,186,186,186,186,186,186,186,0,28,57,85,113,113,113,113,113,113,113,113,113,85,57,28,0,0,0,0,0,0,0,0,57,69,85,97,113,113,113,113,113,113,113,113,113,97,85,69,57,57,57,57,57,57,57,57,81,89,97,105,113,113,113,113,113,113,113,113,113,105,97,89,81,81,81,81,81,81,81,81,0,16,32,49,65,65,65,65,65,65,65,65,65,49,32,16,0,0,0,0,0,0,0,0,32,40,49,57,65,65,65,65,65,65,65,65,65,57,49,40,32,32,32,32,32,32,32,32,45,49,53,61,65,65,65,65,65,65,65,65,65,61,53,49,45,45,45,45,45,45,45,45^0,0,170,170,0,0,85,170,85,85,255,255,85,85,255,255,16,32,53,69,101,117,138,154,186,202,223,239,0,0,0,0,0,0,0,0,0,65,130,190,255,255,255,255,255,255,255,255,255,190,130,65,130,130,130,130,130,130,130,130,130,158,190,223,255,255,255,255,255,255,255,255,255,223,190,158,186,186,186,186,186,186,186,186,186,202,223,239,255,255,255,255,255,255,255,255,255,239,223,202,0,0,0,0,0,0,0,0,0,28,57,85,113,113,113,113,113,113,113,113,113,85,57,28,57,57,57,57,57,57,57,57,57,69,85,97,113,113,113,113,113,113,113,113,113,97,85,69,81,81,81,81,81,81,81,81,81,89,97,105,113,113,113,113,113,113,113,113,113,105,97,89,0,0,0,0,0,0,0,0,0,16,32,49,65,65,65,65,65,65,65,65,65,49,32,16,32,32,32,32,32,32,32,32,32,40,49,57,65,65,65,65,65,65,65,65,65,57,49,40,45,45,45,45,45,45,45,45,45,49,53,61,65,65,65,65,65,65,65,65,65,61,53,49^0,170,0,170,0,170,0,170,85,255,85,255,85,255,85,255,16,32,53,69,101,117,138,154,186,202,223,239,255,255,255,255,255,190,130,65,0,0,0,0,0,0,0,0,0,65,130,190,255,255,255,255,255,255,255,255,255,223,190,158,130,130,130,130,130,130,130,130,130,158,190,223,255,255,255,255,255,255,255,255,255,239,223,202,186,186,186,186,186,186,186,186,186,202,223,239,255,255,255,255,113,113,113,113,113,85,57,28,0,0,0,0,0,0,0,0,0,28,57,85,113,113,113,113,113,113,113,113,113,97,85,69,57,57,57,57,57,57,57,57,57,69,85,97,113,113,113,113,113,113,113,113,113,105,97,89,81,81,81,81,81,81,81,81,81,89,97,105,113,113,113,113,65,65,65,65,65,49,32,16,0,0,0,0,0,0,0,0,0,16,32,49,65,65,65,65,65,65,65,65,65,57,49,40,32,32,32,32,32,32,32,32,32,40,49,57,65,65,65,65,65,65,65,65,65,61,53,49,45,45,45,45,45,45,45,45,45,49,53,61,65,65,65,65)
_pal_amiga7800mess:(1,46,61,89,119,132,160,183,205,216,221,224,234,240,246,255,255,254,255,254,255,255,255,255,255,255,216,187,153,119,84,65,71,114,160,179,200,228,252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,243,231,212,191,176,157,122,95,75,127,179,200,223,237,251,252,254,255,255,255,255,255,255,255,254,255,255,255,255,251,239,228,215,202,187,170,149,129,103,74,73,92,101,122,146,157,166,177,188,196,206,213,218,222,225,230,205,192,176,159,152,144,128,113,101,90,79,68,37,9,6,5,12,32,54,70,87,97,109,123,137,145,157,167,178,187,195,211,208,195,175,155,147,141,112,86,77,73,51,29,29,30,29,29,2,2,1,2,2,2,1,1,27,62,101,118,138,155,177,199,208,200,182,162,134,125,115,82,78,55,40,25,15,4,0,0,22,28,35,40,46,58,71,81,93,113,133,141,151,165,184,185,242,232,219,206,194,184,171,158,139,121,108,96,72,69,57,44,70,76,85,109,144,172,194,209,223,231,238,247,253,255,255,255,254,254,254,254,252,249,237,225,208,191,181,171,141,113,88,65^1,46,61,89,119,132,160,183,205,216,221,224,234,240,246,255,255,255,249,244,230,216,208,197,171,145,128,104,79,55,40,32,25,30,37,57,81,106,130,140,153,174,196,197,198,214,228,231,218,209,194,178,164,152,138,121,110,98,78,54,47,43,36,31,23,26,29,33,37,60,82,96,112,127,144,158,170,185,200,202,184,175,165,157,141,126,114,103,90,77,61,45,24,3,1,1,3,4,14,35,59,69,79,90,101,109,118,131,144,156,170,182,211,203,190,178,170,160,146,131,117,104,90,76,61,48,38,30,8,28,49,66,83,93,105,119,133,141,152,164,175,184,193,209,237,233,228,223,220,216,198,182,169,154,134,113,92,73,56,41,76,93,112,132,153,171,188,207,220,225,231,234,237,240,243,246,255,255,255,255,236,227,217,205,186,164,147,127,117,107,84,72,64,83,102,120,140,152,165,175,187,207,227,235,245,255,255,255,255,252,239,225,214,204,191,178,159,141,127,113,86,82,68,53,58,63,70,88,118,140,161,176,190,198,205,218,230,242,249,249,212,203,198,193,183,173,160,147,133,119,100,81,58,37,31,26^1,46,61,89,119,132,160,183,205,216,221,224,234,240,246,255,172,153,120,86,81,77,60,29,29,30,23,24,16,6,1,0,4,17,30,33,34,32,31,37,45,56,84,89,109,136,162,171,209,196,179,158,139,125,105,85,75,63,43,36,15,16,13,14,4,13,23,25,28,57,85,97,99,126,143,159,173,190,206,222,236,234,232,230,226,218,206,195,182,169,154,137,116,96,75,55,109,136,145,166,190,201,210,221,232,240,249,255,255,254,254,255,255,255,255,255,255,255,255,255,255,255,237,222,213,202,165,131,121,141,163,179,196,207,218,232,247,254,255,255,254,255,255,255,255,254,254,254,254,255,254,255,236,217,207,199,172,147,119,92,90,111,132,156,182,202,221,244,255,254,255,254,255,255,255,254,208,200,182,162,134,125,115,82,77,55,39,25,15,4,0,0,0,0,1,1,0,12,25,35,47,67,87,95,105,150,151,151,171,121,108,84,83,73,60,47,28,10,1,0,0,0,0,0,9,10,9,9,8,11,32,47,61,69,77,101,125,164,197,212,152,131,113,96,92,89,78,68,58,48,39,31,19,8,5,3)
_pal_amiga7800:(0,17,34,51,68,85,102,119,136,153,170,187,204,221,238,255,255,255,247,230,213,196,179,162,145,128,111,94,77,60,43,26,49,66,83,100,117,134,151,168,185,202,219,236,253,255,255,255,255,255,255,255,249,232,215,198,181,164,147,130,113,96,79,62,63,80,97,114,131,148,165,182,199,216,233,250,255,255,255,255,255,255,255,255,238,221,204,187,170,153,136,119,102,85,68,51,29,46,64,81,98,115,132,149,166,183,200,217,233,251,255,255,255,240,223,206,189,172,155,138,121,104,87,70,53,36,19,2,0,0,8,25,42,59,76,93,110,127,144,161,178,195,212,229,206,189,172,155,138,121,104,87,70,53,36,19,2,0,0,0,0,0,0,0,6,23,40,57,74,91,108,125,142,159,176,193,192,175,158,141,124,107,90,73,56,39,22,5,0,0,0,0,0,0,0,0,16,33,50,67,84,101,118,135,152,169,186,203,225,208,191,174,157,140,123,106,89,72,55,38,21,4,0,0,0,14,31,48,65,82,99,116,133,150,167,184,201,218,235,252,255,255,246,229,212,195,178,161,144,127,110,93,76,59,42,25^0,17,34,51,68,85,102,119,136,153,170,187,204,221,238,255,247,245,228,211,194,177,160,143,126,109,92,75,58,41,24,7,0,6,23,40,57,74,91,108,125,142,159,176,193,210,227,244,229,212,195,178,161,144,127,110,93,76,59,42,25,8,0,0,0,0,0,15,32,49,66,83,100,117,134,151,168,185,202,219,216,199,182,165,148,131,114,97,80,63,46,29,12,0,0,0,0,0,0,16,33,50,67,84,101,118,135,152,169,186,203,220,232,215,198,181,164,147,130,113,96,79,62,45,28,11,0,0,0,10,27,44,61,78,95,112,129,146,163,180,197,214,231,248,255,248,231,214,197,180,163,146,129,112,95,78,61,44,27,10,26,43,60,77,94,111,128,145,162,179,196,213,230,247,255,255,255,255,255,240,223,206,189,172,155,138,121,104,87,70,53,36,39,56,73,90,107,124,141,158,175,192,209,226,243,255,255,255,255,255,255,239,222,205,188,171,154,137,120,103,86,69,52,35,23,40,57,74,91,108,125,142,159,176,193,210,227,244,255,255,255,245,228,211,194,177,160,143,126,109,92,75,58,41,24,7^0,17,34,51,68,85,102,119,136,153,170,187,204,221,238,255,151,131,111,94,77,60,43,26,9,0,0,0,0,0,0,0,0,0,0,0,0,0,10,27,44,61,78,95,112,133,156,178,218,196,174,152,131,115,98,81,64,47,30,13,0,0,0,0,3,15,27,43,60,77,94,111,128,145,162,179,200,222,239,244,243,238,233,228,228,211,194,177,160,143,126,109,92,76,65,53,92,104,116,132,149,166,183,200,217,234,235,235,236,235,239,244,248,247,247,247,247,247,247,242,225,208,191,174,157,140,125,113,104,124,144,161,178,195,212,229,246,255,255,255,255,255,255,255,255,255,255,255,255,255,245,228,211,194,177,160,143,121,99,77,38,60,82,104,124,141,158,175,192,209,226,243,255,255,255,255,253,241,229,213,196,179,162,145,128,111,94,77,56,34,16,11,12,17,22,27,27,44,61,78,95,112,129,146,163,179,191,203,163,151,139,122,105,88,71,54,37,20,19,19,19,19,16,10,7,8,8,8,8,8,8,13,30,47,64,81,98,115,130,142,150,130,111,94,77,60,43,26,9,0,0,0,0,0,0,0)
_pal_deluxepaint:(0,170,101,223,207,223,207,138,81,65,32,0,0,0,0,0,48,69,69,48,138,69,207,223,211,178,146,113,81,65,32,0,227,195,178,146,130,0,0,0,0,0,113,81,65,48,32,0,0,0,0,0,0,243,227,211,195,178,162,243,227,211,211,195,178,178,162,146,130,113,97,81,65,146,130,113,97,81,65,48,32,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,227,195,178,146,227,195,178,146,130,97,81,65,243,243,243,243,243,243,243,243,243,243,227,227,211,211,195,227,195,178,146,130,113,81,65,178,178,162,162,146,211,195,178,162,146,130,113,97,130,130,113,113,97,97,81,211,178,146,130,97,65,32,1,65,48,32,1,0,0,0,0,243,243,130,130,130,178,243,0,0,0,0,0,0,195,195,195,195,195,146,113,65,211,178,146,113,81,65,32,1,32,32,32,32,32,32,32,32,1,0,0,0,0,0,0,0,81,130,178,195,195,195,243^0,170,101,223,48,138,223,138,178,178,162,146,130,113,97,81,138,223,223,138,138,48,48,138,211,178,146,130,97,65,32,0,227,195,178,146,130,0,0,0,0,0,113,81,65,48,32,0,0,0,0,0,0,0,0,0,0,0,0,211,178,146,113,81,65,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,211,178,146,113,81,65,32,178,146,113,81,65,32,0,162,146,130,113,97,97,81,65,0,0,0,0,0,0,0,0,243,243,243,243,243,243,243,243,227,211,195,178,178,162,146,211,195,162,146,130,97,81,65,130,113,113,97,81,243,243,243,243,227,195,178,146,65,48,48,32,32,16,16,243,243,243,243,243,243,243,243,16,0,0,227,211,195,178,162,178,243,243,243,130,130,130,146,130,113,97,81,65,32,65,113,146,195,195,195,195,243,243,243,243,243,243,243,243,195,195,195,195,162,113,81,32,227,195,178,146,130,113,81,65,32,32,32,32,32,32,243^0,170,101,223,69,69,69,48,243,243,243,243,227,195,178,146,69,69,207,207,223,207,207,207,243,243,243,243,243,243,243,243,227,195,178,146,130,227,211,195,178,162,113,81,65,48,32,146,130,113,97,81,65,0,0,0,0,0,0,243,243,243,243,243,243,243,243,0,0,0,0,0,0,227,195,178,146,130,113,81,65,211,178,146,113,81,65,32,243,243,243,243,243,243,243,81,65,32,0,0,0,0,0,227,195,178,146,130,113,81,65,211,178,146,113,81,65,32,0,211,195,178,162,146,146,130,0,0,0,0,0,0,0,0,113,97,97,81,65,81,65,32,0,0,0,0,0,48,48,32,32,16,16,16,211,178,146,113,81,65,32,0,0,0,0,0,0,0,0,0,130,130,130,243,243,243,243,0,0,0,0,0,0,32,32,32,32,32,32,32,32,243,243,243,243,243,243,243,243,48,81,130,178,195,195,195,195,227,195,178,146,130,113,81,65,195,195,195,162,130,81,243)
_pal_samcoupe:(0,0,73,73,0,0,73,73,36,36,109,109,36,36,109,109,0,0,73,73,0,0,73,73,36,36,109,109,36,36,109,109,146,146,219,219,146,146,219,219,182,182,255,255,182,182,255,255,146,146,219,219,146,146,219,219,182,182,255,255,182,182,255,255,0,0,73,73,0,0,73,73,36,36,109,109,36,36,109,109,0,0,73,73,0,0,73,73,36,36,109,109,36,36,109,109,146,146,219,219,146,146,219,219,182,182,255,255,182,182,255,255,146,146,219,219,146,146,219,219,182,182,255,255,182,182,255,255^0,0,0,0,73,73,73,73,36,36,36,36,109,109,109,109,0,0,0,0,73,73,73,73,36,36,36,36,109,109,109,109,0,0,0,0,73,73,73,73,36,36,36,36,109,109,109,109,0,0,0,0,73,73,73,73,36,36,36,36,109,109,109,109,146,146,146,146,219,219,219,219,182,182,182,182,255,255,255,255,146,146,146,146,219,219,219,219,182,182,182,182,255,255,255,255,146,146,146,146,219,219,219,219,182,182,182,182,255,255,255,255,146,146,146,146,219,219,219,219,182,182,182,182,255,255,255,255^0,73,0,73,0,73,0,73,36,109,36,109,36,109,36,109,146,219,146,219,146,219,146,219,182,255,182,255,182,255,182,255,0,73,0,73,0,73,0,73,36,109,36,109,36,109,36,109,146,219,146,219,146,219,146,219,182,255,182,255,182,255,182,255,0,73,0,73,0,73,0,73,36,109,36,109,36,109,36,109,146,219,146,219,146,219,146,219,182,255,182,255,182,255,182,255,0,73,0,73,0,73,0,73,36,109,36,109,36,109,36,109,146,219,146,219,146,219,146,219,182,255,182,255,182,255,182,255)
_pal_polar11:(10,171,209,245,245,135,153,95,51,45,47^10,41,105,202,241,140,194,148,157,98,43^10,41,31,47,237,129,78,72,181,150,107)
_pal_rust6:(35,113,165,225,240,255^0,47,73,136,187,226^0,48,50,102,156,198)
_pal_cave:(0,16,54,68,143,199,156,245^0,0,29,63,86,144,228,245^0,41,35,79,179,101,199,245)
_pal_fairy:(14,210,77,255,75,131,112,173^48,0,217,230,49,96,143,184^166,0,40,0,89,111,77,112)
_pal_mo5:(0,187,255,221,238,255,221,0,119,0,187,255,255,221,0,119^0,187,0,119,187,255,221,255,221,255,255,255,0,119,0,119^0,187,0,119,0,0,119,0,119,255,255,255,255,238,255,221)
_pal_xaiue:(252,135,8,55,91,159,107,179,175,77,75,181,229,224,112,61,43,29,109,182,206,243^250,116,6,46,77,126,205,214,176,140,76,69,139,218,176,127,64,24,67,102,152,215^228,105,11,35,33,43,99,239,233,211,183,55,55,44,60,79,75,62,105,166,155,189)
_pal_pixelwave:(28,82,136,166,145,117,90,82,123,171,213,255^5,14,23,37,59,82,105,131,163,196,225,255^41,117,194,249,255,255,255,255,255,255,255,255)
_pal_arne4:(0,0,184,175^0,81,75,216^0,156,18,79)
_pal_aaprad:(7,33,82,138,193,234,160,83,66,89,107,184,121,87,148^5,25,58,107,156,219,179,124,60,111,185,170,112,98,91^5,25,42,62,77,116,53,68,86,175,182,176,126,122,40)
_pal_daruda:(222,15,35,64,86,112,109,129,146,159,176,185,191,207,213,224,232,232,231,231,232,231^229,14,10,0,0,13,41,50,61,74,83,105,129,146,166,188,207,227,232,160,169,181^217,19,41,45,44,26,28,33,19,20,2,21,9,19,39,37,80,111,141,121,163,198)
_pal_xaiue_rad:(241,222,199,140,124,108,69,44,106,173,222,163,204,123,73,22,45,62,118,169,161,95^239,215,164,123,90,71,56,30,103,139,213,121,188,108,71,18,47,79,130,172,148,102^183,92,57,38,38,43,29,18,58,69,170,99,142,92,63,18,59,128,158,183,143,121)
_pal_bw:(0,255^0,255^0,255)
_pal_rgb:(255,0,0^0,255,0^0,0,255)
_pal_rgbcmy:(255,0,0,0,255,255^0,255,0,255,255,0^0,0,255,255,0,255)
_pal_b_rgb:(0,255,0,0^0,0,255,0^0,0,0,255)
_pal_bw_rgb:(0,255,255,0,0^0,255,0,255,0^0,255,0,0,255)
_pal_cmy:(255,0,255^0,255,255^255,255,0)
_pal_cmyk:(0,255,0,255^0,0,255,255^0,255,255,0)
_pal_wcmyk:(0,255,0,255,255^0,255,255,0,255^0,255,255,255,0)
_pal_1bitrgb:(255,0,255,0,0,0,255,255^255,0,0,255,0,255,0,255^255,0,0,0,255,255,255,0)
_pal_aurora:(0,17,34,51,68,85,102,119,136,153,170,187,204,221,238,255,0,63,0,191,129,0,63,0,15,127,191,245,253,255,255,255,191,127,85,127,191,255,255,255,255,191,127,0,63,0,175,0,0,75,188,203,166,126,110,126,160,192,208,225,235,245,246,245,127,87,115,142,171,199,227,248,227,196,143,115,59,65,115,143,162,181,199,218,237,199,171,142,115,88,70,25,35,59,80,59,87,115,100,143,162,225,180,171,135,80,15,30,35,59,100,143,171,199,190,171,168,143,87,87,59,15,31,59,73,87,115,118,143,171,208,227,171,143,115,87,60,70,114,143,171,171,235,255,227,225,215,199,200,195,75,50,40,64,98,165,218,213,255,245,255,246,255,215,218,180,160,95,83,98,140,172,177,230,255,255,200,155,150,115,106,60,40,32,12,20,10,20,125,75,0,5,28,18,18,6,0,45,60,106,145,85,125,8,16,5,22,15,0,50,0,24,35,105,74,144,90,190,120,74,98,60,16,0,35,12,80,96,135,156,189,185,215,215,248,230,255,218,189,189,140,90,100,65,50,85,160,200,255,255,250,252,230,189,152,145^0,17,34,51,68,85,102,119,136,153,170,187,204,221,238,255,127,191,255,255,129,0,63,0,15,0,63,0,129,192,129,0,63,0,20,63,127,127,191,255,255,191,127,127,191,255,255,191,127,125,175,170,160,148,130,110,105,120,138,155,170,185,200,225,0,59,65,85,115,143,171,210,199,158,115,87,45,65,115,143,162,181,199,218,237,227,199,190,143,125,80,30,80,87,100,115,143,171,192,199,216,248,238,227,180,125,105,45,65,115,171,199,227,241,210,199,185,171,143,115,87,25,31,59,73,87,110,118,143,171,218,227,143,87,87,59,35,50,64,87,87,115,172,220,199,185,160,143,125,90,40,22,10,24,24,20,32,82,60,90,98,189,165,155,110,90,75,50,80,98,128,148,177,213,213,234,255,240,220,200,168,110,52,70,92,150,215,230,255,240,197,180,140,56,152,196,222,235,254,255,235,230,215,222,156,90,44,55,74,100,82,106,120,157,164,176,197,185,110,90,65,60,28,16,16,33,16,16,50,65,98,145,165,195,198,115,82,32,41,16,20,24,20,0,10,25,25,0,80,106,160,58,30,16,52,20^0,17,34,51,68,85,102,119,136,153,170,187,204,221,238,255,127,191,255,255,255,255,191,127,80,127,191,245,255,203,129,0,63,0,20,0,63,0,129,191,0,63,0,0,63,0,175,255,255,200,192,137,144,148,135,96,95,114,116,125,140,155,175,210,255,59,60,85,115,143,171,218,171,115,87,59,31,35,59,87,85,114,143,171,199,171,143,85,87,62,50,15,55,59,80,73,87,115,130,143,162,250,202,197,142,95,70,35,70,115,171,199,227,241,240,227,220,199,199,143,115,45,59,87,115,143,170,202,199,227,248,255,199,199,143,115,60,70,114,143,171,171,225,245,227,210,190,185,160,145,55,35,30,17,0,10,16,74,10,50,98,49,60,15,10,0,5,20,10,0,90,0,10,90,16,74,65,70,25,5,5,20,5,8,12,5,10,10,115,90,20,80,78,50,128,145,106,168,165,205,255,255,240,213,222,92,82,125,156,150,246,189,220,195,255,255,255,250,240,255,246,245,218,189,148,72,176,208,210,255,255,255,255,250,252,255,255,224,255,197,190,123,100,98,70,55,130,120,191,197,185,140,120,57,77,55)
_pal_playpal:(0,31,23,75,255,27,19,11,7,47,35,23,15,79,71,63,255,247,243,235,231,223,219,211,203,199,191,187,179,175,167,163,155,151,143,139,131,127,119,115,107,103,95,91,83,79,71,67,255,255,255,255,255,255,255,255,255,247,239,231,223,215,207,203,191,179,171,163,155,143,135,127,119,107,95,83,75,63,51,43,239,231,223,219,211,203,199,191,183,179,171,167,159,151,147,139,131,127,119,111,107,99,91,87,79,71,67,59,55,47,39,35,119,111,103,95,91,83,75,67,63,55,47,39,31,23,19,11,191,183,175,167,159,155,147,139,131,123,119,111,103,95,87,83,159,143,131,119,103,91,79,67,123,111,103,91,83,71,63,55,255,235,215,195,175,155,135,115,255,255,255,255,255,255,255,255,239,227,215,203,191,179,167,155,139,127,115,103,91,231,199,171,143,115,83,55,27,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,243,235,223,215,203,195,183,175,255,255,255,255,255,255,255,167,159,147,135,79,67,55,47,0,0,0,0,0,0,255,255,255,255,207,159,111,167^0,23,15,75,255,27,19,11,7,55,43,31,23,59,51,43,183,171,163,151,143,135,123,115,107,99,91,87,79,71,63,59,51,47,43,35,31,27,23,19,15,11,7,7,7,0,0,0,235,227,219,211,207,199,191,187,179,171,163,155,147,139,131,127,123,115,111,107,99,95,87,83,79,71,67,63,55,47,43,35,239,231,223,219,211,203,199,191,183,179,171,167,159,151,147,139,131,127,119,111,107,99,91,87,79,71,67,59,55,47,39,35,255,239,223,207,191,175,159,147,131,115,99,83,67,51,35,23,167,159,151,143,135,127,123,115,107,99,95,87,83,75,67,63,131,119,107,95,83,71,59,51,127,115,107,99,87,79,71,63,255,219,187,155,123,91,67,43,219,187,155,123,95,63,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,199,171,143,115,83,55,27,0,0,0,0,0,0,0,0,235,215,199,179,163,143,127,115,111,103,95,87,79,71,67,255,255,255,255,255,255,255,63,55,47,35,59,47,35,27,0,0,0,0,0,0,159,231,123,0,0,0,0,107^0,11,7,75,255,27,19,11,7,31,15,7,0,43,35,27,183,171,163,151,143,135,123,115,107,99,91,87,79,71,63,59,51,47,43,35,31,27,23,19,15,11,7,7,7,0,0,0,223,211,199,187,179,167,155,147,131,123,115,107,99,91,83,79,75,71,67,63,59,55,51,47,43,39,35,31,27,23,19,15,239,231,223,219,211,203,199,191,183,179,171,167,159,151,147,139,131,127,119,111,107,99,91,87,79,71,67,59,55,47,39,35,111,103,95,87,79,71,63,55,47,43,35,27,23,15,11,7,143,135,127,119,111,107,99,91,87,79,75,67,63,55,51,47,99,83,75,63,51,43,35,27,99,87,79,71,59,51,43,39,115,87,67,47,31,19,7,0,219,187,155,123,95,63,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,227,203,179,155,131,107,83,219,187,155,123,91,59,27,23,15,15,11,7,0,0,0,215,179,143,107,71,35,0,0,0,0,0,39,27,19,11,71,59,47,35,23,11,67,75,255,255,207,155,107,107)
_pal_db8:(0,85,100,215,80,100,230,220^0,65,105,115,140,185,200,245^0,95,100,85,215,100,110,255)
_pal_db16:(20,68,48,78,133,52,208,117,89,210,133,109,210,109,218,222^12,36,52,74,76,101,70,113,125,125,149,170,170,194,212,238^28,52,109,78,48,36,72,97,206,44,161,44,153,202,94,214)
_pal_db32:(0,34,69,102,143,223,217,238,251,153,106,55,75,82,50,63,48,91,99,95,203,255,155,132,105,89,118,172,217,215,143,138^0,32,40,57,86,113,160,195,242,229,190,148,105,75,60,63,96,110,155,205,219,255,173,126,106,86,66,50,87,123,151,111^0,52,60,49,59,38,102,154,54,80,48,110,47,36,57,116,130,225,255,228,252,255,183,135,106,82,138,50,99,186,74,48)
_pal_db_iso22:(12,76,112,188,206,228,144,105,77,38,44,60,85,116,240,207,182,132,85,116,107,147^8,65,80,95,145,218,196,142,97,50,75,115,141,186,250,182,124,90,84,102,123,147^22,56,58,78,72,108,70,52,60,60,115,115,222,234,255,144,116,120,97,88,137,136)
_pal_edg8:(253,211,218,230,40,45,123,27^253,39,125,218,198,147,83,28^248,52,34,41,65,221,173,51)
_pal_edg16:(228,184,116,63,158,229,251,255,99,50,25,79,175,255,44,4^166,111,63,40,40,59,146,231,198,115,61,103,191,255,232,132^114,80,57,50,53,68,43,98,77,69,63,129,210,255,244,209)
_pal_edg32:(190,215,234,228,184,115,62,162,228,247,254,254,99,62,38,25,18,0,44,255,192,139,90,58,38,24,255,104,181,246,232,194^74,118,212,166,111,62,39,38,59,118,174,231,199,137,92,60,78,153,232,255,203,155,105,68,43,20,0,56,80,117,183,133^47,67,170,114,80,57,49,51,68,34,52,97,77,72,66,62,137,219,245,255,220,180,136,102,68,37,68,108,136,122,150,105)
_pal_edg36:(219,163,103,78,57,38,20,123,80,46,26,15,13,15,14,19,65,240,229,197,148,98,70,151,229,247,251,254,237,196,120,53,77,127,180,227^224,172,112,83,58,36,16,207,155,106,69,39,47,77,130,178,243,210,174,129,85,53,33,67,112,172,223,151,82,44,31,20,35,59,94,141^231,190,139,113,86,58,32,92,75,66,59,56,109,163,206,242,252,175,120,88,66,48,31,42,40,55,107,155,89,54,44,40,82,134,179,214)
_pal_edg64:(255,19,27,39,61,93,133,180,255,199,146,101,66,42,26,14,28,57,93,138,191,230,246,249,237,224,198,142,255,237,255,255,255,211,153,90,51,30,19,12,0,0,0,0,12,148,253,243,219,122,48,12,3,59,98,147,202,200,246,245,234,196,137,87^0,19,27,39,61,93,133,180,255,207,161,115,76,47,25,7,18,31,44,72,111,156,202,230,171,116,69,37,80,118,162,200,235,252,230,197,152,111,76,46,57,105,152,205,241,253,210,137,63,9,3,2,25,20,36,56,82,80,129,85,50,36,30,28^64,19,27,39,61,93,133,180,255,221,185,146,110,78,50,27,28,33,40,54,74,105,159,207,80,56,36,29,0,20,20,37,87,126,95,79,75,80,76,68,109,170,220,249,255,255,237,245,253,250,217,147,63,67,97,143,201,134,135,93,60,48,43,39)
_pal_graveyard:(133,163,190,138,118,27,48,69,91,117,143,166,141,118,101,79,108,123,131,159,189^122,138,181,105,91,26,45,60,77,99,122,147,127,116,104,85,111,132,135,168,201^104,121,144,102,98,31,51,73,94,118,141,160,152,136,111,79,101,122,152,179,206)
_pal_marshmellow32:(43,58,87,140,63,85,118,164,89,115,140,184,193,175,144,113,60,84,161,182,226,178,124,75,60,78,110,143,32,35,45,94^63,83,121,166,62,87,127,171,50,65,80,122,188,164,123,85,60,74,98,130,181,178,124,80,58,60,77,97,65,91,128,179^65,86,125,151,32,53,69,121,52,65,77,102,172,145,103,74,60,68,59,65,95,178,124,83,63,92,126,154,91,124,166,188)
_pal_psygnosia:(0,27,54,68,82,100,115,119,158,203,224,162,0,8,84,81^0,30,39,63,82,100,97,120,164,232,139,50,51,74,106,108^0,41,71,65,76,124,80,91,167,247,121,78,8,60,0,191)
_pal_blessing:(116,150,247,255,216^86,251,255,179,191^155,199,174,203,216)
_pal_steamlords:(33,58,79,161,119,119,96,59,23,47,67,79,101,124,160,192^59,96,119,159,116,92,59,33,14,33,58,82,115,148,185,209^37,74,84,124,79,79,58,55,25,59,96,119,140,161,186,204)
_pal_starmancer:(27,41,31,37,42,46,50,29,43,71,105,136,170,222,52,81,120,162,190,233,250,77,128,186,228,234,255,255,10,13,7,10,14,8,8,16,21,18,14,12,18,33,38,64,101,132,168,200,221,9,25,83^32,51,68,97,129,162,187,24,32,45,60,70,86,115,19,25,32,40,53,69,106,36,66,95,137,178,227,245,35,64,97,128,158,200,231,32,50,76,112,157,203,233,41,65,106,141,176,205,227,7,26,85^55,98,125,165,203,235,248,38,55,88,129,160,185,223,26,34,41,40,34,37,57,22,39,28,20,8,69,108,31,53,70,87,94,116,123,48,66,93,121,148,175,193,51,76,115,144,179,207,227,17,35,94)
_pal_matriax8c:(240,250,16,0,210,160,115,16^240,200,200,160,64,105,100,24^220,0,64,200,64,75,100,32)
_pal_equpix15:(82,42,62,132,56,92,16,178,212,85,128,236,139,255,255^60,42,84,84,96,122,16,126,78,168,172,138,208,204,248^78,58,66,92,124,86,36,86,82,148,64,75,186,104,192)
_pal_linearbasic:(14,95,153,220,247,159,98,143,197,238,252,218,250,151,75,61,49,65,73,114,86,89,71,129,194,240,253,211,170,119,72^12,45,57,74,134,41,35,64,96,142,203,78,203,218,167,115,65,112,167,214,152,86,53,86,120,179,247,191,141,92,59^12,86,112,123,151,78,47,41,37,46,163,56,62,63,71,79,82,137,144,206,204,189,121,170,208,221,237,169,122,85,58)
_pal_oil6:(39,73,139,198,242,251^39,77,109,159,211,245^68,126,156,165,171,239)
_pal_pear36:(94,140,186,242,255,207,143,60,61,50,50,71,75,77,102,255,194,126,96,67,39,62,87,150,227,255,255,235,176,115,66,90,128,189,255,255^49,63,97,166,228,255,222,163,110,62,41,59,91,166,255,255,194,126,96,67,39,35,41,66,105,181,145,86,48,39,36,38,54,72,107,181^91,93,86,94,120,112,93,112,112,79,71,120,171,255,227,235,209,143,112,79,54,71,75,83,86,112,102,75,92,92,69,94,107,130,151,181)
_pal_nes:(0,252,248,188,124,164,60,0,0,184,104,0,0,216,152,104,68,248,248,216,148,248,248,228,168,240,248,248,168,252,252,228,136,248,248,172,80,216,184,0,0,184,88,0,0,184,88,0,0,0,0,0,0,248,120^0,252,248,188,124,228,188,120,0,184,136,88,0,184,120,68,40,184,120,0,0,164,88,0,0,208,120,56,16,224,160,92,20,216,184,124,48,248,248,184,120,248,216,168,104,248,248,168,88,252,232,136,64,216,120^0,252,248,188,124,252,252,248,252,248,252,248,188,248,248,252,188,248,248,204,132,192,152,88,32,176,88,0,0,168,68,16,0,120,0,0,0,120,24,0,0,184,84,0,0,216,152,68,0,252,216,136,88,248,120)
_pal_boomboom:(0,36,255,190,68,49,27^0,36,255,38,137,162,38^0,35,255,51,26,242,50)
_pal_fuzz4:(48,255,0,255^35,55,250,253^135,150,172,175)
_pal_supernova7:(26,61,84,119,167,207,255^8,32,50,58,82,120,206^14,59,70,77,82,98,156)
_pal_rosy42:(33,59,125,171,207,240,255,200,99,59,47,40,27,43,58,76,79,146,245,223,163,104,64,44,20,75,105,156,204,255,255,255,230,173,120,79,41,61,82,143,189,255^24,32,56,81,117,181,238,212,171,125,87,53,31,43,63,104,164,232,255,224,167,111,73,53,24,29,36,42,47,82,194,137,69,47,29,29,29,41,51,77,106,174^27,39,51,48,43,65,131,93,63,79,83,64,33,69,94,133,184,192,232,232,194,153,115,77,46,82,100,112,123,119,161,51,57,69,79,76,43,54,63,87,98,112)
_pal_blk36:(0,18,41,70,107,144,193,255,255,229,193,140,102,63,41,65,100,140,185,165,90,65,53,54,10,15,20,34,66,140,255,255,204,135,216,255^0,23,50,75,116,158,217,255,204,149,106,75,51,35,23,40,52,81,145,230,185,133,74,39,42,74,102,137,188,255,224,150,82,42,56,104^0,61,104,140,178,221,242,255,208,159,125,99,75,60,76,102,153,204,242,255,229,216,178,127,51,76,91,110,127,155,145,95,80,56,67,102)
_pal_lms:(0,126,190,255,126,254,4,6,255,126,0,0,126,254,4,6^0,126,190,255,0,0,126,255,255,126,0,0,0,0,126,255^0,126,190,255,0,0,0,4,4,0,126,255,126,255,126,255)
_pal_vis:(0,70,120,180,220,255,153,156,237,255,255,229,255,245,255,255,168,211,34,157,0,153,77,112,47,84,111,181^0,70,120,180,220,255,0,90,28,163,126,170,194,228,242,249,230,249,177,187,183,217,109,154,54,109,49,165^0,70,120,180,220,255,48,60,36,177,0,122,14,156,0,189,29,188,76,97,239,234,243,209,153,142,152,213)
_pal_gnome32:(234,186,128,86,197,131,93,68,224,193,136,102,173,136,98,73,157,117,75,49,239,224,179,130,223,153,238,209,70,38,255,0^232,181,125,82,210,166,117,86,182,102,70,56,167,127,91,64,184,144,105,78,224,195,145,102,66,0,214,148,160,119,255,0^227,171,116,72,200,127,85,50,175,90,49,34,200,163,129,102,210,174,131,108,205,158,105,71,30,0,128,12,70,38,255,0)
_pal_taffy16:(34,98,163,250,255,255,220,63,68,43,167,255,245,219,166,54^37,117,192,255,171,108,67,72,141,219,245,235,137,75,61,53^51,186,230,252,123,122,91,194,231,114,71,51,49,61,87,77)
_pal_enos16:(250,212,157,75,249,234,249,231,154,88,141,68,195,149,186,148^250,212,157,75,211,175,147,89,209,174,237,197,167,105,181,142^250,212,157,75,129,77,138,82,249,238,167,91,225,200,170,130)
_pal_ammo8:(4,17,30,48,77,137,190,238^12,35,58,93,128,162,220,255^6,24,41,66,97,87,127,204)
_pal_firestorm:(27,70,249,253,236,255,255,253,255^32,52,94,75,103,132,161,222,236^50,74,62,53,86,95,95,133,179)
_pal_arq16:(255,255,174,77,233,16,81,5,241,130,255,90,255,125,235,30^255,209,181,128,56,8,30,68,137,62,169,225,233,62,108,138^255,157,189,201,65,32,67,148,45,44,169,80,71,191,130,76)
_pal_msx:(0,202,255,183,217,254,202,221,60,64,115,89,126,100,181^0,202,255,94,100,135,193,206,160,182,206,85,117,218,101^0,202,255,81,89,124,94,133,66,74,124,223,240,238,179)
_pal_faraway48:(13,34,61,173,217,255,255,214,143,22,28,13,13,0,0,0,0,8,89,170,69,37,2,25,16,9,21,46,86,160,200,237,247,247,241,231,209,158,115,77,36,28,16,32,88,169,210,241^7,9,5,24,79,152,249,246,250,158,93,56,29,25,49,100,141,196,223,232,197,149,89,58,20,13,21,38,46,58,101,175,200,243,228,204,158,109,50,38,23,18,17,34,97,176,214,242^9,21,24,24,12,14,89,104,55,38,42,34,31,31,56,87,109,159,176,202,217,207,153,145,56,25,56,77,115,158,143,185,217,206,175,147,113,79,46,48,32,22,18,35,98,176,215,241)
_pal_battery24:(248,51,87,120,143,166,217,224,230,232,232,226,252,118,58,201,181,65,70,76,73,70,66,48^255,36,55,68,71,76,87,70,99,152,203,237,255,232,224,250,242,196,179,144,119,98,74,48^186,49,82,101,106,108,124,70,76,81,88,130,222,86,86,117,107,124,142,161,145,135,112,66)
_pal_g8:(28,237,161,243,238,45,64,37^17,236,59,127,150,83,169,166^33,233,59,154,26,101,51,197)
_pal_todayland:(20,49,90,148,237,94,174,227,244,69,126,198,240,27,33,52,152,33,38,30,108,68,142,228,242^20,56,103,168,239,22,36,112,191,35,66,119,183,56,103,176,232,35,75,143,213,28,48,98,180^20,61,108,170,239,50,50,23,66,35,58,66,132,69,95,111,138,99,164,222,228,92,127,154,183)
_pal_simjpc16:(5,34,84,155,225,245,254,139,124,103,49,64,161,165,154,234^4,31,53,110,176,238,254,225,194,143,111,74,77,104,147,145^3,49,22,45,71,155,254,224,100,203,35,104,63,212,183,130)
_pal_night16:(15,255,12,72,121,176,101,63,185,255,221,154,100,51,118,197^15,248,33,88,160,206,127,69,157,221,148,81,75,48,112,163^30,188,51,109,176,157,73,54,106,145,91,66,72,51,136,179)
_pal_fzteth16:(243,249,184,94,162,194,143,193,108,0,0,221,0,7,0,5^243,194,112,13,158,89,39,0,96,71,168,180,73,134,195,28^243,164,14,36,180,223,184,43,111,237,243,17,82,92,125,37)
_pal_ykb22:(207,156,40,72,128,184,210,210,231,128,116,104,74,83,165,141,71,64,174,207,138,169^207,156,37,46,74,146,183,194,229,120,91,74,104,161,199,169,126,72,134,157,95,119^201,151,42,43,62,134,174,174,209,104,65,69,93,112,135,174,136,89,178,185,103,119)
_pal_crimso11:(255,243,191,118,203,142,122,94,142,134,69,61,53,35,65,17^255,215,150,154,94,57,73,69,195,118,110,98,61,46,41,11^227,98,81,85,49,61,98,49,207,150,81,134,90,50,45,17)
_pal_cpcboy:(0,27,53,102,85,127,188,192,223,27,27,30,121,128,145,201,227,248,53,53,53,127,173,141,225,228,255,238,172,118,63,36^0,27,53,30,51,53,53,70,109,101,110,121,95,128,148,127,155,120,175,183,193,201,200,225,198,221,255,234,181,132,80,49^0,101,201,37,97,201,53,110,155,27,131,229,27,128,223,53,141,248,53,143,215,53,170,199,67,154,255,224,107,72,63,55)
_pal_jerrypie22:(30,36,55,156,220,196,147,121,82,157,118,41,52,64,114,83,207,224,210,53,25,85^36,81,150,198,239,215,121,65,60,125,68,71,119,213,178,137,190,110,57,41,23,46^49,104,155,217,248,164,70,34,32,174,110,45,80,142,69,71,91,54,28,29,22,65)
_pal_cgarne:(0,94,34,76,12,108,68,123,138,235,92,226,170,255,181,255^0,96,52,129,126,217,170,226,54,138,46,61,92,217,181,255^0,110,209,251,69,71,204,249,34,96,120,105,61,63,181,255)
_pal_naji16:(16,61,100,72,63,106,116,89,183,141,100,192,200,220,242,230^26,14,17,46,66,52,67,85,62,109,150,113,146,162,201,209^58,38,61,105,90,101,74,121,98,156,124,159,108,134,102,213)
_pal_apple2:(0,81,132,234,81,232,245,0,0,145,201,0,152,200,255^0,92,61,125,72,93,183,103,200,145,209,166,219,193,255^0,22,82,39,136,239,201,82,44,145,153,240,201,247,255)
_pal_risc:(255,220,185,151,118,85,54,0,0,237,5,220,237,85,255,4^255,220,185,151,118,85,54,0,69,237,202,0,237,134,185,185^255,220,185,151,118,85,54,0,151,4,0,0,185,0,0,255)
_pal_arne4:(0,0,184,175^0,81,75,216^0,156,18,79)
_pal_spec12:(15,145,214,217,219,168,120,142,50,47,48,217^8,140,217,209,110,45,28,217,186,99,24,190^8,137,208,93,59,45,38,89,59,189,143,147)
_pal_drz15:(20,57,102,165,216,242,255,255,81,83,128,133,164,255,207^20,47,72,93,114,154,227,255,90,127,130,171,219,191,238^25,71,81,82,114,128,91,238,142,59,126,221,114,252,247)
_pal_gzxp:(0,173,243,159,218,170,232,0,14,31,68^0,155,234,37,98,124,202,106,175,29,88^0,168,215,63,82,20,0,20,3,175,214)
_pal_finlal11:(23,83,34,175,59,35,159,136,189,203,228^20,12,53,52,102,132,132,158,160,201,229^25,30,85,81,136,51,116,183,188,144,241)
_pal_softy15:(217,241,34,62,190,208,156,14,159,189,101,153,21,64,92^246,218,23,201,211,168,179,168,184,102,113,17,96,19,52^234,4,44,238,220,65,26,74,174,102,64,156,144,109,17)
_pal_au15:(102,0,51,85,136,170,187,255,255,85,153,102,187,68,17^102,17,17,0,34,102,153,221,255,85,153,119,221,51,34^119,34,17,0,17,34,119,187,238,51,68,170,255,68,68)
_pal_au15y:(85,136,204,221,255,221,153,85,255,187,102,102,68,34,17^0,34,136,187,221,204,153,85,255,221,119,102,51,51,17^0,17,68,153,187,119,68,51,238,255,170,119,68,85,34)
_pal_dimwid23:(0,250,224,226,186,185,235,195,228,187,113,81,137,203,166,58,56,158,171,24,93,30,7^0,232,205,225,183,171,167,190,114,102,137,154,127,70,72,109,102,31,44,55,32,22,6^0,233,242,92,169,250,80,33,81,227,229,75,127,103,135,105,44,113,41,118,62,71,13)
_pal_acid15:(23,64,143,211,128,55,227,244,28,9,28,33,201,181,192^3,7,30,96,128,190,218,249,13,68,81,151,130,215,248^38,61,64,54,128,161,120,210,89,64,130,59,155,55,175)
_pal_elc22:(0,85,168,255,168,254,168,254,254,168,255,4,6,4,6,0,0,0,118,168,254,254^0,69,168,255,0,0,85,118,168,168,255,168,255,168,255,118,0,0,0,0,0,0^0,85,168,255,0,0,0,0,118,0,4,0,4,168,255,255,168,255,255,168,255,118)
_pal_eggy15:(46,14,70,73,240,202,60,196,158,246,43,234,175,221,249^64,12,9,82,242,30,155,27,126,52,207,157,216,212,217^61,27,161,102,208,15,135,227,116,104,242,24,126,203,85)
_pal_sup8:(246,238,237,61,8,119,230,0^250,234,196,156,145,107,40,8^255,24,149,9,205,125,0,0)
_pal_chip16:(214,58,0,83,112,6,99,142,89,124,86,234,196,111,229,216^75,35,0,140,198,62,114,55,142,182,83,200,133,26,229,162^97,51,20,193,229,76,114,55,51,73,73,121,78,113,229,162)
_pal_4l:(250,70,92,87,97,107,153,181,135,166,180,13,18,78,113,76,22,173,227,235,255,248^249,59,87,98,115,151,11,97,135,164,180,13,22,64,96,126,156,101,102,148,193,226^249,82,90,122,81,85,45,114,116,156,180,13,130,166,186,216,120,95,37,136,146,0)
_pal_tui15:(29,19,23,70,120,16,21,162,43,240,178,197,240,124,226^13,34,55,58,77,66,112,109,161,176,162,180,194,219,231^13,66,39,49,48,172,155,61,195,63,131,208,152,207,249)
_pal_cdbac:(0,218,127,196,244,199,119,49,55,142,214,245,253,206,93,48^0,131,55,196,251,240,226,152,54,100,151,206,245,63,9,20^0,92,16,102,74,220,142,63,141,227,255,230,249,80,41,33)
_pal_kens16:(0,255,201,110,232,239,106,25,22,50,5,63,186,255,227,122^0,255,143,78,2,227,137,86,237,193,127,50,170,148,14,36^0,255,76,35,0,5,39,72,117,195,193,174,255,157,194,61)
_pal_kens32:(214,254,161,250,251,230,153,71,5,79,45,0,111,8,42,6,0,74,142,183,255,172,130,90,174,247,244,155,86,17,81,8^160,59,44,47,159,28,47,1,17,2,105,166,235,162,102,54,0,73,123,192,255,190,124,59,101,170,234,149,98,150,225,253^144,30,50,122,218,247,124,31,85,236,203,238,255,154,106,25,0,87,164,255,255,156,112,28,7,48,92,0,4,59,19,204)
_pal_kens54:(5,50,56,0,28,42,45,0,80,162,132,170,205,5,73,47,56,120,187,142,31,37,114,164,245,223,168,54,36,127,71,147,151,229,213,221,242,238,158,78,91,94,126,162,224,255,255,223,171,238,193,248,234,161^254,175,114,0,51,82,132,183,254,209,146,186,255,220,159,109,148,206,198,140,100,71,98,141,184,111,49,16,18,35,26,39,104,126,48,56,128,41,40,33,80,77,117,175,245,251,255,185,140,193,144,203,121,94^193,135,97,0,42,25,48,22,52,142,108,179,241,221,170,130,215,248,236,253,244,126,159,181,244,241,238,227,103,135,58,78,119,163,157,90,113,17,31,26,88,40,26,34,63,198,255,186,118,145,41,26,36,48)
_pal_aap12:(4,28,71,108,227,216,161,78,154,240,249,138^3,22,65,140,210,128,61,40,64,212,245,143^3,24,107,80,69,56,59,46,126,114,239,196)
_pal_aap16:(7,51,119,204,153,221,255,255,85,17,68,51,85,85,170,255^7,34,68,136,51,119,221,255,170,85,238,136,68,85,187,255^8,34,51,85,17,17,85,51,68,34,187,221,170,119,187,255)
_pal_aap64:(6,20,59,115,180,223,250,249,255,255,214,156,89,20,26,36,18,20,40,36,32,166,255,254,250,245,232,188,121,64,36,34,50,113,187,219,244,218,179,139,109,74,51,66,91,142,186,233,227,185,132,88,71,35,50,93,146,205,228,199,160,121,90,66^6,16,23,23,32,62,106,163,213,252,242,219,193,160,122,82,32,52,92,159,214,252,255,243,214,160,106,74,58,51,34,28,43,65,117,164,210,224,185,147,117,84,57,36,49,82,117,181,230,191,155,141,125,103,132,175,220,247,210,176,134,103,78,57^8,19,37,45,42,35,10,27,65,64,100,67,53,46,62,59,32,100,196,222,199,219,255,192,184,151,115,155,128,83,52,26,40,59,71,99,156,234,209,175,141,98,65,51,56,82,106,163,255,251,228,190,133,78,100,141,186,226,170,139,98,85,68,52)
_pal_aap128:(5,14,45,97,185,241,252,255,255,255,248,232,176,103,39,76,133,211,248,213,173,127,88,51,24,41,71,97,143,196,208,151,89,66,61,39,20,27,43,39,66,115,241,201,138,69,73,120,156,206,250,238,212,144,23,55,105,178,226,246,252,236,203,166,128,89,50,79,140,198,214,180,114,69,97,147,198,239,181,134,93,72,44,23,44,70,100,138,175,220,184,136,94,72,40,70,105,154,197,230,238,227,191,135,86,50,54,101,150,192,212,234,241,221,189,136,89,51,178,225,248,255,253,246,226,178,100,42^4,12,27,39,69,100,165,224,255,240,197,138,91,57,31,61,95,151,246,220,184,142,99,60,28,63,114,165,208,241,255,237,207,164,111,65,18,36,78,137,191,239,242,212,161,114,65,100,139,170,214,181,128,82,21,51,91,139,178,216,247,235,198,158,123,87,50,52,91,133,168,117,75,42,104,148,184,221,231,198,155,104,59,24,52,84,135,196,233,234,204,163,113,82,44,71,102,151,199,231,230,205,165,115,79,47,40,73,104,144,184,224,235,206,164,110,77,39,148,191,227,233,201,162,114,82,54,30^3,12,30,33,29,31,112,183,255,137,58,54,44,49,27,46,57,65,68,29,52,68,53,36,25,33,56,63,50,41,234,202,147,89,67,45,29,71,149,205,232,232,255,253,246,227,130,198,219,237,255,156,187,188,22,52,89,120,126,150,190,231,193,154,122,87,50,47,62,86,81,56,44,27,58,70,88,145,203,154,121,89,57,25,56,86,140,195,223,238,216,188,142,98,60,98,130,185,221,240,234,223,201,143,91,53,43,86,136,169,184,221,219,191,153,106,77,42,118,137,152,227,201,168,133,102,75,35)
_pal_fant16:(142,81,51,20,70,166,211,231,238,217,117,20,4,28,67,96^109,58,39,19,24,60,123,188,238,213,115,33,4,27,80,161^52,24,16,12,32,30,30,79,250,91,32,15,5,47,99,143)
_pal_fant24:(31,57,165,239,239,171,24,239,239,165,119,114,42,57,104,146,39,239,69,60,155,54,85,48^36,87,140,172,216,92,63,105,183,98,52,65,29,42,76,126,100,58,35,159,26,23,15,15^10,28,39,40,161,28,57,47,117,67,33,19,13,28,60,106,104,12,13,156,10,12,10,10)
_pal_tf23:(165,201,209,162,131,99,65,40,58,95,134,172,212,151,101,58,34,80,133,223,172,124,76^45,109,202,157,107,73,51,34,59,99,149,194,237,181,132,89,58,59,91,185,220,168,110^39,69,128,107,63,44,37,31,61,103,152,195,237,138,92,65,48,104,105,202,241,213,173)
_pal_tfp39:(82,120,165,201,204,207,227,247,217,199,141,87,40,65,99,131,162,151,101,58,32,32,58,95,134,172,212,172,124,76,62,55,51,88,114,133,177,223,234^30,24,45,109,165,194,231,225,182,151,91,50,34,51,73,107,157,181,132,89,55,44,59,99,149,194,237,220,168,110,61,42,20,38,64,91,139,185,220^46,38,39,69,98,129,171,188,145,125,87,34,31,37,44,63,107,138,92,65,45,17,61,103,152,195,237,241,213,173,138,94,77,79,74,105,154,202,230)
_pal_fleja_m:(31,43,65,104,144,182,255,252,181,138,92,201,222,255,255,252,180,81,48,35,38,35,65,76,99,148,184,60,70,130,247,194,133^24,46,72,113,161,203,255,191,128,80,58,48,106,173,229,249,214,196,156,109,79,54,114,147,194,210,253,41,39,100,164,113,45^51,66,89,122,168,207,255,138,87,62,65,56,56,59,150,96,69,63,99,122,110,99,145,173,201,212,255,64,92,129,139,130,102)
_pal_pastel:(252,252,250,255,247,163,128,87,81,112,109,88,132,190,222^153,189,230,247,246,217,217,207,192,165,116,68,89,87,118^119,144,170,213,166,106,155,201,219,212,207,120,201,194,165)
_pal_pineapple32:(67,137,217,255,255,199,115,52,3,39,69,156,255,255,209,124,49,131,235,255,255,191,109,41,4,3,28,119,255,255,192,96^0,0,36,97,183,110,57,17,7,59,130,185,216,130,64,25,12,63,156,218,255,195,138,59,21,62,146,214,224,136,59,23^42,39,60,87,98,70,46,31,16,45,57,59,50,59,31,26,27,52,110,172,228,198,141,73,40,94,167,193,220,169,148,97)
_pal_sweetie16:(26,87,177,238,255,160,56,39,41,64,79,134,244,147,85,50^28,41,65,123,208,240,184,110,54,91,164,236,244,182,113,64^44,86,86,88,121,114,110,123,111,208,247,248,244,193,133,86)
_pal_nyx8:(8,15,32,246,195,153,129,78^20,42,57,214,163,117,98,73^30,63,79,189,138,119,113,95)
_pal_zu32:(71,94,122,160,191,238,244,182,113,57,60,48,90,125,160,207,223,138,40,57,57,57,86,142,205,255,244,244,230,169,130,79^45,54,68,91,121,161,204,213,170,123,89,44,83,112,147,198,246,235,204,120,71,49,64,71,96,174,180,126,72,59,112,84^60,67,74,83,88,96,161,60,52,68,86,46,83,113,142,184,245,241,223,168,120,75,100,140,147,182,27,27,46,59,148,107)
_pal_gb_d_1:(51,166,214,247^30,55,142,231^80,37,73,198)
_pal_gb_d_2:(8,52,136,224^24,104,192,248^32,86,112,208)
_pal_gb_bz:(46,56,87,126^70,93,123,132^61,73,70,22)
_pal_gb_arne:(36,63,118,172^49,80,132,181^55,63,72,107)
_pal_gb_easy:(0,13,161,235^67,136,188,221^51,51,0,119)
_pal_gb_pj:(31,77,139,196^31,83,149,207^31,60,109,161)
_pal_gb_kirokaze:(51,70,148,226^44,135,227,243^80,143,68,228)
_pal_gb_cyber:(16,66,111,206^37,103,158,206^51,142,223,206)
_pal_gb_grapefruit:(101,183,244,255^41,101,178,245^108,145,107,221)
_pal_gb_forest:(90,107,123,255^57,140,198,255^33,66,123,181)
_pal_gb_ice_cream:(124,235,249,255^63,107,168,246^88,111,117,211)
_pal_gb_rb:(24,132,247,255^16,115,181,239^16,156,140,255)
_pal_gb_choco:(255,220,169,66^228,164,96,41^194,86,76,54)
_pal_hal4:(48,96,248,248^0,40,144,240^48,120,32,136)
_pal_amstrad_cpc:(0,128,255,128,255,255,255,255,255,128,0,0,128,128,0,0,0,128,0,0,128,128,255,255,255,128,0^0,128,255,0,0,128,128,255,255,128,128,255,255,255,255,128,255,255,128,0,0,128,128,0,0,0,0^0,128,255,0,0,128,0,128,0,0,0,0,0,128,128,128,255,255,255,128,255,255,255,255,128,128,255)
_pal_amiga2600ntsc:(252,232,208,184,160,132,100,68,44,76,104,132,156,180,204,224,200,180,156,132,108,80,52,20,0,32,64,92,116,140,164,184,164,144,124,104,80,56,28,0,0,28,56,80,104,124,144,164,164,144,124,104,80,56,28,0,0,28,56,80,104,124,144,164,188,168,148,124,104,76,48,20,72,96,120,140,160,180,196,212,236,220,208,192,176,160,140,120,136,156,176,192,208,224,236,252,252,236,224,208,192,172,152,132,112,132,152,172,188,204,220,232,252,232,208,184,160,132,100,68,0,64,108,144,176,200,220,236^224,204,180,156,132,104,72,40,48,80,112,140,168,192,212,236,252,228,204,180,152,124,92,56,60,92,124,156,180,208,228,252,252,228,208,180,156,124,92,64,44,76,104,132,156,180,204,224,200,180,156,136,112,84,56,24,0,32,64,92,116,140,164,184,180,160,136,112,88,60,32,0,0,32,60,88,112,132,156,176,176,156,132,112,88,60,32,0,0,32,60,88,112,136,160,180,188,168,148,128,104,80,52,24,40,68,92,120,140,160,180,204,252,232,208,184,160,132,100,68,0,64,108,144,176,200,220,236^140,124,108,88,68,48,24,0,0,28,52,76,100,120,136,156,164,144,124,104,80,56,28,0,0,32,64,92,116,140,164,184,212,192,172,148,128,100,72,44,92,120,144,172,192,212,232,252,252,236,220,204,188,168,144,124,136,156,176,192,208,224,236,252,252,236,224,208,192,172,152,132,120,144,164,184,204,220,236,252,224,208,192,176,156,136,116,92,0,32,60,88,112,136,160,180,148,128,112,92,72,48,24,0,0,20,40,60,76,92,104,124,104,92,80,64,52,36,16,0,0,64,108,144,176,200,220,236)
_pal_amiga2600pal:(112,136,160,180,200,220,236,252,224,208,196,180,168,148,132,112,88,108,128,148,164,180,196,212,200,184,168,148,128,108,84,60,0,32,60,88,112,132,156,176,164,144,124,104,80,56,28,0,0,28,56,80,104,124,144,164,176,156,132,112,88,60,32,0,0,32,60,88,112,132,156,176,212,192,176,160,140,116,92,68,128,148,168,188,204,220,236,252,252,236,220,200,180,160,136,112,0,64,108,144,176,200,220,236^0,32,60,88,112,132,156,176,176,156,132,112,88,60,32,0,0,32,60,88,112,132,156,176,176,156,132,112,88,60,32,0,0,32,60,88,112,132,156,176,200,180,160,136,116,88,60,32,60,88,116,140,164,184,204,224,236,220,200,184,164,140,116,92,100,128,152,176,196,216,232,252,252,232,212,192,172,144,120,92,88,112,132,156,172,192,208,224,212,192,172,152,132,104,80,52,0,64,108,144,176,200,220,236^20,52,80,108,132,156,180,200,224,208,192,176,156,136,116,92,112,136,160,180,200,220,236,252,252,236,220,204,188,168,148,128,136,156,176,192,208,224,236,252,252,236,220,200,180,160,136,112,112,136,160,180,200,220,236,252,236,220,200,184,164,140,116,92,20,52,80,108,132,156,180,200,176,156,132,112,88,60,32,0,0,32,60,88,112,132,156,176,176,156,132,112,88,60,32,0,0,64,108,144,176,200,220,236)
_pal_amiga2600secam:(0,33,240,255,127,127,255,255^0,33,60,80,255,255,255,255^0,255,121,255,0,255,63,255)
_pal_cga:(0,85,170,255,0,85,0,85,0,85,170,255,170,255,170,255^0,85,170,255,0,85,170,255,170,255,0,85,0,85,85,255^0,85,170,255,170,255,0,85,170,255,0,85,170,255,0,85)
_pal_cga00:(0,0,170,170^0,170,0,85^0,0,0,0)
_pal_cga01:(0,85,255,255^0,255,85,255^0,85,85,85)
_pal_cga10:(0,170,0,170^0,0,170,170^0,170,170,170)
_pal_cga11:(0,255,85,255^0,85,255,255^0,255,255,255)
_pal_cga20:(0,170,0,170^0,0,170,170^0,0,170,170)
_pal_cga21:(0,255,85,255^0,85,255,255^0,85,255,255)
_pal_c64_colodore:(0,74,123,178,255,129,196,85,142,237,169,86,117,112,46,142^0,74,123,178,255,51,108,56,80,241,255,172,206,109,44,60^0,74,123,178,255,56,113,0,41,113,159,77,200,235,155,151)
_pal_c64_pepto:(0,98,137,173,255,159,203,109,161,201,154,92,106,136,80,160^0,98,137,173,255,78,126,84,104,212,226,171,191,126,69,87^0,98,137,173,255,68,117,18,60,135,155,94,198,203,155,163)
_pal_com_vic_20:(0,255,168,233,119,182,133,197,168,233,85,146,66,126,189,255^0,255,115,178,45,104,212,255,95,157,158,223,52,112,204,255^0,255,74,135,38,98,220,255,180,245,74,135,139,202,113,176)
_pal_zx:(0,255,255,0,0,255,255,0,192,0,0,192,192,0,192^0,255,0,255,0,255,0,255,0,192,0,192,0,192,192^0,255,0,0,255,0,255,255,0,0,192,0,192,192,192)
_pal_pico_8:(0,95,194,255,255,255,255,171,255,255,131,126,41,29,0,0^0,87,195,241,236,163,204,82,119,0,118,37,173,43,135,228^0,79,199,232,39,0,170,54,168,77,156,83,255,83,81,54)
_pal_msxp:(0,128,192,255,128,255,128,255,0,0,0,0,0,0,128,255,128,255,0,0,0,128,0,128,128,255,128,255^0,128,192,255,0,0,128,255,128,255,128,255,0,0,0,0,128,255,64,255,128,255,64,128,0,0,64,128^0,128,192,255,0,0,0,0,0,0,128,255,128,255,128,255,64,128,64,128,255,255,128,255,255,128,0,64)
_pal_jmp:(0,25,70,161,69,118,131,158,220,225,214,233,33,211,175,245^0,16,175,214,62,100,49,194,83,141,185,216,108,101,170,244^0,40,69,133,120,254,41,232,75,121,123,161,75,200,185,235)
_pal_mac2:(255,255,255,220,255,54,0,0,0,0,101,151,185,134,69,0^255,255,101,0,0,0,0,151,168,101,54,101,185,134,69,0^255,0,0,0,151,151,202,255,0,0,0,54,185,134,69,0)
_pal_jewel: (50,102,184,210,242,240,223,188,121,86,74,77,115,116,156^30,36,40,106,197,232,183,123,65,96,143,193,227,130,172^45,49,28,18,60,156,127,98,107,148,169,179,123,161,186)
#@cli pal_t : eq. to 'palette_transfer'. : (+)
pal_t: palette_transfer $*
#@cli palette_transfer : 0<=_palette_id<=142,0<=_indexing_style<=4,0<=_color_dithering[%]<=1,_transfer_rgb={0=No | 1=Yes },0<=_alpha_count,0<=_alpha_dithering<=1,_special_effect_factor>=0,0<=_initial_resize_method<=5,_activate_upscaling_stimulation={ 0=Does not activate | 1=Activate Upscale},_pixel_width>=1,_pixel_height>=1,_activate_hardware_stimulation={ 0=Does not activate | 1= Stimulate hardware restriction },1<=_color_section_of_hardware_restriction_precision_factor,_hardware_restriction_by_tile_width>0,_hardware_restriction_by_tile_height>0,_hardware_color_precision>2,_hardware_color_mapping_method={0=Median Cut | Median Cut and K-Means},alpha_precion_factor>2,alpha_mapping_method_for_hardware_stimulation={0=Median Cut | Median Cut and K-Means}
#@cli : Transfer Colors to images using a palette. If using negative number or "i" for first variable, there must be exactly two layers.
#@cli : (eq. to 'pal_t').\n
#@cli : Default value: 'transfer_rgb=0', 'alpha_count=0', 'alpha_dithering=0%', 'special_effect_factor=.5', 'initial_resize_method=0','activate_upscaling_stimulation=0','pixel_width=1','pixel_height=1','activate_hardware_stimulation=0','color_section_of_hardware_restriction_precision_factor=10','hardware_restriction_by_tile_width=5','hardware_restriction_by_tile_height=5','_hardware_color_precision=4','hardware_color_mapping_method=1','alpha_precion_factor=10','alpha_mapping_method_for_hardware_stimulation=1'
#@cli : For 2 layers where one is a palette - $ palette_transfer -1,0,.5 ,
#@cli : To apply palette colors to multiple layers - $ repeat $! l[$<] palette_transfer db32,0,.5 endl done ,
palette_transfer:
_iw={w}
_ih={h}
skip ${4=0},${5=2},${6=0},${7=.5},${8=0}${9=0},${10=1},${11=1},${12=0},${13=10},${14=5},${15=5},${16=4},${17=1},${18=10},${19=1}
pw=$10
ph=$11
if {$8||$9} if {$pw<=0||$ph<=0} v + error "Invalid input for pixel scale factor(s)!" fi
r={$pw>$ph?$pw/$ph:$ph/$pw} fi
_CI={$2}
AlpC=$5 AlpD=$6 SF=$7
pal $1
if $9 r[0] {$r*100}%,{$r*100}%,1,4,$8 fi
if $8 r[0] {100/$10}%,{100/$11}%,1,4,$8 fi
split_opacity[0]
l[^1] if $4 to_rgb transfer_rgb.. . fi if {$_CI==0} if {$12>0} l[0] ahre_rgb $13,$14,$15,$16,$3,$17 endl index.. .,0,1 else index.. .,$3,1 fi rm.
elif {$_CI==1} to_rgba ${_iw},${_ih},1,4 noise. {$SF*75} to_graya. blend[^1] difference,1 to_rgb if {$12>0} l[0] ahre_rgb $13,$14,$15,$16,$3,$17 endl index.. .,0,1 else index.. .,$3,1 fi rm.
elif {$_CI==2} pal 0 [0] index. ..,1,1 rm.. +blend[^1] interpolation,{$5/20} rm[0,2] rv if {$12>0} l[0] ahre_rgb $13,$14,$15,$16,$3,$17 endl index.. .,0,1 else index.. .,$3,1 fi rm.
else if {$CI>2} if {($_CI-3)==0} +f[0] "x%2*255" else +f[0] "y%2*255" fi fi blend[^1] multiply,{$SF/4} if {$12>0} l[0] ahre_rgb $13,$14,$15,$16,$3,$17 endl index.. .,0,1 else index.. .,$3,1 fi rm. fi
endl
if {$5<2} rm. if $8 r {100*$10}%,{100*$11}%,1,3,1 fi else
l[1] ${AlpC},1,1,1 f. "x" n. 0,255 if {$12>0&&$5>2} l[0] ahre_bw $18,${AlpC},$14,$15,$16,${AlpD},$19 endl index.. .,0,1 else index.. .,${AlpD},1 fi rm. endl a c if $8 r {100*$10}%,{100*$11}%,1,4,1 fi fi
#@cli pal_l :
#@cli : Convert palettes to layers
pal_l :
repeat $! l[$>]
_iw={w}
if {h=1} repeat {${_iw}-1} [0] done repeat ${_iw} crop[$>] $>,0,$>,0 done else v + error "This is not a palette!" fi endl done
#@cli ahre_rgb: eq. to 'auto_hardware_restriction_emulation_RGB'. : (+)
ahre_rgb : auto_hardware_restriction_emulation_RGB $*
#@cli auto_hardware_restriction_emulation_RGB : _precision_factor>1,_tile_size_width>0,_tile_size_height>0,_colors_per_tiles>0,dithering[%]>=1,mapping_method={0=median-cut | 1=median-cut and k-means}
#@cli : Emulates hardware restriction automatically being based on the image using spectrum of 3.
#@cli : (eq. to 'ahre_rgb').
auto_hardware_restriction_emulation_RGB :
repeat $! l[$>] remove_opacity to_rgba repeat $1 [0] done l[$1] +colormap $1,0,0 at[0] "s c f "ia" a c",$2,$3,,,,,3 index.. .,0,1 pal_l. r[1-{$1}] {w#0},{h#0},1,4,1 l[0] repeat {$1-1} [0] done endl repeat $1 l[$>,{$>+$1}] f[0] "i#0==i#1?255:0" endl done k[0-{$1-1}] to_gray endl to_rgb[0-{$1-1}] repeat $1 a[$>,$1] c done repeat $1 l[$>] +solidify 0,0,0,0,0 blend normal endl done ac "autoindex $4,$5,$6",rgb blend alpha to_rgb endl done
#@cli ahre_bw: eq. to 'auto_hardware_restriction_emulation_BW'. : (+)
ahre_bw: auto_hardware_restriction_emulation_BW $*
#@cli auto_hardware_restriction_emulation_BW : _precision_factor>1,_tile_size_width>0,_tile_size_height>0,_shades_per_tiles>0,dithering[%]>=1,mapping_method={0=median-cut | 1=median-cut and k-means}
#@cli : Emulates hardware restriction automatically being based on the image using spectrum of 1.
#@cli : (eq. to 'ahre_bw').
auto_hardware_restriction_emulation_BW : repeat $! l[$>]
to_gray _l={im} _h={iM} $1,1,1,1 f. "x" n. 0,255 +at.. "f "ia"",$3,$4,,,,,3 index. ..,0,1 rv[^0] pal_l. r[^0-1] {w#0},{h#0},1,1,1 repeat $1 l[1,{$>+2}] f[1] "i#0==i#1?255:0" endl done rm[1] repeat $1 +a[0,{$>+1}] c done rm[0-5] repeat $1 l[$>] +solidify 0,0,0,0,0 blend normal endl done ac "autoindex $5,$6,$7",rgb blend alpha to_gray n ${_l},${_h} $2,1,1,1 f. "x" n. 0,255 index.. .,0,1 rm. to_gray endl done
#@cli sol : eq. to '_solarize'. : (+)
sol :
_solarize
#@cli _solarize :
#@cli : Solarize values. If values are greater than .5 (0-1 range assumed), then the values becomes inverted. Finally, it is normalized. Note that this doesn't work on -1,1 though.
#@cli : (eq. to 'sol').
_solarize :
+negate
blend darken mul 2
#@cli modf: eq. to 'modular_formula'. : (+)
modf: if ${is_image_arg\ $3} pass$3 0 modular_formula $1,$2,[-1] rm.
else modular_formula ${1-3}
fi
#@cli modular_formula : operation={ 0=regular | 1=continuous_regular | 2=divisive | 3=continuous_divisive | 4=sum | 5=continuous_sum },channel_value>0,value : operation={ 0=regular | 1=continuous_regular | 2=divisive | 3=continuous_divisive | 4=sum | 5=continuous_sum },channel_value>0,[image]
#@cli : Apply modular formulas into selected images. 'channel_value' can be values outside the channel ranges of image. 
#@cli : (eq. to 'modf').\n 
modular_formula:
if ${is_image_arg\ $3} arg_img=-2 e[] "Apply modular formulas using image as reference for variable value."
else arg_img=-1 e[] "Apply modular formulas using {$3*abs($2)} as variable value. "
fi
if $1<0||$1>5 error ""$"1<6||"$"1>=0 => F" fi
if $1!=int($1) error ""$"1!=INT" fi
if $arg_img==-2 pass$3 fi
f[0-{$arg_img}] "begin(eps=10^-8;image=1;skip=1;);
    if(image,
        if("$arg_img"==-2
            ,var3_mod=i#-1/abs($2);
            ,var3_mod=$3;image-=1;
        );
        if(!var3_mod,var3_mod=eps);
        maxnum=$1<2?var3_mod*abs($2)+eps:abs($2)+eps;
        var3_mod=var3_mod*abs($2);
        mf(a)=a-maxnum*floor(a/maxnum);
        amf(a)=(if(floor(a/maxnum)%2,(maxnum-eps)-mf(a),mf(a)));
    );
    if(skip,skip-=1;
            if($1>3,
                if(!($1%2)
                        ,calc(a)=mf(a+var3_mod);
                        ,calc(a)=amf(a+var3_mod);
                    );
            ,if($1>1,
                if(!($1%2)
                        ,calc(a)=mf(a*(abs($2)/var3_mod));
                        ,calc(a)=amf(a*(abs($2)/var3_mod));
                    );
            ,if(!($1%2)
                        ,calc(a)=mf(a);
                        ,calc(a)=amf(a);
                    );
                );
            );
    );
    calc(i);
    end(if(!image,
            maxnum=maxnum;
            var3_mod=var3_mod;
        );
        if(!skip;
            if($1>3,
                if(!($1%2)
                        ,calc(a)=mf(a+var3_mod);
                        ,calc(a)=amf(a+var3_mod);
                    );
            ,if($1>1,
                if(!($1%2)
                        ,calc(a)=mf(a*(abs($2)/var3_mod));
                        ,calc(a)=amf(a*(abs($2)/var3_mod));
                    );
            ,if(!($1%2)
                        ,calc(a)=mf(a);
                        ,calc(a)=amf(a);
                    );
                );
            );
        );
    );
"
replace_nan 0
if $arg_img==-2 rm. fi
#@cli em:
#@cli : eq. to 'emboss_image' : (+)
#@cli : $ em 90,0,1
em : emboss_image $*
#@cli emboss_image : 0<=_angle<=360, 0<=_depth, _smoothness>=0,
#@cli : (eq. to 'em').\n
#@cli : Default values: 'depth=1','smoothness=0'
#@cli : $ emboss_image 90,0,1 ,
emboss_image: -skip ${2=1},${3=0}
l[0]
luminance
fx_gradient2rgb $3,0,100,0,0
[0]
repeat 2 l[$>] rgb2hsv s c l[0] + {$1+($>*180)} % 360 endl a c hsv2rgb to_rgb s c rm[1,2] endl done
l[0] n 128,255 endl l[1] negate n 0,128 endl
+fill_color[0] 128,128,128,255 rv blend grainmerge - 128 mul $2 + 128 cut 0,255
endl
#@cli rep_bchstatfunc: eq. to 'rep_by_channel_statistical_function'. : (+)
rep_bchstatfunc : rep_by_channel_statistical_function $*
#@cli rep_by_channel_statistical_function: _variable,_resize_bool={ 0=Do not resize | 1= Resize to 1x1 }
#@cli : Creates 1x1 image based on defined variables that depends on image value (minimum, maximum, average, variance, sum, product and median)
#@cli : (eq. to 'rep_bchstatfunc').\n
#@cli : Default value: 'resize_bool=0'
rep_by_channel_statistical_function:
v - _gmic_s="$?" v +
_$0 $"*"
_rep_by_channel_statistical_function:
skip ${2=1}
v - mvcma="$1"
if {isnum("$1")} if {isint("$1")} mvcma=${arg\ 1+$1,min,max,avg,var,sum,pro,med} fi fi
repeat $! l[$>] v - _rep_bchstatfunc_$mvcma $2 endl done
_rep_bchstatfunc_im : _rep_bchstatfunc_min $1
_rep_bchstatfunc_minimum : _rep_bchstatfunc_min $1
_rep_bchstatfunc_min : repeat s sh $> f. im#-1 rm. done if $1 r 1,1,1,{s},0 fi
_rep_bchstatfunc_iM : _rep_bchstatfunc_max $1
_rep_bchstatfunc_maximum : _rep_bchstatfunc_max $1
_rep_bchstatfunc_max : repeat s sh $> f. iM#-1 rm. done if $1 r 1,1,1,{s},0 fi
_rep_bchstatfunc_ia : _rep_bchstatfunc_avg $1
_rep_bchstatfunc_average : _rep_bchstatfunc_avg $1
_rep_bchstatfunc_avg : repeat s sh $> f. ia#-1 rm. done if $1 r 1,1,1,{s},0 fi
_rep_bchstatfunc_iv : _rep_bchstatfunc_var $1
_rep_bchstatfunc_variance : _rep_bchstatfunc_var $1
_rep_bchstatfunc_var : repeat s sh $> f. iv#-1 rm. done if $1 r 1,1,1,{s},0 fi
_rep_bchstatfunc_is : _rep_bchstatfunc_sum $1
_rep_bchstatfunc_total : _rep_bchstatfunc_sum $1
_rep_bchstatfunc_sum : repeat s sh $> f. is#-1 rm. done if $1 r 1,1,1,{s},0 fi
_rep_bchstatfunc_ip : _rep_bchstatfunc_pro $1
_rep_bchstatfunc_product : _rep_bchstatfunc_pro $1
_rep_bchstatfunc_pro : repeat s sh $> f. ip#-1 rm. done if $1 r 1,1,1,{s},0 fi
_rep_bchstatfunc_ic : _rep_bchstatfunc_med $1
_rep_bchstatfunc_median : _rep_bchstatfunc_med $1
_rep_bchstatfunc_med : repeat s sh $> f. ic#-1 rm. done if $1 r 1,1,1,{s},0 fi
#@cli rep_lbchstatfunc_to_pal: eq. to 'rep_layers_by_channel_statistical_function_to_palette'. : (+)
rep_lbchstatfunc_to_pal: rep_layers_by_channel_statistical_function_to_palette $*
#@cli rep_layers_by_channel_statistical_function_to_palette: _variable
#@cli : Converts layers to palette using statistical function by channels per layers into 1x1 tile, then append them.
#@cli : (eq. to 'rep_layers_by_channel_statistical_function_to_palette').
rep_layers_by_channel_statistical_function_to_palette: rep_bchstatfunc $1 a x to_rgb
#@cli rep_mosaic_gen : _tile_width>=0,_tile_height>=0,_dithering<=1,1<=_interpolation<=6,_autocrop-by-median_bool={ 0=Do not autocrop by median | 1=Autocrop by median },_out_original_dimension={ 0=Do not output original dimension | 1= Output Original Dimension },use_folder={ 0=Do not use folder | 1=Use folder },folder_location="location_in_computer"
#@cli : Generates mosaic using multiple pictures using indexing methodology, and uses average to determine the mapping based on colors. Tile_Width and Tile_Height cannot be both zero!
#@cli : Default value: 'tile_height=0', 'interpolation=5', 'autocrop-by-median=0','out_original_dimension=1','use_folder=0','folder_location="N/A"'
#@cli : $ rep_mosaic_gen 10,10,.75,6,1,0 ,
rep_mosaic_gen:
if {$4<1} Interpolation cannot be less than 1 fi
skip ${2=0},${4=5},${5=0},${6=1},${7=0},${8=""}
in_a={int($1)}
in_b={int($2)}
in_c={$in_a*$in_b}
v={$in_a+$in_b}
iw={w#0}
ih={h#0}
vw={$in_c==0?floor(w>h?$v:w/h*$v):$in_a}
vh={$in_c==0?floor(h>w?$v:h/w*$v):$in_b}
mini_width={ceil(w/$vw)}
mini_height={ceil(h/$vh)}
full_width={$mini_width*$vw}
full_height={$mini_height*$vh}

if $7 rm[^0] input_glob "$8" fi
fim_number={$!-1}

to_a
if $5 repeat {$!-1} l[{$>+1}] autocrop {ic} endl done fi
rep_aspect_crop_2d[^0] {$vw},{$vh}
r[^0] $iw,$ih,1,4,$5
+rep_lbchstatfunc_to_pal[^0] ia
l[^0,{$!-1}]
r $vw,$vh,1,4,$4
endl
r[0] $mini_width,$mini_height,1,4,$4
split_opacity[0]
index[0] .,$3,1
repeat 2 l[$>] r $full_width,$full_height,1,{s},1 endl done
r[2-{$!-2}] $full_width,$full_height,1,4,0,2
pal_l.
r[{$!-$fim_number}-{$!-1}] $full_width,$full_height,1,3,1
split_opacity
repeat {$fim_number} l[0,{$!-$fim_number+$>}] +eq rm.. n. 0,255 endl done
repeat {$fim_number} l[{($>*2)+3},{$!-$fim_number+$>}] +blend multiply rv[0,2] rm. to_gray[0] endl done
rm[{$!-$fim_number}-{$!-1}]
repeat {$fim_number} a[{$>+2},{$>+3}] c done
blend[^0-1] alpha
rv[0,2] rm.
split_opacity[0]
blend[^0] multiply
a c
if $6 r {$iw},{$ih},1,4,0 fi
#@cli rep_aspect_crop_2d: _width_ratio>=1,_height_ratio>=1,-1<=_shift_factor[%]<=1,_interpolation={ 0=nearest | 1=linear }
#@cli : Crop images based on specified aspect ratio.
#@cli : Default value: 'shift_factor=0'
rep_aspect_crop_2d:
skip ${3=0},${4=0}
repeat $! l[$>]
A=$1
B=$2
shift_factor=$3
if {$A==$B} if {w>h} r {h},100%,1,100%,0,0,{.5+$shift_factor/2},.5 else r 100%,{w},1,100%,0,0,0.5,{.5+$shift_factor/2} fi else
if {($A/$B)>(w/h)} r 100%,{$B/$A*(w/h)*100}%,1,100%,0,0,0.5,{.5+$shift_factor/2} else r {$A/$B/(w/h)*100}%,100%,1,100%,0,0,{.5+$shift_factor/2},0.5 fi fi
endl done
#@cli rep_nebulous: _main_surf_xy_factor>0,_main_surf_x_factor>0,_main_surf_y_factor>0,-100<=_x_center[%]<=100,-100<=_y_center[%]<=100,0<=_fxyangle<=360,_wave,0<=_lighting_angle<=360,_disturbance>=0,_distx,_disty,0<=_distangle<=360,_disturbance_mode={ 0= do_not_scale | 1=scale_by_axisfact },_color={ 0=gray | 1=color },_alpha_base={ 0=None | 1=hard_light | 2=hard_shade | 3=soft_light | 4=soft_light },_subpixelevel>=0,subpixelprocessingmethod={ 0=Average | 1=Linear | 2=Grid | 3=Bicubic | 4=Lanczos }
#@cli : Creates a Nebulous texture inspired by its Paint.NET plugin equivalent made by MadJik.\n
#@cli : '_main_surf_xy_factor' - Amount of waves by xy-axis.
#@cli : '_main_surf_x_factor' - Amount of waves by x-axis.
#@cli : '_x_center' - Placement of Nebulous texture relative to the center by x-axis.
#@cli : '_y_center' - Placement of Nebulous texture relative to the center by y-axis.
#@cli : '_fxyangle' - Function angle of Nebulous texture.
#@cli : '_wave' - Amount of waves within waves.
#@cli : '_lighting_angle' - Shifts color output within waves
#@cli : '_disturbance' - Multiplier for distortion.
#@cli : '_distx' - Distorts function by x-axis.
#@cli : '_disty' - Distorts function by y-axis.
#@cli : '_distangle' - Distortion function Angle
#@cli : '_disturbance_mode' - Influences how the distortion result is calculated.
#@cli : '_color' - Color Output
#@cli : '_alpha_base' - determines the alpha based on waves angle.
#@cli : '_subpixelevel' - Subpixel processing level
#@cli : '_subpixelprocessingmethod' - Subpixel processing method. Only applicable when '_subpixelevel' is greater than 0.\n
#@cli : Default value: '_main_surf_x_factor=10','_main_surf_y_factor=10','_x_center[%]=0','_y_center[%]=0','_fxangle=0','_wave=1','_lighting_angle=0','_disturbance=0','_distx=100','_disty=100','_distangle=0','_disturbance_mode=0','_color=1','_alpha_base=0','_subpixellevel=1','_subpixelprocessingmethod=1'\n
#@cli : Author: Reptorian.
#@cli : $ rep_nebulous 10,,,,,45,,,2000,100,100,45,,0,1 n 0,255
rep_nebulous:
skip ${2=10},${3=10},${4=0},${5=0},${6=0},${7=1},${8=0},${9=0},${10=100},${11=100},${12=0},${13=0},${14=1},${15=0},${16=0},${17=1}
if $1==0||$2==0||$3==0 v + error "Variable 1 to 3 cannot be zero!" v - fi
if $9<0 v + error "Disturbance factor cannot be less than 0!" v - fi
iw={w}
ih={h}
if !$14 channels 0
else to_rgb fi
if $15 r $iw,$ih,1,{s+1} fi
if $16>1 r {$iw*($16+1)},{$ih*($16+1)},1,{s} fi
f "
begin(
sd=w/h;
shx=($4*w)/2;
shy=($5*h)/2;
ang=-pi*$6/180;
distlvl=$9*$1;
dist=pi/(distlvl/100);
disth=$10;
distv=$11;
dang=-pi*$12/180;
k=pi+((-pi+(pi*$7))*10)/10;
ld=-($8-$6)*pi/180;
);
ix=(((x+shx)/w-.5)*1.5*($1*10))/(h>w?1/sd:1);
iy=(((y+shy)/h-.5)*1.5*($1*10))/(w>h?sd:1);
IX=ix*cos(ang)-iy*sin(ang);
IY=ix*sin(ang)+iy*cos(ang);
IX*=$2*4;
IY*=$3*4;
dix=(x/w-.5)*2/(h>w?1/sd:1);
diy=(y/h-.5)*2/(w>h?sd:1);
DIX=dix*cos(dang)-diy*sin(dang);
DIY=dix*sin(dang)+diy*cos(dang);
cx=DIX*($13?$2:1);
cy=DIY*($13?$3:1);
IX+=distlvl>0?(disth*(sin(((cx+cy)/2)/dist)-cos(((cy-cx)/2)/dist)));
IY+=distlvl>0?(-distv*(sin(((cx+cy)/2)/dist)+cos(((cy-cx)/2)/dist)));
t=atan2(IY,IX);
r=sqrt(IX*IX+IY*IY);
r/=100;
ti=sin(t)*cos(r)*k+r+ang+ld;
g=(sin(ti)+sin(pi/2+ti)+sin(pi+ti));
cg=[sin(pi+ti),sin(pi/2+ti),sin(ti)];
ft=!$14?g:cg;
alp=$15?($15>2?($15==3?g:g*-1):($15==2?(g*-1<0?-1:1):(g<0?-1:1)));
$15?(!$14?[g,alp]:[sin(pi+ti),sin(pi/2+ti),sin(ti),alp]):ft;
"
if $16>1 r $iw,$ih,1,{s},{$17+2} fi
#@cli rep_sptbwgp: (eq. to rep_shift_pixel_to_boundary_with_group_pixels)
rep_sptbwgp: rep_shift_pixel_to_boundary_with_group_pixels $*
#@cli rep_shift_pixel_to_boundary_with_group_pixels: -1<=_position<=1, _axis={ 0=Horizontal | 1=Vertical }, 0<=_influence_factor<=1, _threshold>=0,_channel_mode
#@cli : Shifts pixels to boundary by percentage using grouped pixels. position less than .5 means shift will be negative, and position greater than .5 means shift will be positive.
#@cli : Assign an argument to _channel_mode if you want to disable restricting effect on alpha channel or avoid manipulating 4 channels image in case of CMYKA image. Only use in rare cases!
#@cli : Default values: '_position=-1','_axis=1','_influence_factor=1','_threshold=0','_channel_mode='
rep_shift_pixel_to_boundary_with_group_pixels:
skip ${1=-1},${2=1},${3=.5},${4=0},${5=}

any_channels=0
tcr=3
influence_factor={min(abs($3),1)}
position={(($1+1)/2)}

if   $position<0 position=0
elif $position>1 position=1
fi

if narg($5)
    if $5>=0
        tcr+=1
    else
        any_channels=1
    fi
fi

if $influence_factor
    repeat $! l[$>]
        if (s==2||s>$tcr)||$any_channels
        
            ss={s-1}
            sh $ss f. "i>$4?i:0" rm.
            {w},{h},1,1,i(#-1,x,y,0,$ss)?1
            
            if $2 
                {w},1,1,1,sum(crop(#-1,x,0,0,0,1,h#-1,1,1)) 
                {w#-2},{h#-2},1,{$ss+1},if(i(#-1,x,0,0,0)==h#0,i(#0))
            else  
                1,{h},1,1,sum(crop(#-1,0,y,0,0,w#-1,1,1,1)) 
                {w#-2},{h#-2},1,{$ss+1},if(i(#-1,0,y,0,0)==w#0,i(#0))
            fi

            eval ${-math_lib}"            
                influence_factor="$influence_factor";
                invert_factor=1-influence_factor;
                position="$position";
                
                if($2,
                    for(xx=0,xx<w#-1,xx++,
                        nyy=h#-1-1;
                        if(i(#-2,xx,0)&&i(#-2,xx,0)<h#-1,
                            N=i(#-2,xx,0);
                            tyy=h#-1-N;
                            nyy-=tyy*position;
                            for(yy=h#-1-1,yy>-1,yy--,
                                if(N,
                                    if(i(#-3,xx,yy),
                                        N--;
                                        tnyy=influence_factor*nyy+invert_factor*yy;
                                        if(position==1,I(#-1,xx,ceil(tnyy))=I(#-4,xx,yy);
                                                      ,I(#-1,xx,floor(tnyy))=I(#-4,xx,yy);
                                        );
                                        nyy--;
                                    );
                                    ,break();
                                );
                            );
                        );
                    );
                ,
                    for(yy=0,yy<h#-1,yy++,
                        nxx=0;
                        if(i(#-2,0,yy)&&i(#-2,0,yy)<w#-1,
                            N=i(#-2,0,yy);
                            txx=w#-1-N;
                            nxx+=txx*position;
                            for(xx=0,xx<w#-1,xx++,
                                if(N,
                                    if(i(#-3,xx,yy),
                                        N--;
                                        tnxx=influence_factor*nxx+invert_factor*xx;
                                        if(position==1,I(#-1,floor(tnxx),yy)=I(#-4,xx,yy);
                                                      ,I(#-1,ceil(tnxx),yy)=I(#-4,xx,yy);
                                        );
                                        nxx++;
                                    );
                                    ,break();
                                );
                            );
                        );
                    );
                );
            "
            k.
        fi
    endl done
fi
#@cli rep_sinowaterdist: (eq. to rep_sinusoidal_water_distortion)
rep_sinowaterdist: rep_sinusoidal_water_distortion $*
#@cli rep_sinusoidal_distortion: _xbalance>0,_ybalance>0,_scale>=0,_interpolation,_boundary_condition
#@cli : Shift by sinusoidal distortion formula.
rep_sinusoidal_water_distortion:
skip ${4=2},${5=1}
f
"
balanceY=y*sin(180)/$3*10;
balanceX=x*cos(180)/$3*10;
vx=x+cos(balanceY)*$1;
vy=y+sin(balanceX)*$2;
i(vx,vy,z,c,$4,($5?3:2));
"
#@cli rep_binaltquad: eq. to 'rep_binary_alterating_quad_texture'. : (+)
rep_binaltquad: rep_binary_alterating_quad_texture $*
#@cli rep_binary_alterating_quad_texture: _style={ 0 = Horizontal , 1 = Diagonal , 2 = Simple },_variable_1>=0,_variable_2>=0,_variable_3>=0,0<=_operand<=2,0<=_angle<=360,_x_dir= { 0 = normal | 1 = inverted },_y_dir= { 0=normal | 1 = inverted },_modnum>0
#@cli : Generates a texture full of alternating quadrilateral shapes using binary logic. Converted, and extended from Asmageddon Quaddro Bumperoo/Inverto Paint.NET source code.
#@cli : (eq. to 'rep_binaltquad').
rep_binary_alterating_quad_texture:
skip ${4=128},${5=2},${6=0},${7=0},${8=0},${9=256},${10=255},${11=1}
channels 0
style=$1
var_1=$2
var_2=$3
var_3=$4
operand={$1!=2?$5:2}
angle=$6
x_dir=$7
y_dir=$8
modnum=$9
normalize=$10
allow_normal=$11
f begin(ang=pi*($angle/180);sd=w/h;);ix=((x/w)-.5)/(h>w?1/sd:1);iy=((y/h)-.5)/(w>h?sd:1);IX=ix*cos(ang)-iy*sin(ang);IY=ix*sin(ang)+iy*cos(ang);ix=IX;iy=IY;ix+=.5/(h>w?1/sd:1);iy+=.5/(w>h?sd:1);ix=(w>h?ix*w:ix*h);iy=(w>h?iy*w:iy*h);ix=round(ix)+1;iy=round(iy)+1;$style==2?((!$x_dir?xor(ix,$var_1):xor(w-ix,$var_1))+(!$y_dir?xor(iy,$var_2):xor(h-iy,$var_2)))%$modnum:(int(((($style==1?($operand?($operand==1?(((($x_dir?w-ix:ix)|int($var_1))+(($y_dir?h-iy:iy)|int($var_2)))%$modnum):(xor(($x_dir?w-ix:ix),int($var_1))+xor(($y_dir?h-iy:iy),int($var_2)))%$modnum):((($x_dir?w-ix:ix)&int($var_1))+(($y_dir?h-iy:iy)&int($var_2)))):($operand?($operand==1?(((-($x_dir?w-ix:ix)|int($var_1))+(-($y_dir?h-iy:iy)|int($var_2)))%$modnum):(xor(-($x_dir?w-ix:ix),int($var_1))+xor(-($y_dir?h-iy:iy),int($var_2)))%$modnum):((-($x_dir?w-ix:ix)&int($var_1))+(-($y_dir?h-iy:iy)&int($var_2)))))/(int($operand!=2?$var_3:-$var_3)*2))-int(($style==1?($operand?($operand==1?(((($x_dir?w-ix:ix)|int($var_1))+(($y_dir?h-iy:iy)|int($var_2)))%$modnum):(xor(($x_dir?w-ix:ix),int($var_1))+xor(($y_dir?h-iy:iy),int($var_2)))%$modnum):((($x_dir?w-ix:ix)&int($var_1))+(($y_dir?h-iy:iy)&int($var_2)))):($operand?($operand==1?(((-($x_dir?w-ix:ix)|int($var_1))+(-($y_dir?h-iy:iy)|int($var_2)))%$modnum):(xor(-($x_dir?w-ix:ix),int($var_1))+xor(-($y_dir?h-iy:iy),int($var_2)))%$modnum):((-($x_dir?w-ix:ix)&int($var_1))+(-($y_dir?h-iy:iy)&int($var_2)))))/(int($operand!=2?$var_3:-$var_3)*2)))*($style==1?($operand?($operand==1?(((($x_dir?w-ix:ix)|int($var_1))+(($y_dir?h-iy:iy)|int($var_2)))%$modnum):(xor(($x_dir?w-ix:ix),int($var_1))+xor(($y_dir?h-iy:iy),int($var_2)))%$modnum):((($x_dir?w-ix:ix)&int($var_1))+(($y_dir?h-iy:iy)&int($var_2)))):($operand?($operand==1?(((-($x_dir?w-ix:ix)|int($var_1))+(-($y_dir?h-iy:iy)|int($var_2)))%$modnum):(xor(-($x_dir?w-ix:ix),int($var_1))+xor(-($y_dir?h-iy:iy),int($var_2)))%$modnum):((-($x_dir?w-ix:ix)&int($var_1))+(-($y_dir?h-iy:iy)&int($var_2))))))<int($operand!=2?$var_3:-$var_3)?($style==1?($operand?($operand==1?(abs($modnum)-1)-(((($x_dir?w-ix:ix)|int($var_1))+(-($y_dir?h-iy:iy)|int($var_2)))%$modnum):(xor(($x_dir?w-ix:ix),int($var_1))+xor(-($y_dir?h-iy:iy),int($var_2)))%$modnum):((($x_dir?w-ix:ix)&int($var_1))+(-($y_dir?h-iy:iy)&int($var_2)))%$modnum):($operand?($operand==1?(abs($modnum)-1)-(((($x_dir?w-ix:ix)|int($var_1))+(($y_dir?h-iy:iy)|int($var_2)))%$modnum):(xor(($x_dir?w-ix:ix),int($var_1))+xor(($y_dir?h-iy:iy),int($var_2)))%$modnum):((($x_dir?w-ix:ix)&int($var_1))+(($y_dir?h-iy:iy)&int($var_2)))%$modnum)):($style==1?($operand?($operand==1?(abs($modnum)-1)-(((-($x_dir?w-ix:ix)|int($var_1))+(($y_dir?h-iy:iy)|int($var_2)))%$modnum):(xor(-($x_dir?w-ix:ix),int($var_1))+xor(($y_dir?h-iy:iy),int($var_2)))%$modnum):((-($x_dir?w-ix:ix)&int($var_1))+(($y_dir?h-iy:iy)&int($var_2)))%$modnum):($operand?($operand==1?(abs($modnum)-1)-(((-($x_dir?w-ix:ix)|int($var_1))+(-($y_dir?h-iy:iy)|int($var_2)))%$modnum):(xor(-($x_dir?w-ix:ix),int($var_1))+xor(-($y_dir?h-iy:iy),int($var_2)))%$modnum):((-($x_dir?w-ix:ix)&int($var_1))+(-($y_dir?h-iy:iy)&int($var_2)))%$modnum)))
if $allow_normal n 0,$normalize fi
#@cli rep_binaltquadc: eq. to 'rep_binary_alterating_quad_c'. : (+)
rep_binaltquadc: rep_binary_alterating_quad_c $*
#@cli rep_binary_alterating_quad_c: 0<=_colorspace<=13,_contain_alpha= { 0=No Alpha | 1=Alpha Included },_8bitmode= { 0=Not 8-Bit Value | 1=8-Bit Value } \ 0<=_channel_order<=5,0<=_channel_order<=5,0<=_channel_order<=5,0<=_channel_order<=5,0<=_channel_order<=5, \
_variable_1>=0,_variable_2>=0,_variable_3>=0,_style={ 0 = Horizontal | 1 = Diagonal },0<=_operand<=2,0<=_angle<=360,_x_dir= { 0 = normal | 1 = inverted },_y_dir= { 0=normal | 1 = inverted }, \
_variable_1>=0,_variable_2>=0,_variable_3>=0,_style={ 0 = Horizontal | 1 = Diagonal },0<=_operand<=2,0<=_angle<=360,_x_dir= { 0 = normal | 1 = inverted },_y_dir= { 0=normal | 1 = inverted }, \
_variable_1>=0,_variable_2>=0,_variable_3>=0,_style={ 0 = Horizontal | 1 = Diagonal },0<=_operand<=2,0<=_angle<=360,_x_dir= { 0 = normal | 1 = inverted },_y_dir= { 0=normal | 1 = inverted }, \
_variable_1>=0,_variable_2>=0,_variable_3>=0,_style={ 0 = Horizontal | 1 = Diagonal },0<=_operand<=2,0<=_angle<=360,_x_dir= { 0 = normal | 1 = inverted },_y_dir= { 0=normal | 1 = inverted }, \
_variable_1>=0,_variable_2>=0,_variable_3>=0,_style={ 0 = Horizontal | 1 = Diagonal },0<=_operand<=2,0<=_angle<=360,_x_dir= { 0 = normal | 1 = inverted },_y_dir= { 0=normal | 1 = inverted }
#@cli : Generates a texture full of alternating quadrilateral shapes using binary logic. Converted, and extended from Asmageddon Quaddro Bumperoo/Inverto Paint.NET source code.
#@cli : (eq. to 'rep_binaltquadc').
rep_binary_alterating_quad_c:
repeat $! l[$>]
cs_mode=$1
cmyk_mode={$cs_mode==3?4:3}
contain_alpha={$2?1:0}
bitmode=$3
tch={$cmyk_mode+$contain_alpha}

skip ${7=0},${8=0},${9=0},${10=0},${11=0},${12=0},${13=0},${14=0},${15=0},${16=0},${17=0},${18=0},${19=0},${20=0},${21=0},${22=0},${23=0},${24=0},${25=0},${26=0},${27=0},${28=0},${29=0},${30=0},${31=0},${32=0},${33=0},${34=0},${35=0},${36=0},${37=0},${38=0},${39=0},${40=0},${41=0},${42=0},${43=0},${44=0},${45=0},${46=0},${47=0},${48=0},${49=0}

channels 0
r 100%,100%,100%,$tch

if {$tch==3} ($4,$5,$6)
elif {$tch==4} ($4,$5,$6,$7)
elif {$tch==5} ($4,$5,$6,$7,$8)
fi

tc={w#1} s. x remove_duplicates tw={$!-1} if $tw<$tc v + error "Invalid Channel Order!" v - fi
a[^0] x rv
($*)
if ($cs_mode==3||(($cs_mode>8&&$cs_mode<11)||$cs_mode<3))||$bitmode (256,256,256,256,255)
else
    if $cs_mode>3&&$cs_mode<7 (361,101,101,256)
    elif $cs_mode==7 (101,201,201,256)
    elif $cs_mode==8 (101,129,{ceil((pi)*200)},256)
    elif $cs_mode==11 (301,301,301,256)
    elif $cs_mode==12 (256,301,301,256)
    elif $cs_mode==13 (301,301,301,256)
    fi
fi
fact=9
repeat $tch
sh[1] {i(#0,$>,0)}
rep_binaltquad. {i(#2,8+$fact*$>,0)},{i(#2,9+$fact*$>,0)},{i(#2,10+$fact*$>,0)},{i(#2,11+$fact*$>,0)},{i(#2,12+$fact*$>,0)},{i(#2,13+$fact*$>,0)},{i(#2,14+$fact*$>,0)},{i(#2,15+$fact*$>,0)},{i(#3,$>,0)},{i(#3,$>,0)-1},{i(#2,16+$fact*$>,0)}
rm.
done
k[1]
if $cs_mode==3
    if $contain_alpha
    s c
    a[0-{$!-2}] c
    cmyk2rgb..
    *.. {255/254}
    a c
    else
    cmyk2rgb
    * {255/254}
    fi
else
    if ($cs_mode>8&&$cs_mode<11)||$cs_mode<3
        if $cs_mode==1 ac "ryb2rgb",rgb
        elif $cs_mode==2 ac "cmy2rgb",rgb
        elif $cs_mode==9 ac "ycbcr2rgb",rgb
        elif $cs_mode==10 ac "ycbcrglic2rgb",rgb
        fi
        cut 0,255
    else
        if $bitmode
            if $cs_mode==1 ac "ryb2rgb",rgb
            elif $cs_mode==4 ac "hsi82rgb",rgb
            elif $cs_mode==5 ac "hsv82rgb",rgb
            elif $cs_mode==6 ac "hsl82rgb",rgb
            elif $cs_mode==7 ac "lab82rgb",rgb
            elif $cs_mode==8 ac "lch82rgb",rgb
            elif $cs_mode==11 ac "yiq82rgb",rgb
            elif $cs_mode==12 ac "yuv82rgb",rgb
            elif $cs_mode==13 ac "xyz82rgb",rgb
            fi
            cut 0,255
        else
            if $cs_mode>3&&$cs_mode<7
                f s<4?[i0,i1/100,i2/100,i3]:[i0,i1/100,i2/100]
                if $cs_mode==4 hsi2rgb
                elif $cs_mode==5 hsv2rgb
                elif $cs_mode==6 hsl2rgb
                fi
                cut 0,255
            elif $cs_mode==7
                f s<4?[i0,i1-100,i2-100,i3]:[i0,i1-100,i2-100]
                lab2rgb
            elif $cs_mode==8
                f s<4?[i0,i1,((i2-314.5)*(pi/3.145)/100),i3]:[i0,i1,((i2-314.5)*(pi/3.145)/100)]
                sh 0,2
                lch2rgb.
                rm.
            elif $cs_mode==11
            f s<4?[i0,i1-150,i2-150,i3]:[i0,i1-150,i2-150]
            yiq2rgb
            elif $cs_mode==12
            f s<4?[i0/255,(i1-150)/150,(i2-150)/150,i3]:[i0/255,(i1-150)/150,(i2-150)/150]
            yuv2rgb
            elif $cs_mode==13
            f s<4?[i0/300,i1/300,i2/300,i3]:[i0/300,i1/300,i2/300]
            xyz2rgb
            fi
        fi
    fi
fi
endl done
#@cli rep_strbul: eq. to 'rep_strange_bulger'. : (+)
rep_strbul: rep_strange_bulger $*
#@cli rep_strange_bulger : 0<=_angle<=360,_axis={ 0 = X-Axis | 1 = Y-Axis },_interpolation,_boundary_condition
#@cli : Performs a bulge effect found in Strange Bulger Series made by Asmageddon for Paint.NET.
#@cli : (eq. to 'rep_strbul').\n
#@cli : _angle refers to the angle of distortion.
#@cli : _axis_of_bulge refers to the axis that is the distortion is based from.
rep_strange_bulger:
f "begin(
BulgeAng=$1*(pi/180);
cX=w/2;
cY=h/2;
);
vx=$2?x:cX-x;
vy=$2?cY-y:y;
vx=(vx^2)/cX;
vy=(vy^2)/cY;
vx=(x+(x-vx)*cos(BulgeAng)+(y-vy)*sin(BulgeAng));
vy=(y+(x-vx)*sin(BulgeAng)+(y-vy)*cos(BulgeAng));
i(vx,vy,z,c,$3,($4?3:2));
"
#@cli rep_strbulkal: eq. to 'rep_strange_bulger_kaleidoscope'. : (+)
rep_strbulkal:rep_strange_bulger_kaleidoscope $*
#@cli rep_strange_bulger_kaleidoscope: 0<=_bulge_ang<=360,_axis_of_bulge= { 0=horizontal | 1=vertical },_scale>0,-1<_offset_main_x<=1,-1<_offset_main_y<=1,-1<_offset_kaleido_x<=1,-1<_offset_kaleido_y,-360<=surface_ang<=360,_mirror_placement= { 0=inside-out | 1=outside-in },_boundary_condition= { 0=Periodic | 1=Mirror },1<=_interpolation<=5,_dimension_reference>0
#@cli : Distorts image using bulge effect found in Strange Bulger Series made by Asmageddon for Paint.NET. This is the Kaleidoscope version of Strange Bulger.
#@cli : (eq. to 'rep_strbulkal').\n
#@cli : _bulge_ang refers to the angle of distortion.
#@cli : _axis_of_bulge refers to the axis that is the distortion is based from.
#@cli : _scale refers to the scaling of the distortion. The larger the _scale value is, the more areas is revealed.
#@cli : _offset_main_x refers to the horizontal displacement of the initial image
#@cli : _offset_main_y refers to the vertical displacement of the initial image
#@cli : _offset_kaleido_x refers to the horizontal displacement of the center of the distortion
#@cli : _offset_kaleido_y refers to the vertical displacement of the center of the distortion
#@cli : _surface_ang refers to the angle of distortion
#@cli : _mirror_placement refers to whether the displacement is mirror from the center or not.
#@cli : _dimension_reference refers to the base dimension used for calculation of bulging, it uses the biggest dimension as a reference for scaling. The PDN version of Strange Bulger Kaleidoscope does not have a dimension reference which means that bulges are dependent on the image size. This is to ensure that preview stays consistent with the end result. What you see is what you get as _dimension_reference variable is a internal dimension processing variable.
rep_strange_bulger_kaleidoscope:
skip ${4=0},${5=0},${6=0},${7=0},${8=0},${9=0},${10=0},${11=3},${12=1024}
if $3<10^-8 v + error "Scale cannot be 0 or less than 0!" v - fi
if $12==0 v + error "dimension_reference cannot be 0!" v - fi

shift {50*$4}%,{50*$5}%,0,0,3,1

f "begin(
BulgeAng=pi*((h>w?360-$1:$1)/180);
ang=pi*($8/180);
sd=w/h;
ox=$6;
oy=$7*-1;
ox/=h>w?1/sd:1;
oy/=w>h?sd:1;
OX=ox*cos(ang)-oy*sin(ang);
OY=ox*sin(ang)+oy*cos(ang);
ox=OX;
oy=OY;
ed=abs(int($12));
id=w>h?ed/w:ed/h;
iw=w*id;
ih=h*id;
cx=iw/2;
cy=ih/2;
);
ix=((x/w)-.5)/(h>w?1/sd:1);
iy=((y/h)-.5)/(w>h?sd:1);
IX=ix*cos(ang)-iy*sin(ang);
IY=ix*sin(ang)+iy*cos(ang);
ix=IX;
iy=IY;
ix+=.5/(h>w?1/sd:1);
iy+=.5/(w>h?sd:1);
ix*=ed;
iy*=ed;
xx=sqrt(abs(ix-cx-ox*(cx>cy?cx:cy)));
yy=sqrt(abs(iy-cy-oy*(cx>cy?cx:cy)));
xx*=$3*ed;
yy*=$3*ed;
xx/=100;
yy/=100;
vx=(w>h?$2:!$2)?xx:cx-xx;
vy=(w>h?$2:!$2)?cy-yy:yy;
vx=vx^2/cx;
vy=vy^2/cy;
vx=(xx+(xx-vx)*cos(BulgeAng)+(yy-vy)*sin(BulgeAng));
vy=(yy+(xx-vx)*sin(BulgeAng)+(yy-vy)*cos(BulgeAng));
vx*=w/ed;
vy*=h/ed;
i(vx,vy,z,c,$11,($10?3:2));
"
if $9 shift 50%,50%,0,0,3,1 fi
#@cli rep_logpindis: eq. to 'rep_logarithmic_pinching_distortion'. : (+)
rep_logpindis: rep_logarithmic_pinching_distortion $*
#@cli rep_logarithmic_pinching_distortion: _distortion_main>=0,-1<=_preshift_x<=1,-1<=_preshift_y<=1,-1<=_effposition_x<=1,-1<=_effposition_y<=1,_prescale_x,_prescale_y,_afterscale_x,_afterscale_y,0<=_angle<=360,_mirror_placement= { 0=outside-in | 1=inside-out },_lx_axis= { 0=different axis | 1=same axis},_ly_axis= { 0=different axis | 1=same axis},ix_dir={ 0=negative | 1=positive },iy_dir={ 0=negative | 1=positive },_boundary= { 0=Periodic | 1=Mirror },1<=_interpolation<=5,_dimension_ref>0
#@cli : (eq. to 'rep_logpindis').
rep_logarithmic_pinching_distortion:
skip ${2=0},${3=0},${4=0},${5=0},${6=1},${7=1},${8=1},${9=1},${10=0},${11=0},${12=1},${13=0},${14=1},${15=0},${16=0},${17=5},${18=1024}
if $6==0||$7==0||$8==0||$9==0 v + error "Scale cannot be 0!" v - fi
if $17<1 v + error "interpolation cannot be less than 1" v - fi

shift {50*$2}%,{50*$3}%,0,0,3,1
f "
begin(sd=w/h;
ang=pi*($10/180);
ox=$4*-1;
oy=$5;
ox/=h>w?1/sd:1;
oy/=w>h?sd:1;
OX=ox*cos(ang)-oy*sin(ang);
OY=ox*sin(ang)+oy*cos(ang);
ox=OX;
oy=OY;
ed=int(abs($18));
ed/=2;
dx=($14?1:-1);
dy=($15?1:-1);
);
ix=((x/w)-.5)/(h>w?1/sd:1);
iy=((y/h)-.5)/(w>h?sd:1);
IX=ix*cos(ang)-iy*sin(ang);
IY=ix*sin(ang)+iy*cos(ang);
ix=IX;
iy=IY;
ix=abs(ix+ox/2)*$6;
iy=abs(iy+oy/2)*$7;
ix*=ed;
iy*=ed;
lx=ix==0||iy==0?log(1^-8)*$1:log($12?iy^2:ix*iy)*$1;
ly=ix==0||iy==0?log(1^-8)*$1:log($13?ix^2:ix*iy)*$1;
ix-=lx*dx;
iy-=ly*dy;
ix*=w/ed;
iy*=h/ed;
ix*=$8;
iy*=$9;
i(ix,iy,z,c,$17,($16?3:2));
"
if $11 shift 50%,50%,0,0,3,1 fi
#@cli rep_sqrlogpindis: eq. to rep_square_root_logarithmic_pinching_distortion : (+)
rep_sqrlogpindis: rep_square_root_logarithmic_pinching_distortion $*
#@cli rep_square_root_logarithmic_pinching_distortion: _distortion_main>=0,-1<=_preshift_x<=1,-1<=_preshift_y<=1,-1<=_effposition_x<=1,-1<=_effposition_y<=1,_prescale_x,_prescale_y,_afterscale_x,_afterscale_y,0<=_angle<=360,_mirror_placement= { 0=outside-in | 1=inside-out },_lx_axis= { 0=different axis | 1=same axis},_ly_axis= { 0=different axis | 1=same axis},ix_dir={ 0=negative | 1=positive },iy_dir={ 0=negative | 1=positive },_boundary= { 0=Periodic | 1=Mirror },1<=_interpolation<=5,_dimension_ref>0
#@cli : (eq. to 'rep_sqrlogpindis').
rep_square_root_logarithmic_pinching_distortion:
skip ${2=0},${3=0},${4=0},${5=0},${6=1},${7=1},${8=1},${9=1},${10=0},${11=0},${12=1},${13=0},${14=1},${15=0},${16=0},${17=5},${18=1024}
if $6==0||$7==0||$8==0||$9==0 v + error "Scale cannot be 0!" v - fi
if $17<1 v + error "interpolation cannot be less than 1" v - fi

shift {50*$2}%,{50*$3}%,0,0,3,1

f "begin(ed=int(abs($18));
sd=w/h;
ang=pi*($10/180);
ox=$4;
oy=$5*-1;
ox/=h>w?1/sd:1;
oy/=w>h?sd:1;
OX=ox*cos(ang)-oy*sin(ang);
OY=ox*sin(ang)+oy*cos(ang);
ox=OX;
oy=OY;
);
ix=((x/w)-.5)/(h>w?1/sd:1);
iy=((y/h)-.5)/(w>h?sd:1);
IX=ix*cos(ang)-iy*sin(ang);
IY=ix*sin(ang)+iy*cos(ang);
ix=IX;
iy=IY;
ix+=.5/(h>w?1/sd:1);
iy+=.5/(w>h?sd:1);
iw=w/(h>w||w==h?1/sd:1);
ih=h/(w>h||w==h?1:1/sd);
id=ed/w;
iw*=id;
ih*=id;
cx=iw/2;
cy=ih/2;
ix*=1;
iy*=1;
xx=sqrt(abs(ix*ed-cx-cx*ox))*$6;
yy=sqrt(abs(iy*ed-cy-cx*oy))*$7;
vx=xx*100;
vy=yy*100;
lx=xx==0||yy==0?log(1^-8)*$1:log($12?yy^2:xx*yy)*$1;
ly=xx==0||yy==0?log(1^-8)*$1:log($13?xx^2:xx*yy)*$1;
vx+=($14?-1:1)*lx;
vy+=($15?-1:1)*ly;
vx*=w/ed;
vy*=h/ed;
vx*=$8;
vy*=$9;
i(vx,vy,z,c,$17,($16?3:2));
"

if $11 shift 50%,50%,0,0,3,1 fi
#@cli rep_stitch: _offset,_thickness,_modulo,_interpolation,_boundary,0<_sublevel,randomize_stitching,0<=_angle<=360..._angle
#@cli : Multiple angles are permitted.
rep_stitch:
e[] "Stitches image with offset of $1 px, and thickness of $2 px."
repeat $! l[$>]
is={s}
iw={w}
ih={h}
l[0] ($*) rv endl
if $4<0 v + error "Interpolation cannot be less than zero!" v - fi
f[0] "x==3?i+1:i"
if w#0<8 v + error "There must be angle input!" v - fi
if w#0==8 _rep_stitch. {i(#0,0,0)},{i(#0,7,0)},{crop(#0,1,0,6,1)} rm[0]
else
interpolation={i(#0,3,0)}
repeat {w#0-8} . done
repeat {w#0-7} _rep_stitch[{$<+1}] {i(#0,0,0)},{i(#0,{7+$<},0)},{crop(#0,1,0,6,1)},0,1 done
repeat {w#0-8} add[2,{4+$>}] done
f[2] i%{w#0-7} +[2] 1 rv[0,2] rm[2] r[0] 100%,100%,100%,$is f[0] i(#i0) k[0]
r $iw,$ih,100%,100%,$interpolation
fi
endl done
_rep_stitch:
#Warning! _rep_stitch is a local command! Remove the _ in left side to make it nonlocal! angle is $2 #
skip ${3=1},${4=20},${5=3},${6=1},${7=1},${8=0},${9=1},${10=0}
if $7<0 v + error "Sublevel cannot be zero!" v - fi
ang={pi*($2/180)}
ang2={pi*(($2+90)/180)}
iw={w}
ih={h}
if $5>0 r {($7+1)*100}%,{($7+1)*100}%,100%,100%,1 fi
{w},{h},1,1,sur=x*cos($ang)+y*sin($ang);res=floor(sur/($3*($7+1)));$4?abs(res)%$4:abs(res)
{max(1,round(iM,1,1))},1,1,1,u(-1,1) n. -1,1 map.. . rm.
repeat s#0
    sh[0] $>
    f. "sx=($7+1)*$1*cos("$ang2")*i#1;sy=($7+1)*$1*sin("$ang2")*i#1;sx+=x;sy+=y;i(sx,sy,z,c,$5,$6)" rm.
done
if !$10 k[0] else k[0,1] if !$8 f. sur=x*cos($ang)+y*sin($ang);res=floor(sur/($3*($7+1)));abs(res)%2 fi fi
if $5>0 if $9 r[0] {$iw},{$ih},100%,100%,$5 fi fi
#@cli rep_polkal: (eq. to rep_polar_kaleidoscope)
rep_polkal:rep_polar_kaleidoscope $*
#@cli rep_polar_kaleidoscope: _angle_cut_repeat>0,_radial_cut_repeat>0,_angle,-1<=_shift_x<=1,-1<=_shift_y<=1,_flip_x= { 0=Original | 1=Flipped },_flip_y= { 0=Original | 1=Flipped },_edge_x= { 0=Repeat | 1=Alternating },0<=_edge_y<=2,_radial_fit_dimension= { 0=Minimum | 1=Maximum },_conical_start_ang= { 0=90 | 1=0 },_sublevel>0,0<_interpolation<=5
#@cli : _angle_cut_repeat refers to the amount of time a image will repeat along the center.
#@cli : _radial_cut_repeat refers to the amount of time a image will repeat from the center.
#@cli : _angle refers to the angle of the filter function.
#@cli : _shift_x refers to the horizontal distance distance from the center in relative to the center of the target image(s)
#@cli : _shift_y refers to the verticla distance of the center in relative to the center of the target image(s).
#@cli : _flip_x mirrors the image horizontally prior to the polar effect.
#@cli : _flip_y mirrors the image vertically prior to the polar effect.
#@cli : _radial_fit_dimension fits the end of radius cut to the min or max dimension.
#@cli : _conical_start_ang starts the polar image from the standard interpretation or straight up.
#@cli : _sublevel refers to the antialiasing degree of the polar effect.
#@cli : Default value: '_angle_cut_repeat=2','_radial_cut_repeat=1','_angle=0','_shift_x=0','_shift_y=0','_flip_x=0','_flip_y=0','_edge_x=1','_edge_y=1','_radial_fit_dimension=0','_conical_start_ang=0','_sublevel=.5','_interpolation=2'
rep_polar_kaleidoscope:
skip ${1=2},${2=1},${3=0},${4=0},${5=0},${6=0},${7=0},${8=1},${9=1},${10=0},${11=0},${12=.5},${13=2}
if $1==0 v + error "Invalid Number - Variable 1" v - fi
if $2==0 v + error "Invalid Number - Variable 2" v - fi
if $4<-1||$4>1 v + error "Invalid Number - Variable 3" v - fi
if $5<-1||$5>1 v + error "Invalid Number - Variable 4" v - fi
if $12<0 v + error "Invalid Number - Variable" 12 v - fi
if $13<=0 v + error "Invalid Number - Variable" 13 v - fi
r2dx {($12+1)*100}%,$13
f "begin(dr=max(w,h)/min(w,h);ang=pi*(($3*-1)/180););
xx=((x-$4*w/2)/w-.5)*2;
yy=((y+$5*h/2)/h-.5)*2;
xx*=w>h?dr:1;
yy*=w>h?1:dr;
XX=xx*cos(ang)-yy*sin(ang);
YY=xx*sin(ang)+yy*cos(ang);
xx=XX;
yy=YY;
xs=($11?atan2(yy,xx)+pi:atan2(xx,yy)+pi)/(2*pi);
xs*=$1;
ys=sqrt(xx^2+yy^2)/($10?dr/1:1);
ys*=$2;
xs=$8?(int(xs)%2!=0?1-(xs-floor(xs)):xs-floor(xs)):xs-floor(xs);
ys=$9?($9-1?(int(ys)%2!=0?1-(ys-floor(ys)):ys-floor(ys)):ys-floor(ys)):ys;
xs=$6?1-xs:xs;
ys=$7?1-ys:ys;
polkal_a=i(abs(xs*w),ys*h,z,c,0,0);
polkal_b=i(xs*w,ys*h,z,c,1,1);
$9?polkal_b:polkal_a;
"
r2dx {(1/($12+1))*100}%,$13
#@cli rep_objvf: eq. to 'rep_objvolumefilt' : (+)
rep_objvf: rep_objvolumefilt $*
#@cli rep_objvolumefilt: 0<=_v1<=100%,0<=_v2<=100%,_mode={ -2=preserve_exterior_filter_max_out || -1=preserve_interior_filter_max_out || 0=preserve_interior || 1=preserve_exterior },_colour1...
#@cli : _v1 and _v2 refers to boundary in percent. By default, this command use alpha as reference unless all channel values are specified next to mode.
#@cli : (eq. to 'rep_objvf').\n
#@cli : Default value: '_mode=1'
rep_objvolumefilt:
skip ${3=0},${4=}
if $1<0||$2<0||$1>1||$2>1 error ""(""$"1>=0&&"$"1"<=1)"&&"(""$"2>=0&&"$"2"<=1)==F"" fi
if (max($1,$2)-min($1,$2))==1 error "max"(""$"1,"$"2")"-min"(""$"1,"$"2")"<1==F" fi
if ($1!=$2)
repeat $! l[$>]
    ssize={s}
    if narg(${4--1})&&s>1
        if (narg(${4--1})<($ssize-1)) error "{narg(${4--1})}>={$ssize-1}==F" fi
        if narg(${4--1})<$ssize +channels {s-1} colormap. 0,1,2 alp={i(#-1,0,0)} rm. fi 
        100%,100%,100%,1,"begin(
            const ss="$ssize"-1;
            ref_color=vectorss(${4--1});
        );
        vectorss(I#0)!=ref_color?1:0
        "
        if narg(${4--1})<$ssize End={vector$ssize(${4--1},$alp)}
        else End={vector$ssize(${4--1})}
        fi
    else 
        +channels {s-1} 
        End={vector$ssize(0)}
    fi
    if !iv#-1 error "Variance>0==F" fi
    f. i?1 area_fg. 0,1
    if $3<0 f. i==iM?0:i fi
    +f. i==0?iM:i
    newmin={im#-1}
    rm.
    MM={iM#-1-$newmin}
    area_1={$1*$MM}
    area_2={$2*$MM}
    area_1+=$newmin
    area_2+=$newmin
    minarea={min($area_1,$area_2)}
    maxarea={max($area_1,$area_2)}
    if $3>=0
        if $3 f.. !(i0#-1>=$minarea&&i0#-1<=$maxarea)?I:[$End]
        else  f.. i0#-1>=$minarea&&i0#-1<=$maxarea?I:[$End]
        fi
    else
        if $3<-1 f.. if(i0#-1,(!(i0#-1>=$minarea&&i0#-1<=$maxarea)?I:[$End]),I)
        else     f.. if(i0#-1,(i0#-1>=$minarea&&i0#-1<=$maxarea?I:[$End]),I)
        fi
    fi
    rm.
    vv=0
    repeat s
        sh $>
        vv+={iv#-1}
        rm.
    done
    if !$vv error "Final Variance>0==F" fi
endl done
fi
#@cli rep_form_pixel: _form_id<24,_form_quad_lx!=0,_form_quad_ly!=0,_form_ratio[%]!=0,_angle,0<=_reflect_dir<=2,_sublevel,_interpolation<6,_keep_original_size={ 0=resized_result | 1=preserve_original_size },_shape_option_1..._shape_option_n
#@cli : _form_id refers to the id or name of shape. circle is a valid form id, and any integer number that is 0-24 inclusive is a form id.
#@cli : _form_quad_lx refers to the size of the tile in pixel form. It cannot be 0 unless you want to use _form_quad_ly variable to define the tile width.
#@cli : _form_quad_ly refers to the size of the tile in pixel form. It cannot be 0 unless you want to use _form_quad_lx variable to define it tile height.
#@cli : _form_ratio refers to the how much the shape fills each tile.
#@cli : _angle refers to the rotation of shapes per tile
#@cli : _reflect_dir refers to the mirroring of each shape. 1,2 means the mirroring is applied.
#@cli : _sublevel refers to the initial size of the shape to be scaled down to fit tiles.
#@cli : _interpolation refers to the interpolation of the scaling of shapes to fit each tile.
#@cli : _keep_original_size places the image at center if it a value greater than 0. Otherwise, the filter will proceed keeping all the tiles at the same size.
#@cli : If _form_id is a negative number, then it will use the layer number 0 as form reference. Forms that supports dynamic options are fern,gear,polygon,snowflake,star. Dynamic options corresponds to _shape_option_n.\n
#@cli : Note: _shape_option_1 can be empty. n refers to corresponding shape option.\n
#@cli : Default value: '_form_ratio=1','_ang=0','_reflect_dir=0','_sublevel=.5','_interpolation=2'
#@cli : $ sp tiger rep_form_pixel star,35,35,,,,,,8
#@cli : $ sp lena rep_form_pixel cupid,35,35,,24,1
rep_form_pixel:
skip ${9=0}
sid="$1"
isnum_sid={isnum($sid)}
isint_sid={isint($sid)}
isnis={$isnum_sid&&$isint_sid}
if $isnis if $sid>=0 sid=${"-arg "1+$sid"","australia,barbedwire,circle,crosshair,cupid,diamond,dragonfly,fern,flip,gear,gumleaf,heart,information,kookaburra,mail,mapleleaf,paint_splat,paw,phone,polygon,rooster,shopping_cart,snowflake,star"} fi fi
isnum_sid={isnum($sid)}
isint_sid={isint($sid)}
isnis={$isnum_sid&&$isint_sid}
if $#>=9
    if $9
    {$!},1,1,2,[w#x,h#x]
    store. original_dimension
    fi
fi
+store[0] __shape_reference
if $isnis
    r[0] {ceil(w/abs($2))*abs($2)},{ceil(h/abs($3))*abs($3)},100%,100%,0,0,.5,.5
    r[^0] {ceil(w/abs($2))*abs($2)},{ceil(h/abs($3))*abs($3)},100%,100%,0,1,.5,.5
else
    r {ceil(w/abs($2))*abs($2)},{ceil(h/abs($3))*abs($3)},100%,100%,0,1,.5,.5
fi
if $isnis
    if $!>1 apply_parallel[^0] "$__shape_reference rv _rep_form_pixel $*"
    else apply_parallel "$__shape_reference rv _rep_form_pixel $*"
    fi
else
    apply_parallel "_rep_form_pixel $*"
fi
if $#>=9
    if $9
    $original_dimension
    repeat $!-1
    r[$>] {i(#-1,$>,0,0,0)},{i(#-1,$>,0,0,1)},100%,100%,0,0,.5,.5
    done
    rm.
    fi
fi
_rep_form_pixel:
skip ${4=},${5=},${6=},${7=},${8=},${9=}
if narg($4) form_ratio={abs($4)} else form_ratio=1 fi
if narg($5) ang=$5 else ang=0 fi
if narg($6) mi={abs($6)} else mi=0 fi
if narg($7) sub={abs($7)} else sub=.5 fi
if narg($8) interpolation={abs($8)} else interpolation=5 fi
sid="$1"
isnum_sid={isnum($sid)}
isint_sid={isint($sid)}
isnis={$isnum_sid&&$isint_sid}
tw=abs($2)
th=abs($3)
if !{$tw||$th} v + error "Invalid Dimension!" v - fi
tw={!$tw?$th:$tw}
th={!$th?$tw:$th}
sub+=1
interpolation+=1
if $form_ratio==0||$form_ratio>1 v + error "Invalid Form Ratio Number!" v - fi
if $isnis if $sid>=0 sid=${"-arg "1+$sid"","australia,barbedwire,circle,crosshair,cupid,diamond,dragonfly,fern,flip,gear,gumleaf,heart,information,kookaburra,mail,mapleleaf,paint_splat,paw,phone,polygon,rooster,shopping_cart,snowflake,star"} fi fi
isnum_sid={isnum($sid)}
isint_sid={isint($sid)}
isnis={$isnum_sid&&$isint_sid}
l[0]
    if !$isnis
        if $#>9 shape_$sid {max($tw,$th)*$sub},${10--1}
        else shape_$sid {max($tw,$th)*$sub}
        fi
        rv
    fi
endl
if abs($ang)%360!=0 rotate[0] $ang,1 fi
if $mi==1 mirror[0] x elif $mi==2 mirror[0] y fi
n[0] 0,1
if $isnis
    if s#0<=4&&s#0>1 l[0] s c,{if(s==4,-3,if(s==2,-1,-s))} if $!==2 to_gray.. *[-2,-1] else to_gray fi endl
    elif s#0==5 l[0] s c,-4 cmyk2rgb.. to_gray.. *[-2,-1] endl fi
fi
autocrop[0] 0
shape_image_ratio={w#0/h#0}
target_image_ratio={$tw/$th}
resize_width={$target_image_ratio>$shape_image_ratio?w#0*($th/h#0):$tw}
resize_height={$target_image_ratio>$shape_image_ratio?$th:h#0*($tw/w#0)}
r[0] {$resize_width*$form_ratio},{$resize_height*$form_ratio},1,1,{$interpolation},0,.5,.5
r[0] {$tw},{$th},1,1,0,0,.5,.5
cut[0] 0,1 n[0] 0,1
ti_l={$!-1}
repeat $!-1 l[0,{$>+1}]
    s. x,{w#1/w#0}
    ti_w={$!-1}
    s[^0] y,{h#1/h#0}
    ti_h={($!-1)/$ti_w}
    repeat $!-1 l[0,{$>+1}]
        .
        repeat s#-1
        sh. $>
        if iv#-1!=0
            sh... $>
            f. i*i0#0
            f.. i*(1-i0#0)
            f.. is/((1-ia#0)*w*h)
            f. is/(ia#0*w*h)
            f.. i#-1*i0#0+i*(1-i0#0)
            rm[^0-2]
        else
            rm.
        fi
        done
        rm..
    endl done
    l[^0]
        repeat $ti_w
            a[{$<*$ti_h}-{($<+1)*$ti_h-1}] y
        done
        a x
    endl
endl done
rm[0]
#@cli rep_tfrac: eq. to 'rep_thorn_fractal' : (+)
rep_tfrac: rep_thorn_fractal $*
#@cli rep_thorn_fractal: style= { <-1=Custom Alternating Formula | -1= Custom Formula | 0= Normal | 1= Normal Inverted | 2= Tanh Stroke 1 | 3= Tanh Stroke 2 | 4= Asymphological Vibrato | 5= Asymphological Basic | 6= Asymphological Basic 2 | 7= Asymphochaos | 8= Petallian | 9= Semi-Thorny Petallian | 10= Thorny Petal 1| 11= Thorny Petal 2 | 12= Inflation | 13= Inflation 2 | 14= Earthing | 15= Acrylic Earthing | 16= Unearthing Origami | 17= Cubic Unearthing | 18= Webbing Cubic Unearthing | 19= Chaotic Hooks | 20= Echo Wide | 21= Echo Squircle | 22= Echo Hall | 23= Echo Hall 2 | 24= Liquid Parabolic | 25= Chaos-Vibrato | 26= Chaos Deep-Vibrato | 27= Chaos Spacetime | 28= Parabolic | 29= Parabolic Chaos | 30= Cubic-Diamond Chaos | 31= C-Line | 32= Contour Chaos | 33= Spiderweb-Diamond | 34= Acrylica | 35= Refractive Space | 36= Smooth-Artistry | 37= Ferrofluid | 38= Triangular Interweaving | 39= Fabric Chaos | 40= Reverse Tangent Division | 41= Chaotic Tangent | 42= Alternating Chaos 1 | 43= Alternating Chaos 2 | 44= Alternating Chaos 3 | 45= Alternating Chaos 4 },_escape>0,_iteration>0,_subsampling_level>=1,_cx,_cy,_r_xy>0,_r_x>0,_r_y>0,_r_pi= { 0=r_xy multiplied by 1 | 1=r_xy multiplied by pi },_o_x,_o_y,_function_angle,_custom_x,_custom_y
#@cli : Thorn Fractal is the fractal attributed to Andrew Wayne Graff, alternatively named the "Secant Sea". The code was adapted from Sample C source code provided by Adam Majewski.\n
#@cli : Source - http://paulbourke.net/fractals/thorn/#dane\n
#@cli : Alternating Chaos Formula are alternating formula founded by MadJik and are originally implemented in Fractal Attractor Plugin for Paint.NET.
#@cli : (eq. to 'rep_tfrac').\n
#@cli : 'style' variable is used to define how the thorn fractal will look like with predefined formula. Use a value less than 0 to use custom formula.
#@cli : 'escape' variable is used to define the minimum value to escape from the iterative loop.
#@cli : 'iteration' variable defines how much repetition of loop used to find the end value.
#@cli : 'subsampling_level' defines the subsampling level of image.
#@cli : 'cx' is a number used to add to a variable involving distortion within the x-axis during the loop used for fractal generation.
#@cli : 'cy' is a number used to add to a variable involving distortion within the y-axis during the loop used for fractal generation.
#@cli : 'r_xy' defines how much the general infinite line boundary will repeat within the xy axis.
#@cli : 'r_x' defines how much the general infinite line boundary will repeat within the x axis.
#@cli : 'r_y' defines how much the general infinite line boundary will repeat within the y axis.
#@cli : 'r_pi' is used as a multiple to r_xy or to normalize the xmin and xmax to pi ranges.
#@cli : 'o_x' offset the resulting image within the x-direction.
#@cli : 'o_y' offset the resulting image within the y-direction.
#@cli : 'ang' defines the function angle of the thorn fractal.
#@cli : 'custom_x' variable is used to define custom formula for vx variable for the thorn fractal formula by default.
#@cli : 'custom_y' variable is used to define custom formula for vy variable for the thorn fractal formula by default.\n
#@cli : - Note on custom formula usage -\n
#@cli : Available adjustible variable: vx,vy,a,b\n
#@cli : 'a' defines result of number defined by vx equation based on the number of repeats needed to escape from the iterative loop to check when resulting value is greater than escape number.
#@cli : 'b' defines result of number defined by vy equation based on the number of repeats needed to escape from the iterative loop to check when resulting value is greater than escape number.
#@cli : 'vx' defines the formula used to distort by the x-axis.
#@cli : 'vy' defines the formula used to distort by the y-axis.\n
#@cli : Multiple expressions are supported, and they are separated by the character semicolon-[;]. Furthermore, the usage of commas-[,] requires you to wrap them around with quotation marks-["]. See example of usage with commas. If it the only expression, then it would be used for calculation of vx or vy. Otherwise, the first expression may be the only one used for calculation of vx or vy.\n
#@cli : - End of Note on custom formula usage -\n
#@cli : Default values: '_escape=50000','_iteration=255','_subsampling_level=4','_cx=0','_cy=0','_r_xy=1','_r_x=1','_r_y=1','_r_pi=1','_o_x=0','_o_y=0','_function_angle=0','_custom_x=','_custom_y='
#@cli : $ 1024,1024,1,1 rep_thorn_fractal -1,10000,255,4,2.544,-5.2424,1,1,1/2,1,0,0,30,"atan2(a^2,b^2)/cos(b)",b/sin(a)
rep_thorn_fractal:
skip ${2=50000},${3=255},${4=4},${5=0},${6=0},${7=1},${8=1},${9=1},${10=1},${11=0},${12=0},${13=0},${14=},${15=}
if $1<0 if !(narg($14)&&narg($15)) v + error "When using custom formula, there must be an arguments into custom_x and custom_y variables" fi fi
if $1>45 v + error "Formula variable cannot be greater than 45" v - fi
if $2<=0 v + error "Escape Variable cannot be zero or less than zero!" v - fi
if $3<1 v + error "Iteration Variable must be at least 1!" v - fi
if $4<1 v + error "Subsampling level must be at least 1!" v - fi
if !(($7>0&&$8>0)&&$9>0) v + error "Repeat variables cannot be 0!" v - fi
repeat $! l[$>]
ww={w}
hh={h}
r {$4*100}%,{$4*100}%,1,1,0
r {w%2==0?w+1:w},{h%2==0?h+1:h},1,1,0
f "begin(altern=0;ang=pi*($13/180);sd=max(w,h)/min(w,h);
    if($1>41,ff=$1-38;,ff=abs($1)-1;);
    if($1<-1,
        vxf(a,b)=(vec=[${14--1}];vec[altern*2]);
        vyf(a,b)=(vec=[${14--1}];vec[altern*2+1]);,
    if($1==-1,
        vxf(a,b)=$14;
        vyf(a,b)=$15;,
    if($1==0,
        vxf(a,b)=a/cos(b);
        vyf(a,b)=b/sin(a);,
    if($1==1,
        vxf(a,b)=a/sin(b);
        vyf(a,b)=b/cos(a);,
    if($1==2,
        vxf(a,b)=a/tan(b);
        vyf(a,b)=b/tan(a);,
    if($1==3,
        vxf(a,b)=(a/cos(b))*sin(b);
        vyf(a,b)=(b/sin(a))*cos(a);,
    if($1==4,
        vxf(a,b)=(a*tan(a*b))/sin(b);
        vyf(a,b)=(b*tan(a*b))/cos(a);,
    if($1==5,
        vxf(a,b)=(a+tan(a*b))/sin(b);
        vyf(a,b)=(b+tan(a*b))/cos(a);,
    if($1==6,
        vxf(a,b)=(a-tan(a*b))/sin(b);
        vyf(a,b)=(b-tan(a*b))/cos(a);,
    if($1==7,
        vxf(a,b)=(a/(cos(b)))+(a/(sin(b)));
        vyf(a,b)=(b/(cos(a)))+(b/(sin(a)));,
    if($1==8,
        vxf(a,b)=a/(cos(b)*sin(b));
        vyf(a,b)=b/(sin(a)*cos(a));,
    if($1==9,
        vxf(a,b)=a/(cos(tan(b))*sin(tan(b)));
        vyf(a,b)=b/(sin(tan(a))*cos(tan(a)));,
    if($1==10,
        vxf(a,b)=(tan(a)+b)/(cos(tan(b))*sin(tan(b)));
        vyf(a,b)=(tan(b)+a)/(sin(tan(a))*cos(tan(a)));,
    if($1==11,
        vxf(a,b)=(a+tan(a)+tan(b))/(cos(tan(b))*sin(tan(b)));
        vyf(a,b)=(b+tan(a)+tan(b))/(sin(tan(a))*cos(tan(a)));,
    if($1==12,
        vxf(a,b)=(a+tan(a)+tan(b))/cos(a);
        vyf(a,b)=(b+tan(a)+tan(b))/sin(a);,
    if($1==13,
        vxf(a,b)=(a+tan(a)+tan(b))/sin(b);
        vyf(a,b)=(b+tan(a)+tan(b))/cos(a);,
    if($1==14,
        vxf(a,b)=(a+tan(a)/tan(b))/cos(a);
        vyf(a,b)=(b+tan(a)/tan(b))/sin(b);,
    if($1==15,
        vxf(a,b)=(b+tan(a)/tan(b))/cos(a);
        vyf(a,b)=(a+tan(a)/tan(b))/sin(b);,
    if($1==16,
        vxf(a,b)=(b+tan(b)/tan(a))/cos(a);
        vyf(a,b)=(a+tan(a)/tan(b))/sin(b);,
    if($1==17,
        vxf(a,b)=(b+tan(b)/tan(a))/cos(a);
        vyf(a,b)=(a+tan(b)/tan(a))/sin(b);,
    if($1==18,
        vxf(a,b)=(b+tan(a)/tan(a))/cos(a);
        vyf(a,b)=(a+tan(b)/tan(a))/sin(b);,
    if($1==19,
        vxf(a,b)=b+tan(a)/(a/(cos(b)))+(a/(sin(b)));
        vyf(a,b)=a+tan(b)/(b/(cos(a)))+(b/(sin(a)));,
    if($1==20,
        vxf(a,b)=a/sin(a/sin(b));
        vyf(a,b)=b/cos(b/cos(a));,
    if($1==21,
        vxf(a,b)=a/cos(a/sin(b));
        vyf(a,b)=b/sin(b/cos(a));,
    if($1==22,
        vxf(a,b)=a/cos(a/atan(sin(b)));
        vyf(a,b)=b/sin(b/atan(cos(a)));,
    if($1==23,
        vxf(a,b)=a/sin(a/atan(cos(b)));
        vyf(a,b)=b/cos(b/atan(sin(a)));,
    if($1==24,
        vxf(a,b)=a/atan(cos(b));
        vyf(a,b)=b/atan(sin(a));,
    if($1==25,
        vxf(a,b)=(a+tanh(a*b))/cos(b);
        vyf(a,b)=(b+tanh(a*b))/sin(a);,
    if($1==26,
        vxf(a,b)=b+tan(b)/(a/(cos(b)))+(a/(sin(a)));
        vyf(a,b)=a+tan(a)/(b/(cos(a)))+(b/(sin(b)));,
    if($1==27,
        vxf(a,b)=(a+tanh(a+b))/cos(b);
        vyf(a,b)=(b+tanh(a+b))/sin(a);,
    if($1==28,
        vxf(a,b)=(a/sin(b))/tan(b);
        vyf(a,b)=(b/cos(a))/tan(a);,
    if($1==29,
        vxf(a,b)=a/(tan(b)*cos(b)*sin(b));
        vyf(a,b)=b/(tan(a)*cos(a)*sin(a));,
    if($1==30,
        vxf(a,b)=a/tan(cos(b));
        vyf(a,b)=b/tan(sin(a));,
    if($1==31,
        vxf(a,b)=(a+tanh(a*b))/(cos(b)*sin(a));
        vyf(a,b)=(b+tanh(a*b))/(sin(b)*cos(a));,
    if($1==32,
        vxf(a,b)=(a+tan(cos(a)*sin(b)))/cos(a);
        vyf(a,b)=(b+tan(sin(a)*cos(b)))/sin(b);,
    if($1==33,
        vxf(a,b)=(tan(a+b)*b)/cos(b);
        vyf(a,b)=(tan(a-b)*a)/sin(a);,
    if($1==34,
        vxf(a,b)=(a/cos(b))*sin(a);
        vyf(a,b)=(b/sin(a))*cos(b);,
    if($1==35,
        vxf(a,b)=a/tan(cos(b)+sin(b));
        vyf(a,b)=b/tan(cos(a)+sin(a));,
    if($1==36,
        vxf(a,b)=a+(tanh(a+b)/cos(b));
        vyf(a,b)=b+(tanh(a+b)/sin(a));,
    if($1==37,
        vxf(a,b)=(a/(cos(b)))/(b/(sin(a)));
        vyf(a,b)=(b/(cos(a)))/(a/(sin(b)));,
    if($1==38,
        vxf(a,b)=(a*tan(a+b))/sin(b);
        vyf(a,b)=(b*tan(a+b))/cos(a);,
    if($1==39,
        vxf(a,b)=a/(atan2(b^2,a^2)*tan(b));
        vyf(a,b)=b/(atan2(b^2,a^2)*tan(a));,
    if($1==40,
        vxf(a,b)=tan(a)/b;
        vyf(a,b)=tan(b)/a;,
    if($1==41,
        vxf(a,b)=a/atan(b/cos(a/sin(a)));
        vyf(a,b)=b/atan(a/sin(b/cos(b)));,
    if($1>41,
        vxf(a,b)=(
            if(altern==0,a/cos(b);,
            if(altern==1,a/sin(b);,
            if(altern==2,a/tan(b);,
            if(altern==3,a/atan(b);,a
            );
            );
            );
            );
        );
        vyf(a,b)=(
            if(altern==0,b/sin(a);,
            if(altern==1,b/cos(a);,
            if(altern==2,b/tan(a);,
            if(altern==3,b/atan(a);,b
            );
            );
            );
            );
        );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
    );
);
xx=2*((x/w)-.5);
yy=2*((y/h)-.5);
if(w>h,xx*=sd,yy*=sd);
zx=$8*($10?pi:1)*$7*((xx*cos(ang)-yy*sin(ang))+($11*cos(ang)-$12*sin(ang)));
zy=$9*($10?pi:1)*$7*((xx*sin(ang)+yy*cos(ang))+($11*sin(ang)+$12*cos(ang)));
vx=zx;
vy=zy;
for(v=0,v<$3,v++,
    a=vx;
    b=vy;
    vx=vxf(a,b);
    vy=vyf(a,b);
    vx+=$5;
    vy+=$6;
    if($1>41||$1<-1,
        altern++;
        if(altern>ff,altern=0);
    );
    if((vx^2+vy^2)>$2,break());
);
abs(zx)!=0&&abs(zy)!=0?v;
"
r {$ww},{$hh},1,1,5
endl done
#@gui _<b>Testing</b>
#@gui <i>Reptorian</i>
#@gui Modulos Operations: fx_modulo, fx_modulo_preview(0)
#@gui : note=note("This filters applies modulo operation after arithmetic operation. Future version of this filter might be able to be used on different color space and channels.")
#@gui : sep=separator()
#@gui : Multiply=float(1,0,32)
#@gui : Addition=int(0,0,255)
#@gui : sep=separator(), note=note("<small>Author : <i>Reptorian</i>.      Latest update : <i>2018/08/18</i>.</small>")
fx_modulo:
repeat $! l[$>] split_opacity l[0]
mul $1 add $2 mod 256
endl a c endl done
fx_modulo_preview :
gui_split_preview "fx_modulo $*"
#@gui Channel Overblur-Overline-Blur-Sharpen : fx_OOBS, _fx_OOBS_preview(0)
#@gui : sep=separator()
#@gui : Color Space=choice("RGB&#47;sRGB","HSV&#47;HSV8","HSL&#47;HSL8","HSI&#47;HSI8","LCH&#47;LCH8","Lab&#47;Lab8","YCbCr&#47;YCbCrGLIC","YIQ&#47;YIQ8","YUV&#47;YUV8","XYZ&#47;XYZ8")
#@gui : Alt Choice=bool(0)
#@gui : sep=separator()
#@gui : note=note("Configuration for OOBS filter")
#@gui : Use Master Editor(Manipulate Multiple Channels at Once?)=bool(1)
#@gui : Edit Channel #1?=bool(1)
#@gui : Edit Channel #2?=bool(1)
#@gui : Edit Channel #3?=bool(1)
#@gui : Edit Alpha Channel?=bool(0)
#@gui : sep=separator()
#@gui : note=note("<b>Master Editor</b>")
#@gui : Overblur/Overline/Sharpen/Blur=choice ("Overblur","Overline","Blur","Sharpen")
#@gui : Effect Factor=float (1,.1,100)
#@gui : Multiplication Factor=float (1,.1,10)
#@gui : Blend Operation=choice (21,"add","alpha","and","average","burn","darken","difference","divide","dodge","exclusion","freeze","grainextract","grainmerge","hardlight","hardmix","interpolation","lighten","linearburn","linearlight","multiply","normal","negation","or","overlay","pinlight","reflect","screen","shapeaverage","softburn","softdodge","softlight","stamp","subtract","vividlight","xor")
#@gui : Blending Opacity=float (100,.01,100)
#@gui : sep=separator(), note=note("<u>Individual Channels</u>"), sep=separator()
#@gui : note=note("<b>Channel #1</b>")
#@gui : Overblur/Overline/Sharpen/Blur=choice ("Overblur","Overline","Blur","Sharpen")
#@gui : Effect Factor=float (1,.1,10)
#@gui : Multiplication Factor=float (1,.1,10)
#@gui : Blend Operation=choice (21,"add","alpha","and","average","burn","darken","difference","divide","dodge","exclusion","freeze","grainextract","grainmerge","hardlight","hardmix","interpolation","lighten","linearburn","linearlight","multiply","normal","negation","or","overlay","pinlight","reflect","screen","shapeaverage","softburn","softdodge","softlight","stamp","subtract","vividlight","xor")
#@gui : Blending Opacity=float (100,.01,100)
#@gui : sep=separator()
#@gui : note=note("<b>Channel #2</b>")
#@gui : Overblur/Overline/Sharpen/Blur=choice ("Overblur","Overline","Blur","Sharpen")
#@gui : Effect Factor=float (1,.1,10)
#@gui : Multiplication Factor=float (1,.1,10)
#@gui : Blend Operation=choice (21,"add","alpha","and","average","burn","darken","difference","divide","dodge","exclusion","freeze","grainextract","grainmerge","hardlight","hardmix","interpolation","lighten","linearburn","linearlight","multiply","normal","negation","or","overlay","pinlight","reflect","screen","shapeaverage","softburn","softdodge","softlight","stamp","subtract","vividlight","xor")
#@gui : Blending Opacity=float (100,.01,100)
#@gui : sep=separator()
#@gui : note=note("<b>Channel #3</b>")
#@gui : Overblur/Overline/Sharpen/Blur=choice ("Overblur","Overline","Blur","Sharpen")
#@gui : Effect Factor=float (1,.1,10)
#@gui : Multiplication Factor=float (1,.1,10)
#@gui : Blend Operation=choice (21,"add","alpha","and","average","burn","darken","difference","divide","dodge","exclusion","freeze","grainextract","grainmerge","hardlight","hardmix","interpolation","lighten","linearburn","linearlight","multiply","normal","negation","or","overlay","pinlight","reflect","screen","shapeaverage","softburn","softdodge","softlight","stamp","subtract","vividlight","xor")
#@gui : Blending Opacity=float (100,.01,100)
#@gui : sep=separator()
#@gui : note=note("<b>Alpha Channel</b>")
#@gui : Overblur/Overline/Sharpen/Blur=choice ("Overblur","Overline","Blur","Sharpen")
#@gui : Effect Factor=float (1,.1,10)
#@gui : Multiplication Factor=float (1,.1,10)
#@gui : Blend Operation=choice (21,"add","alpha","and","average","burn","darken","difference","divide","dodge","exclusion","freeze","grainextract","grainmerge","hardlight","hardmix","interpolation","lighten","linearburn","linearlight","multiply","normal","negation","or","overlay","pinlight","reflect","screen","shapeaverage","softburn","softdodge","softlight","stamp","subtract","vividlight","xor")
#@gui : Blending Opacity=float (100,.01,100)
#@gui : sep=separator(),Preview type=choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep=separator(),note=note("<small>Author: <i>Reptorian</i> Latest update: <i>2019/01/7</i>.</small>")
fx_OOBS:
-m "MergeChoice : $""=_mode" -MergeChoice "add","alpha","and","average","burn","darken","difference","divide","dodge","exclusion","freeze","grainextract","grainmerge","hardlight","hardmix","interpolation","lighten","linearburn","linearlight","multiply","normal","negation","or","overlay","pinlight","reflect","screen","shapeaverage","softburn","softdodge","softlight","stamp","subtract","vividlight","xor","edges","error"
split_opacity
local[0]
if $2==0
if $1==1 rgb2hsv
elif $1==2 rgb2hsl
elif $1==3 rgb2hsi
elif $1==4 rgb2lch
elif $1==5 rgb2lab
elif $1==6 rgb2ycbcr
elif $1==7 rgb2yiq
elif $1==8 rgb2yuv
elif $1==9 rgb2xyz
fi
elif $2==1
if $1==0 rgb2srgb
elif $1==1 rgb2hsv8
elif $1==2 rgb2hsl8
elif $1==3 rgb2hsi8
elif $1==4 rgb2lch8
elif $1==5 rgb2lab8
elif $1==6 rgb2ycbcrglic
elif $1==7 rgb2yiq8
elif $1==8 rgb2yuv8
elif $1==9 rgb2xyz8
fi fi
s c
if $3==1
if $4==1 local[0] +oobs_edit[0] $8,$9,$10 -blend[0,1] ${_mode{$11+1}},$12/100 endl fi
if $5==1 local[1] +oobs_edit[0] $8,$9,$10 -blend[0,1] ${_mode{$11+1}},$12/100 endl fi
if $6==1 local[2] +oobs_edit[0] $8,$9,$10 -blend[0,1] ${_mode{$11+1}},$12/100 endl fi
elif $3==0
if $4==1 local[0] +oobs_edit[0] $13,$14,$15 -blend[0,1] ${_mode{$16+1}},$17/100 endl fi
if $5==1 local[1] +oobs_edit[0] $18,$19,$20 -blend[0,1] ${_mode{$21+1}},$22/100 endl fi
if $6==1 local[2] +oobs_edit[0] $23,$24,$25 -blend[0,1] ${_mode{$26+1}},$27/100 endl fi
fi
a c
if $2==0
if $1==1 hsv2rgb
elif $1==2 hsl2rgb
elif $1==3 hsi2rgb
elif $1==4 lch2rgb
elif $1==5 lab2rgb
elif $1==6 ycbcr2rgb
elif $1==7 yiq2rgb
elif $1==8 yuv2rgb
elif $1==9 xyz2rgb
fi
elif $2==1
if $1==0 srgb2rgb
elif $1==1 hsv82rgb
elif $1==2 hsl82rgb
elif $1==3 hsi82rgb
elif $1==4 lch82rgb
elif $1==5 lab82rgb
elif $1==6 ycbcrglic2rgb
elif $1==7 yiq82rgb
elif $1==8 yuv82rgb
elif $1==9 xyz82rgb
fi fi
endl
local[1]
if {$3==1} if $7==1 +oobs_edit[0] $8,$9,$10 -blend[0,1] ${_mode{$11+1}},$12/100 fi
elif {$3==0} if $7==1 +oobs_edit[0] $28,$29,$30 -blend[0,1] ${_mode{$31+1}},$32/100 fi
fi
endl
a c
oobs_edit :
if $1==0 -overblur_overline[0] 0,$2,$3 fi
if $1==1 -overblur_overline[0] 1,$2,$3 fi
if $1==2 -blur[0] {$2*$3} fi
if $1==3 -sharpen[0] {$2*$3} fi
overblur_overline :
if $1==0 +blur[0] $2
elif $1==1 +sharpen[0] $2
fi
+blend[0,1] difference
mul[2] $3
remove[1]
-blend[0,1] add
_fx_OOBS_preview :
gui_split_preview "fx_OOBS ${1--2}",$-1
#@gui Vibrato: fx_vibrato, _fx_vibrato_preview(0)
#@gui : note=note("This is the advanced version of the Vibrato filter. If you do want to manipulate multiple channels at once, use <u>Vibrato - Basic</u> filter. <i>Note: Disable channel mulplication for non-transparent images.</i> \n\n")
#@gui : note=note("This filter is the one of the G'MIC version of <b>MadJik's</b> <i>Paint.NET plugin</i>")
#@gui : sep=separator()
#@gui : Colour Space=choice("RGB", "CMY", "HSI", "HSL", "HSV", "LAB", "LCH", "YCbCr", "YCbCr-Glic", "YUV", "YIQ", "XYZ", "Bayer")
#@gui : sep=separator()
#@gui : Manipulate Multiple Channels at Once?=bool(1)
#@gui : Process Channel 1?=bool(1)
#@gui : Process Channel 2?=bool(1)
#@gui : Process Channel 3?=bool(1)
#@gui : Process Alpha Channel?=bool(1)
#@gui : Inherit Alpha?=bool(1)
#@gui : X-Orientation=bool(1)
#@gui : Y-Orientation=bool(1)
#@gui : U- Factor=float(.85,.1,15)
#@gui : V- Factor=float(.85,.1,15)
#@gui : X-Scale Factor=float(1,.1,15)
#@gui : Y-Scale Factor=float(1,.1,15)
#@gui : XY-Scale Factor=float(1,.1,3)
#@gui : Percentage-Based X Pixel Shift=float(0,-200,200)
#@gui : Percentage-Based Y Pixel Shift=float(0,-200,200)
#@gui : Elevation=float(.7,-100,100)
#@gui : Multiply Blending=bool(0)
#@gui : Invert Vibrato=bool(0)
#@gui : Vibrato Blending Factor=float (100,0,100)
#@gui : Channel Influence Factor=float(1,-8,8)
#@gui : Final Channel Modulos Multiplication Factor=float(1,1,32)
#@gui : sep=separator()
#@gui : note=note("- <b>Channel #1</b> - ")
#@gui : Process Channel?=bool(1)
#@gui : X-Orientation=bool(1)
#@gui : Y-Orientation=bool(1)
#@gui : U-Factor=float(.85,.1,15)
#@gui : V-Factor=float(.85,.1,15)
#@gui : X-Scale Factor=float(1,.1,15)
#@gui : Y-Scale Factor=float(1,.1,15)
#@gui : XY-Scale Factor=float(1,.1,3)
#@gui : Percentage-Based X Pixel Shift=float(0,-200,200)
#@gui : Percentage-Based Y Pixel Shift=float(0,-200,200)
#@gui : Elevation=float(.7,-100,100)
#@gui : Multiply Blending=bool(0)
#@gui : Invert Vibrato=bool(0)
#@gui : Vibrato Blending Factor=float (100,0,100)
#@gui : Channel Influence Factor=float(1,-8,8)
#@gui : Final Channel Modulos Multiplication Factor=float(1,1,32)
#@gui : sep=separator()
#@gui : note=note("- <b>Channel #2</b> - ")
#@gui : Process Channel?=bool(1)
#@gui : X-Orientation=bool(1)
#@gui : Y-Orientation=bool(1)
#@gui : U-Factor=float(.85,.1,15)
#@gui : V-Factor=float(.85,.1,15)
#@gui : X-Scale Factor=float(1,.1,15)
#@gui : Y-Scale Factor=float(1,.1,15)
#@gui : XY-Scale Factor=float(1,.1,3)
#@gui : Percentage-Based X Pixel Shift=float(0,-200,200)
#@gui : Percentage-Based Y Pixel Shift=float(0,-200,200)
#@gui : Elevation=float(.7,-100,100)
#@gui : Multiply Blending=bool(0)
#@gui : Invert Vibrato=bool(0)
#@gui : Vibrato Blending Factor=float (100,0,100)
#@gui : Channel Influence Factor=float(1,-8,8)
#@gui : Final Channel Modulos Multiplication Factor=float(1,1,32)
#@gui : sep=separator()
#@gui : note=note("- <b>Channel #3</b> - ")
#@gui : Process Channel?=bool(1)
#@gui : X-Orientation=bool(1)
#@gui : Y-Orientation=bool(1)
#@gui : U-Factor=float(.85,.1,15)
#@gui : V-Factor=float(.85,.1,15)
#@gui : X-Scale Factor=float(1,.1,15)
#@gui : Y-Scale Factor=float(1,.1,15)
#@gui : XY-Scale Factor=float(1,.1,3)
#@gui : Percentage-Based X Pixel Shift=float(0,-200,200)
#@gui : Percentage-Based Y Pixel Shift=float(0,-200,200)
#@gui : Elevation=float(.7,-100,100)
#@gui : Multiply Blending=bool(0)
#@gui : Invert Vibrato=bool(0)
#@gui : Vibrato Blending Factor=float (100,0,100)
#@gui : Channel Influence Factor=float(1,-8,8)
#@gui : Final Channel Modulos Multiplication Factor=float(1,1,32)
#@gui : sep=separator()
#@gui : note=note("- <b>Alpha Channel #1</b> - ")
#@gui : Process Channel?=bool(0)
#@gui : X-Orientation=bool(1)
#@gui : Y-Orientation=bool(1)
#@gui : U-Factor=float(.85,.1,15)
#@gui : V-Factor=float(.85,.1,15)
#@gui : X-Scale Factor=float(1,.1,15)
#@gui : Y-Scale Factor=float(1,.1,15)
#@gui : XY-Scale Factor=float(1,.1,3)
#@gui : Percentage-Based X Pixel Shift=float(0,-200,200)
#@gui : Percentage-Based Y Pixel Shift=float(0,-200,200)
#@gui : Elevation=float(.7,-100,100)
#@gui : Multiply Blending=bool(1)
#@gui : Invert Vibrato=bool(0)
#@gui : Vibrato Blending Factor=float (100,0,100)
#@gui : Channel Influence Factor=float(1,-8,8)
#@gui : Final Channel Modulos Multiplication Factor=float(1,1,32)
#@gui : sep=separator(),Preview type=choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep=separator(),note=note("<small>Author: <i>Reptorian</i> Latest update: <i>2018/12/19</i>.</small>")

fx_vibrato:
split_opacity
local[0]
if {$1==1} rgb2cmy
elif {$1==2} rgb2hsi8
elif {$1==3} rgb2hsl8
elif {$1==4} rgb2hsv8
elif {$1==5} rgb2lab8
elif {$1==6} rgb2lch8
elif {$1==7} rgb2ycbcr
elif {$1==8} rgb2ycbcrglic
elif {$1==9} rgb2yuv8
elif {$1==10} rgb2yiq8
elif {$1==11} rgb2xyz8
elif {$1==12} rgb2bayer 0
fi

s c

if {$2==1}
if {$3==1} -vibrato[0] $8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22 fi
if {$4==1} -vibrato[1] $8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22 fi
if {$5==1} -vibrato[2] $8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22 fi
elif {$2==0}
if {$23==1} -vibrato[0] $24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38 fi
if {$39==1} -vibrato[1] $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53,$54 fi
if {$55==1} -vibrato[2] $56,$57,$58,$59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70 fi
fi
a c

if {$1==1} cmy2rgb
elif {$1==2} hsi82rgb
elif {$1==3} hsl82rgb
elif {$1==4} hsv82rgb
elif {$1==5} lab82rgb
elif {$1==6} lch82rgb
elif {$1==7} ycbcr2rgb
elif {$1==8} ycbcrglic2rgb
elif {$1==9} yuv82rgb
elif {$1==10} yiq82rgb
elif {$1==11} xyz82rgb
elif {$1==12} bayer2rgb 0,0,0
fi
endl
if {$2==1}
if {$6==1} -vibrato[1] $8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$7,$19,$20,$21,$22 fi
elif {$2==0}
if {$71==1} -vibrato[1] $72,$73,$74,$75,$76,$77,$78,$79,$80,$81,$82,$83,$84,$85,$86 fi
fi
a c

vibrato:
repeat $! l[$>]
n 0,255
f "
q=($8/100)*w;
l=($9/100)*h;
X=(($1?w-x+q:x+q)/w-.5) * 2 * 1/$5 * 1/$7;
Y=(($2?h-y+l:y+l)/h-.5) * 2 * 1/$6 * 1/$7;
U=sqrt($3);
V=sqrt($4);
Z=((X-Y) * (X-U) * (X+U) * (Y-V) * (Y+V))+ $10;
C=(Z+((1-i/255)/(($3>1?$3:1/$3)*($4>1?$4:1/$4)))*$14)*(Z+((1-i/255)/(($3>1?$3:1/$3)*($4>1?$4:1/$4)))*$14);
F=abs(C)>1?C-int(C):C;
A=$12?F:1-F;
B=$11?(i*A):A*200;
E=$13/100*B+(1-$13/100)*i;
" n 0,255 mul $15 mod 256
endl done

_fx_vibrato_preview :
gui_split_preview "fx_vibrato ${1--2}",$-1

#@gui Construction Material Texture : _cons_turb, _cons_turb_preview(0)
#@gui : note=note("Construction Material Texture filter is based off the following tutorial by <b>theonlychad</b> for Paint.NET software: <a href="https://forums.getpaint.net/topic/16075-concrete-texture-tutorial/">Concrete Texture Tutorial</a>.\n")
#@gui : sep=separator(), note=note("<b>Turbulance Texture</b>")
#@gui : 1-3. Background Color = color(0,0,0)
#@gui : 4. Radius=float(88,1,1024)
#@gui : 5. Octaves=int(8,1,12)
#@gui : 6. Damping per Octave=float(2.5,1,10)
#@gui : 7. Mode=choice(2,"Turbulence","Turbulence 2","Fractal Noise","Fractured Clouds","Stardust","Pea Soup")
#@gui : 8-10. Color Balance = color(128,128,128)
#@gui : sep=separator(), note=note("<b>Noise Processing</b>")
#@gui : 11. Amplitude=float(20,0,200)
#@gui : 12. Noise Type=choice(3,"Gaussian","Uniform","Salt and Pepper","Poisson")
#@gui : sep=separator(), 13. Channel(s)=choice(0,"RGB [All]","RGB [Red]","RGB [Green]","RGB [Blue]","Linear RGB [All]","Linear RGB [Red]","Linear RGB [Green]","Linear RGB [Blue]","YCbCr [Luminance]","YCbCr [Blue-Red Chrominances]","YCbCr [Blue Chrominance]","YCbCr [Red Chrominance]","YCbCr [Green Chrominance]","Lab [Lightness]","Lab [ab-Chrominances]","Lab [a-Chrominance]","Lab [b-Chrominance]","Lch [ch-Chrominances]","Lch [c-Chrominance]","Lch [h-Chrominance]","HSV [Hue]","HSV [Saturation]","HSV [Value]","HSI [Intensity]","HSL [Lightness]","CMYK [Cyan]","CMYK [Magenta]","CMYK [Yellow]","CMYK [Key]","YIQ [Luma]","YIQ [Chromas]")
#@gui : 14. Value Action=choice(1,"None","Cut","Normalize")
#@gui : sep=separator(), note=note("<b>Grayscale Processing</b>")
#@gui : 15. Colour Space=choice("RGB","sRGB")
#@gui : 15. Channel 1=float(1,0,3)
#@gui : 16. Channel 2=float(1,0,3)
#@gui : 17. Channel 3=float(1,0,3)
#@gui : 18. Normalise=bool(1)
#@gui : 19. Desaturation (%)=float (100,0,100)
#@gui : sep=separator(), note=note("<b>Self-Image Processing</b>")
#@gui : 21. Self-Blending=choice(20,"add","burn","dodge","exclusion","freeze","grainextract","grainmerge","hardlight","hardmix","interpolation","linearburn","linearlight","luminance","multiply","negation","overlay","pinlight","reflect","screen","shapeaverage","softburn","softdodge","softlight","stamp","vividlight")
#@gui : 22. Self-Blending Opacity (%)=float (100,0,100)
#@gui : 23. Self-Blending V. Original Blending=choice(15,"add","alpha","and","average","blue","burn","darken","difference","divide","dodge","exclusion","freeze","grainextract","grainmerge","green","hardlight","hardmix","hue","interpolation","lighten","lightness","linearburn","linearlight","luminance","multiply","negation","or","overlay","pinlight","red","reflect","saturation","screen","shapeaverage","softburn","softdodge","softlight","stamp","subtract","value","vividlight","xor")
#@gui : 24. Self-Blend V. Original Opacity (%)=float (100,0,100)
#@gui : sep=separator(), note=note("<b>Value Processing</b>")
#@gui : 25. Value Action=choice(2,"None","Cut","Normalize")
#@gui : 26. Number #1=float(0,0,255)
#@gui : 27. Number #2=float(188,0,255)
#@gui : 28. Equalize?=bool(0)
#@gui : 29. Negate?=bool(0)
#@gui : sep=separator(), note=note("<b>Warp by Intensity</b>")
#@gui : 30. X-Factor=float(0.19,-6,6)
#@gui : 31. Y-Factor=float(0.52,-6,6)
#@gui : sep=separator()
#@gui : 32. X-Offset=float(128,0,255)
#@gui : 34. Y-Offset=float(128,0,255)
#@gui : sep=separator()
#@gui : 34. Correlated Channels=bool(0)
#@gui : 35. Interpolation=choice(1,"Nearest Neighbor","Linear")
#@gui : 36. Boundary=choice(2,"Transparent","Nearest","Periodic","Mirror")
#@gui : sep=separator(), 37. Channel(s)=choice("All","RGBA [All]","RGB [All]","RGB [Red]","RGB [Green]","RGB [Blue]","RGBA [Alpha]","Linear RGB [All]","Linear RGB [Red]","Linear RGB [Green]","Linear RGB [Blue]","YCbCr [Luminance]","YCbCr [Blue-Red Chrominances]","YCbCr [Blue Chrominance]","YCbCr [Red Chrominance]","YCbCr [Green Chrominance]","Lab [Lightness]","Lab [ab-Chrominances]","Lab [a-Chrominance]","Lab [b-Chrominance]","Lch [ch-Chrominances]","Lch [c-Chrominance]","Lch [h-Chrominance]","HSV [Hue]","HSV [Saturation]","HSV [Value]","HSI [Intensity]","HSL [Lightness]","CMYK [Cyan]","CMYK [Magenta]","CMYK [Yellow]","CMYK [Key]","YIQ [Luma]","YIQ [Chromas]")
#@gui : sep=separator(), note=note("<b>Style Processing</b>")
#@gui : 38. Blur Original=float(0,0,16)
#@gui : sep=separator(), note=note("<b>Butterworth Bandpass Processing</b>")
#@gui : 39. Activate Butterworth Bandpass Processing=bool(0)
#@gui : 40. Create Copy?=bool(0)
#@gui : 41. LP Frequency Power=float(3,0,16)
#@gui : 42. LP Order Cube Root=float(2,0,4)
#@gui : 43. HP Frequency Power=float(4,0,16)
#@gui : 44. HP Order Cube Root=float(2,0,4)
#@gui : 45. Colour Space=choice("RGB","sRGB","HSV8","HSV","HSL8","HSL","HSI8","HSI","LCH8","LCH","Lab8","Lab","YCbCr","YCbCrGLIC","YCbCrJPEG","YIQ8","YIQ","YUV8","YUV","HCY","XYZ8","XYZ","CMY","CMYK","Bayer")
#@gui : 46. Absolute=bool(1)
#@gui : 47. Makeup Gain=bool(1)
#@gui : sep=separator(), note=note("<b>Relief Processing</b>")
#@gui : 48. Activate Relief Processing=bool(1)
#@gui : 49. Angle=float(0,0,360)
#@gui : 50. Depth (%)=float(100,0,200)
#@gui : 51. Smoothness=float(0,0,10)
#@gui : 52. Blending Mode=choice(0,"Grain Extract","Grain Merge")
#@gui : 53. Blending Opacity (%)=float(100,0,100)
#@gui : sep=separator(),Preview Type=choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(),note=note("<small>Author: Reptorian. Latest Update: <i>2019/1/27</i>.</small>")
_cons_turb :
repeat $! l[$>] cons_turb $* endl done
cons_turb :
-m "MergeChoice : $""=_mode" -MergeChoice "add","alpha","and","average","blue","burn","darken","difference","divide","dodge","exclusion","freeze","grainextract","grainmerge","green","hardlight","hardmix","hue","interpolation","lighten","lightness","linearburn","linearlight","luminance","multiply","negation","or","overlay","pinlight","red","reflect","saturation","screen","shapeaverage","softburn","softdodge","softlight","stamp","subtract","value","vividlight","xor","edges","error"
skip {$23==0},{$25==0},{$26==0},{$29==0},{$48==0}
fill_color ${1-3}
turbulence ${4-6},0,$7
balance_gamma ${8-10}
remove_opacity
if  {$13<=4} ac "_fx_noise $11,$12",{$13+2},$14
else ac "_fx_noise $11,$12",{$13+3},$14 fi
remove_opacity
+jr_desaturate ${15-19}
blend normal,$20/100
+cons_self_blend $21,$22
blend ${_mode{$23+1}},$24/100
if {$25==1} cut $26,$27
elif {$25==2} n $26,$27 fi
if {$28==1} ac "equalize",rgb fi
if {$29==1} negate fi
fx_make_seamless 256
fx_warp_by_intensity ${30-37}
if {$39==1} if {$40==0} blur $38 fx_butterworth_bp ${41-45},0,${46-47} if {$48==1} +emboss_image $49,{$50/100},$51 fi else +fx_butterworth_bp ${41-45},0,${46-47} blur[0] $38 if {$48==1} emboss_image[1] $49,{$50/100},$51  fi fi
elif {$39==0} blur $38 if {$48==1} +emboss_image $49,{$50/100},$51  fi fi
if {$48==1} if $52 blend grainmerge,$53/100 else blend grainextract,$53/100 fi fi
cons_self_blend :
-m "MergeChoice : $""=_mode" -MergeChoice "add","burn","dodge","exclusion","freeze","grainextract","grainmerge","hardlight","hardmix","interpolation","linearburn","linearlight","luminance","multiply","negation","overlay","pinlight","reflect","screen","shapeaverage","softburn","softdodge","softlight","stamp","vividlight","edges","error"
[0]
blend ${_mode{$1+1}},$2/100
_cons_turb_preview :
gui_split_preview "_cons_turb $*",${-3--1}
#@gui Emboss-Relief : fx_emboss_relief, fx_emboss_relief_preview(0)
#@gui : sep=separator(), Enable Extreme Emboss or Relief?=bool(0), sep=separator()
#@gui : Angle=float(0,0,360)
#@gui : Depth (%)=float(100,0,500)
#@gui : Depth (%)=float(500,500,5000)
#@gui : Smoothness=float(0,0,10)
#@gui : Invert Embossing?=bool(0)
#@gui : Preserve Alpha?=bool(1)
#@gui : sep=separator(), note=note("Relief Section")
#@gui : Apply Relief?=bool(1)
#@gui : Blending Opacity (%)=float(100,0,100)
#@gui : sep=separator(), Preview Type=choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(), note=note("<small>Author: Reptorian, Samj.      Latest Update: <i>2019/3/24</i>.</small>")
fx_emboss_relief : to_a repeat $! l[$>] split_opacity if $8 +em[0] {$6?$2+180:$2},{$1?$4/100:$3/100},$5 blend[^1] grainmerge,{$9/100} else em[0] {$6?$2+180:$2},{$1?$4/100:$3/100},$5 fi if $7 a c else k[0] fi endl done
fx_emboss_relief_preview :
gui_split_preview "fx_emboss_relief $*",${-3--1}
u "{$1}"\
"{$2}"\
"{$3}_"{$1==1?0:2}\
"{$4}_"{$1==1?2:0}\
"{$5}"\
"{$6}"\
"{$7}"\
"{$8}"\
"{$9}_"{$8==1?2:1}\
"{$10}{$11,$12}"
#@gui Premade Palette: palgen,palgen
#@gui : note=note("This filter creates palettes. Credits are given below. "), sep=separator()
#@gui : Palette=choice(10,"BW-{2}","RGB-{3}","B-RGB-{4}","BW-RGB-{5}","CMY-{3}","CMYK-{4}","W-CMYK-{5}","RGBCMY-{6}","1-Bit-RGB-{8}","Aurora-{256}","PLAYPAL-{249}","Sonic Robo Blast 2-{256}","Famicube-{64}","Andrew Kensler - 16","Andrew Kensler - 32","Andrew Kensler - 54","AAP-Micro 12","AAP-16","AAP-64","AAP-SPLENDOR128","DB8","DB16","DB32","DB-ISO22","DimWiddy 17","DimWiddy 23","Endesga-4","Endesga-8","Endesga-16","Endesga-32","Endesga-36","Endesga-64","Juicy-32","Juicy-56","XAIUE-22","15P-DX","20P-DX","24P-DX","Cabana-64","Fantasy 16","Fantasy 24","Tranquil Fantasy 23","Tranquility Plus 39","Faraway 48","Fleja Master Palette-{33}","Koni32","Linear Color Palette Basic-{31}","Vines Flexible Linear Ramps-{38}","Arcade Standard 29","ARQ16","BLK 36","BLK-NEO-{46}","Broken Facility","Bubblegum-16","Cade 15","Calder 8-{11}","Chromatic16","CD-BAC-{16}","CG Arne-{16}","CPC BOY-{32}","Dinoknight 16","||||-22","FZT Ethereal 16","GZXP-{11}","Indecision-{17}","Island Joy 16","Journey-{64}","Juicy 17","Oak21","Nature's Embrace 55","Nauris-16","Pear 36","Peachy Pop 16-{16}","Pineapple 32","Resurrect 32-{32}","Rosy 42","SLSO-CLR17","Softy 15","SPEC12","Starmancer-{52}","Superb 8","SuperFuture25","Sweetie 16","Taffy 16","Todayland Palette V2-{25}","Vivid-17","Voodo34","Zughy 32","ENOS16","Undertones-17","Equpix 15","Night 16","Star 29","Star 34","Still-Life-{14}","SimpleJPC-16","Acid 15","Battery 24","Clumpy 18","Cthulhu-{16}","Crimso 11","Copper-Tech-{16}","DRZ15A","Eggy 15","Eroge-Copper","Europa 16-{16}","GreyT-bit-{8}","Jewel-{15}","Polar 11","Sheltzy 32","Rube-Goldberg-{9}","BoomBoom-{7}","Generic-8","Matriax8c","NT1H-{26}","Autum 15","Autum 15 [Yellow]","JerryPie 22","Naji 16","Blessing-{5}","Crayola Blind-{9}","Easter Island-{16}","Fairy Tales-{8}","Fuzzy Four-{4}","0xdb-01-{17}","Ocaso-{17}","Pastel-{15}","17 Pastels","Pollen-8","Nopal-12","Sy17","Syz15","TUI-15","Cave-{8}","Psygnosia-{16}","MarshMellow32","Rabbit 7","Finlal 11","Vinik 24","YKB-22","Graveyard-21","Steam Lords-{16}","AAP-RadiantXV-{15}","AAP-Majesty XVII-{17}","Daruda 22","Rust-6","XAIUE-Radiant-{22}","Firestorm-{9}","SuperNova 7","NYX8","OIL6","SGM-Palette 2-{17}","Fornax Void I-{256}","Fornax Void II-{128}","Pixelwave-{12}","Spacey Easter-{17}","Moonlit-39","Petite-8","Petite-8 Afterdark","Autochrome 3","Autochrome 5","GB Default #1-{4}","GB Default #2-{4}","GB Andrade-{4}","GB Blue Seni-{4}","GB Blackzone-{4}","GB Crimson-{4}","GB Didi-{4}","GB Dirty-{4}","GB Arne-{4}","GB Easy-{4}","GB Forest-{4}","GB Harsh Green-{4}","GB Light Green-{4}","GB Nostalgia-{4}","GB Platinum-{4}","GB Kirokaze-{4}","GB PJ-{4}","GB Cyber-{4}","GB Wish-{4}","GB Grapefruit-{4}","GB Ice Cream-{4}","GB Red_Blue-{4}","GB Spacehaze-{4}","GB Chocolate-{4}","GB Purple Dawn-{4}","GB Gray-{4}","ARNE4","HallowPumpkin-{4}","Amiga 2600 NTSC-{128}","Amiga 2600 PAL-{104}","Amiga 2600 SECAM-{8}","Amiga 7800 M.E.S.S-{256}","Amiga 7800-{256}","Amstrad CPC-{27}","Apple II-{15}","CGA-{16}","CGA Mode 0 [Low]-{4}","CGA Mode 0 [High]-{4}","CGA Mode 1 [Low]-{4}","CGA Mode 1 [High]-{4}","CGA Mode 2 [Low]-{4}","CGA Mode 2 [High]-{4}","Commodore 64 [Pepto Interpretation]-{16}","Commodore 64 [Colodore Interpretation]-{16}","Commodore VIC-20-{16}","Colecovision-{15}","Japanese Machine Palette-{16}","Macintosh II-{16}","NES-{52}","PICO-8-{16}","RISC OS-{16}","SAM Coupe-{128}","Thomson MO5-{16}","VGA-{244}","ZX Spectrum-{15}","GNOME 32-{32}","Electronic Crayon 22","Chip16","MSX-{15}","Deluxe Paint-{222}","Legacy Paint-{16}","XP Paint-{28}","Vista Paint-{28}")
#@gui : X-Position=choice(1,"Left","Middle","Right")
#@gui : Y-Position=choice(1,"Top","Middle","Bottom")
#@gui : Palette Width=int(1,1,32)
#@gui : Palette Scaling=int(1,1,25)
#@gui : Flip Palette Rows=bool(0)
#@gui : Palette Rotation=choice(0,"0","90","270,"360")
#@gui : Mirror X-Axis Palette=bool(0)
#@gui : Mirror Y-Axis Palette=bool(0)
#@gui : Blend Palette to Image(s)?=bool(1)
#@gui : sep=separator(),Preview type=choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(),note=note("<b>Palette CLI Information</b>\n\n <i>Main Source of Palettes - </i><a href=\"https://lospec.com/palette-list\"> LoSpec Palette List</a>\n\nPalette Number -- pal number_id = pal name_id -- Full Palette Name by Author[if mentioned]\n\n1 -- pal 0 = pal bw -- Black & White\n2 -- pal 1 = pal rgb -- Red-Green-Blue\n3 -- pal 2 = pal b_rgb -- Black w/ Red-Green-Blue\n4 -- pal 3 = pal bw_rgb -- Black & White w/ Red-Green-Blue\n5 -- pal 4 = pal cmy -- Cyan-Magenta-Yellow\n6 -- pal 5 = pal cmyk -- Cyan-Magenta-Yellow-Black\n7 -- pal 6 = pal wcmyk -- White-Cyan-Magenta-Yellow-Black\n8 -- pal 7 = pal rgbcmy -- Red-Green-Blue w/ Cyan-Magenta-Yellow\n9 -- pal 8 = pal 1bitrgb -- 1 BPC RGB\n10 -- pal 9 = pal aurora -- Aurora by GrafxKid\n11 -- pal 10 = pal playpal -- PLAYPAL by id Tech 1/DOOM Engine\n12 -- pal 11 = pal srb2 -- Sonic Robo Blast 2\n13 -- pal 12 = pal famicube -- Famicube by Arne\n14 -- pal 13 = pal kens16 -- Andrew Kensler - 16 by Andrew Kensler\n15 -- pal 14 = pal kens32 -- Andrew Kensler - 32 by Andrew Kensler\n16 -- pal 15 = pal kens54 -- Andrew Kensler - 54 by Andrew Kensler\n17 -- pal 16 = pal aap12 -- AAP-Micro 12 by Adigun A. Polack\n18 -- pal 17 = pal aap16 -- AAP-16 by Adigun A. Polack\n19 -- pal 18 = pal aap64 -- AAP-64 by Adigun A. Polack\n20 -- pal 19 = pal aap128 -- AAP-SPLENDOR128 by Adigun A. Polack\n21 -- pal 20 = pal db8 -- DB8 by DawnBringer\n22 -- pal 21 = pal db16 -- DB16 by DawnBringer\n23 -- pal 22 = pal db32 -- DB32 by DawnBringer\n24 -- pal 23 = pal db_iso22 -- DB-ISO22 by DawnBringer\n25 -- pal 24 = pal dimwid17 -- DimWiddy 17 by DimWiddy\n26 -- pal 25 = pal dimwid23 -- DimWiddy 23 by DimWiddy\n27 -- pal 26 = pal edg4 -- Endesga-4 by Endesga\n28 -- pal 27 = pal edg8 -- Endesga-8 by Endesga\n29 -- pal 28 = pal edg16 -- Endesga-16 by Endesga\n30 -- pal 29 = pal edg32 -- Endesga-32 by Endesga\n31 -- pal 30 = pal edg36 -- Endesga-36 by Endesga\n32 -- pal 31 = pal edg64 -- Endesga-64 by Endesga\n33 -- pal 32 = pal juicy32 -- Juicy-32 by Real Juice\n34 -- pal 33 = pal juicy56 -- Juicy-56 by Real Juice\n35 -- pal 34 = pal xaiue -- XAIUE-22 by xaiue\n36 -- pal 35 = pal 15pdx -- 15P-DX by GrafxKid\n37 -- pal 36 = pal 20pdx -- 20P-DX by GrafxKid\n38 -- pal 37 = pal 24pdx -- 24P-DX by GrafxKid\n39 -- pal 38 = pal cabana64 -- Cabana-64 by Crabby\n40 -- pal 39 = pal fant16 -- Fantasy 16 by Brettybooop\n41 -- pal 40 = pal fant24 -- Fantasy 24 by Gabriel C.\n42 -- pal 41 = pal tf23 -- Tranquil Fantasy 23 by windfall.apples\n43 -- pal 42 = pal tfp39 -- Tranquility Plus 39 by windfall.apples\n44 -- pal 43 = pal faraway48 -- Faraway 48 by Igor Ferreira.\n45 -- pal 44 = pal fleja_m -- Fleja Master Palette by Fleja\n46 -- pal 45 = pal koni 32 -- Koni32 by Konic\n47 -- pal 46 = pal linearbasic -- Linear Color Palette Basic by GrafxKid\n48 -- pal 47 = pal vinelinear -- Vines Flexible Linear Ramps by Vine 2D\n49 -- pal 48 = pal arcade29 -- Arcade Standard 29 by GrafxKid\n50 -- pal 49 = pal arq16 -- ARQ16 by Endesga\n51 -- pal 50 = pal blk36 -- BLK 36 by BlackedIRL.\n52 -- pal 51 = pal blkneo -- BLK-NEO by BlackedIRL.\n53 -- pal 52 = pal brokefac -- Broken Facility by u/telepathic-melon\n54 -- pal 53 = pal bubblegum -- Bubblegum-16 by PineTreePizza\n55 -- pal 54 = pal cade15 -- Cade 15 by MonstersGoBoom\n56 -- pal 55 = pal calder8 -- Calder 8 by Philip Dodderige\n57 -- pal 56 = pal chrom16 -- Chromatic16 by DragonDePlatino\n58 -- pal 57 = pal cdbac -- CD-BAC by DimWiddy\n59 -- pal 58 = pal cgarne -- CG Arne by Arne Niklas Jansson\n60 -- pal 59 = pal cpcboy -- CPC BOY by Arne Niklas Jansson\n61 -- pal 60 = pal dino -- Dinoknight 16 by Retrospec\n62 -- pal 61 = pal 4l -- ||||-22 by ||||\n63 -- pal 62 = pal ftzeth16 -- FZT Ethereal 16 by Fusionnist\n64 -- pal 63 = pal gzxp -- GZXP by GrafxKid\n65 -- pal 64 = pal indc -- Indecision by Nelson SMG\n66 -- pal 65 = pal island16 -- Island Joy 16 by Kerrie Lake\n67 -- pal 66 = pal journey -- Journey by PineTreePizza\n68 -- pal 67 = pal juicy -- Juicy 17 by JerryPie\n69 -- pal 68 = pal oak -- Oak21 by Dan Oak\n70 -- pal 69 = pal nature55 -- Nature's Embrace 55 by GrafxKid\n71 -- pal 70 = pal nauris16 -- Nauris-16 by Nauris\n72 -- pal 71 = pal pear36 -- Pear 36 by PineTreePizza\n73 -- pal 72 = pal peach -- Peachy Pop 16 by Kerrie Lake\n74 -- pal 73 = pal pineapple32 -- Pineapple 32 by PineTreePizza\n75 -- pal 74 = pal resurrect -- Resurrect 32 by Kerrie Lake\n76 -- pal 75 = pal rosy42 -- Rosy 42 by PineTreePizza\n77 -- pal 76 = pal slso -- SLSO-CLR17 by Luis Miguel Maldonado\n78 -- pal 77 = pal softy15 -- Softy 15 by Eggy\n79 -- pal 78 = pal spec12 -- SPEC12 by Smalls\n80 -- pal 79 = pal starmancer -- Starmancer by Ominux Games\n81 -- pal 80 = pal sup8 -- Superb 8 by BigPotato\n82 -- pal 81 = pal superfuture -- SuperFuture25 by Endesga\n83 -- pal 82 = pal sweetie16 -- Sweetie 16 by GrafxKid\n84 -- pal 83 = pal taffy16 -- Taffy 16 by PineTreePizza\n85 -- pal 84 = pal todayland -- Todayland Palette V2 by GrafxKid\n86 -- pal 85 = pal vivid17 -- Vivid-17 by Irenaart\n87 -- pal 86 = pal voodo -- Voodo34 by Shamaboy\n88 -- pal 87 = pal zu32 -- Zughy 32 by Zughy\n89 -- pal 88 = pal enos16 -- ENOS16 by Endesga\n90 -- pal 89 = pal undertones -- Undertones-17 by Irenaart\n91 -- pal 90 = pal equpix15 -- Equpix 15 by Night\n92 -- pal 91 = pal night16 -- Night 16 by Night\n93 -- pal 92 = pal star29 -- Star 29 by Starlane\n94 -- pal 93 = pal star34 -- Star 34 by Starlane\n95 -- pal 94 = pal stilllife -- Still-Life by cure\n96 -- pal 95 = pal simjpc16 -- SimpleJPC-16 by Adigun A. Polack\n97 -- pal 96 = pal acid15 -- Acid 15 by pyrometal\n98 -- pal 97 = pal battery24 -- Battery 24 by Battery Jellyfish\n99 -- pal 98 = pal clump18 -- Clumpy 18 by windfall.apples\n100 -- pal 99 = pal cthul -- Cthulhu by Starlane\n101 -- pal 100 = pal crimso11 -- Crimso 11 by Crimso\n102 -- pal 101 = pal coptec -- Copper-Tech by Arne Niklas Jansson\n103 -- pal 102 = pal drz15 -- DRZ15A by Drazille\n104 -- pal 103 = pal eggy15 -- Eggy 15 by Eggy\n105 -- pal 104 = pal eroge -- Eroge-Copper by Arne Niklas Jansson\n106 -- pal 105 = pal europa -- Europa 16 by Starlane\n107 -- pal 106 = pal greyt -- GreyT-bit by Sam Keddy\n108 -- pal 107 = pal jewel -- Jewel by AprilSundae\n109 -- pal 108 = pal polar11 -- Polar 11 by Smalls\n110 -- pal 109 = pal sheltzy -- Sheltzy 32 by Please Check - NatTorpedia\n111 -- pal 110 = pal rube-goldberg -- Rube-Goldberg\n112 -- pal 111 = pal boomboom -- BoomBoom by Salman_Shh\n113 -- pal 112 = pal g8 -- Generic-8 by GrafxKid\n114 -- pal 113 = pal matriax8c -- Matriax8c by Davit Masia\n115 -- pal 114 = pal nt1h -- NT1H by NatTorpedia\n116 -- pal 115 = pal au15 -- Autum 15 by jok\n117 -- pal 116 = pal au15y -- Autum 15 [Yellow] by jok\n118 -- pal 117 = pal jerrypie22 -- JerryPie 22 by JerryPie\n119 -- pal 118 = pal naji16 -- Naji 16 by Naji\n120 -- pal 119 = pal blessing -- Blessing by Maruki\n121 -- pal 120 = pal crayola -- Crayola Blind\n122 -- pal 121 = pal easter -- Easter Island by skamocore\n123 -- pal 122 = pal fairy -- Fairy Tales by lollige\n124 -- pal 123 = pal fuzz4 -- Fuzzy Four by P-Tux7\n125 -- pal 124 = pal xdb_01 -- 0xdb-01 by 0xDB\n126 -- pal 125 = pal ocaso -- Ocaso by Minord\n127 -- pal 126 = pal pastel -- Oh Hell, Pastel by StarlitSunset\n128 -- pal 127 = pal pastel17 -- 17 Pastels by Irenaart\n129 -- pal 128 = pal pollen8 -- Pollen-8 by Conker\n130 -- pal 129 = pal nopal -- Nopal-12 by BlackedIRL.\n131 -- pal 130 = pal sy17 -- Sy17 by xaiue\n132 -- pal 131 = pal syz15 -- Syz15 by Fusionnist\n133 -- pal 132 = pal tui15 -- TUI-15 by Jeremy\n134 -- pal 133 = pal cave -- Cave by PineTreePizza\n135 -- pal 134 = pal psygnosia -- Psygnosia by Arne Niklas Jansson\n136 -- pal 135 = pal marshmellow32 -- MarshMellow32 by FormalPrejudice\n137 -- pal 136 = pal rabbit7 -- Rabbit 7 by GrafxKid\n138 -- pal 137 = pal finlal11 -- Finlal 11 by Finlal\n139 -- pal 138 = pal vinik24 -- Vinik 24 by Vinik\n140 -- pal 139 = pal ykb22 -- YKB-22 by yahkehbu\n141 -- pal 140 = pal graveyard -- Graveyard-21 by AprilSundae\n142 -- pal 141 = pal steamlords -- Steam Lords by Slynyrd\n143 -- pal 142 = pal aaprad -- AAP-RadiantXV by Adigun A. Polack\n144 -- pal 143 = pal aapmaj -- AAP-Majesty XVII by Adigun A. Polack\n145 -- pal 144 = pal daruda -- Daruda 22 by daruda\n146 -- pal 145 = pal rust6 -- Rust-6 by Blue Phoenix\n147 -- pal 146 = pal xaiue_rad -- XAIUE-Radiant by xaiue\n148 -- pal 147 = pal firestorm -- Firestorm by theartistjulian\n149 -- pal 148 = pal supernova7 -- SuperNova 7 by Blue Phoenix\n150 -- pal 149 = pal nyx8 -- NYX8 by Javier Guerrero\n151 -- pal 150 = pal oil6 -- OIL6 by GrafxKid\n152 -- pal 151 = pal sgm -- SGM-Palette 2 by s.g.m\n153 -- pal 152 = pal fornaxvoid1 -- Fornax Void I by Fornax Void\n154 -- pal 153 = pal fornaxvoid2 -- Fornax Void II by Fornax Void\n155 -- pal 154 = pal pixelwave -- Pixelwave by Reptorian\n156 -- pal 155 = pal spaceyeaster -- Spacey Easter by Spark Norris\n157 -- pal 156 = pal moon39 -- Moonlit-39 by theartistjulian\n158 -- pal 157 = pal pet8 -- Petite-8 by Adigun A. Polack\n159 -- pal 158 = pal pet8d -- Petite-8 Afterdark by Adigun A. Polack\n160 -- pal 159 = pal autochrome -- Autochrome 3 by Reptorian\n161 -- pal 160 = pal autochrome5 -- Autochrome 5 by Reptorian\n162 -- pal 161 = pal gb_d_1 -- GB Default #1\n163 -- pal 162 = pal gb_d_2 -- GB Default #2\n164 -- pal 163 = pal gb_andrade -- GB Andrade by Andrade\n165 -- pal 164 = pal gb_blue -- GB Blue Seni by WildLeoKnight\n166 -- pal 165 = pal gb_bz -- GB Blackzone\n167 -- pal 166 = pal gb_crimson -- GB Crimson by WildLeoKnight\n168 -- pal 167 = pal gb_didi -- GB Didi by DidiGameboy\n169 -- pal 168 = pal gb_dirty -- GB Dirty by WildLeoKnight\n170 -- pal 169 = pal gb_arne -- GB Arne by Arne\n171 -- pal 170 = pal gb_easy -- GB Easy by GrafxKid\n172 -- pal 171 = pal gb_forest -- GB Forest\n173 -- pal 172 = pal gb_hg -- GB Harsh Green by WildLeoKnight\n174 -- pal 173 = pal gb_lg -- GB Light Green by WildLeoKnight\n175 -- pal 174 = pal gb_nostalgia -- GB Nostalgia by WildLeoKnight\n176 -- pal 175 = pal gb_platinum -- GB Platinum by WildLeoKnight\n177 -- pal 176 = pal gb_kirokaze -- GB Kirokaze by Kirokaze\n178 -- pal 177 = pal gb_pj -- GB PJ\n179 -- pal 178 = pal gb_cyber -- GB Cyber\n180 -- pal 179 = pal gb_wish -- GB Wish by Kerrie Lake\n181 -- pal 180 = pal gb_grapefruit -- GB Grapefruit by GrafxKid\n182 -- pal 181 = pal gb_ice_cream -- GB Ice Cream by Kerrie Lake\n183 -- pal 182 = pal gb_rb -- GB Red_Blue\n184 -- pal 183 = pal gb_space -- GB Spacehaze by WildLeoKnight\n185 -- pal 184 = pal gb_choco -- GB Chocolate by GrafxKid\n186 -- pal 185 = pal gb_purpdawn -- GB Purple Dawn by WildLeoKnight\n187 -- pal 186 = pal gb_gray -- GB Gray by GrafxKid\n188 -- pal 187 = pal arne4 -- ARNE4 by Arne\n189 -- pal 188 = pal hal4 -- HallowPumpkin by WildLeoKnight\n190 -- pal 189 = pal amiga2600ntsc -- Amiga 2600 NTSC\n191 -- pal 190 = pal amiga2600pal -- Amiga 2600 PAL\n192 -- pal 191 = pal amiga2600secam -- Amiga 2600 SECAM\n193 -- pal 192 = pal amiga7800mess -- Amiga 7800 M.E.S.S by Nabuko78\n194 -- pal 193 = pal amiga7800 -- Amiga 7800\n195 -- pal 194 = pal amstrad_cpc -- Amstrad CPC\n196 -- pal 195 = pal apple2 -- Apple II\n197 -- pal 196 = pal cga -- CGA\n198 -- pal 197 = pal cga00 -- CGA Mode 0 [Low]\n199 -- pal 198 = pal cga01 -- CGA Mode 0 [High]\n200 -- pal 199 = pal cga10 -- CGA Mode 1 [Low]\n201 -- pal 200 = pal cga11 -- CGA Mode 1 [High]\n202 -- pal 201 = pal cga20 -- CGA Mode 2 [Low]\n203 -- pal 202 = pal cga21 -- CGA Mode 2 [High]\n204 -- pal 203 = pal c64_pepto -- Commodore 64 - <a href="https://www.pepto.de/projects/colorvic/2001/">[Pepto Interpretation]</a>\n205 -- pal 204 = pal c64_colodore -- Commodore 64 - <a href="https://www.pepto.de/projects/colorvic/">[Colodore Interpretation]</a>\n206 -- pal 205 = pal com_vic_20 -- Commodore VIC-20\n207 -- pal 206 = pal colecovision -- Colecovision\n208 -- pal 207 = pal jmp -- Japanese Machine Palette by Arne Niklas Jansson\n209 -- pal 208 = pal mac2 -- Macintosh II\n210 -- pal 209 = pal nes -- NES\n211 -- pal 210 = pal pico_8 -- PICO-8 by Lexaloffle Games\n212 -- pal 211 = pal risc -- RISC OS\n213 -- pal 212 = pal samcoupe -- SAM Coupe\n214 -- pal 213 = pal mo5 -- Thomson MO5\n215 -- pal 214 = pal vga -- VGA\n216 -- pal 215 = pal zx -- ZX Spectrum\n217 -- pal 216 = pal gnome32 -- GNOME 32\n218 -- pal 217 = pal elc22 -- Electronic Crayon 22\n219 -- pal 218 = pal chip16 -- Chip16\n220 -- pal 219 = pal msx -- MSX\n221 -- pal 220 = pal deluxepaint -- Deluxe Paint\n222 -- pal 221 = pal lms -- Legacy Paint\n223 -- pal 222 = pal msxp -- XP Paint\n224 -- pal 223 = pal vis -- Vista Paint")
#@gui : sep=separator(),note=note("<small>Author: <i>Reptorian</i> Latest update: <i>2019/5/18</i>.</small>")
palgen:
repeat $! l[$>]
    pal $1
    to_rgba
    l.
        s x,{-$4}
        if $6
         repeat $! l[$>]
            if $>%2 mirror x fi
         endl done
        fi
        a y
    endl
    if $7%2
        if $9 mirror. x fi
        if $8 mirror. y fi
    else
        if $8 mirror. x fi
        if $9 mirror. y fi
    fi
    rotate. {$7*90}
    r2dx. {$5*100}%,1
    if $2==2 xx="1~"
    elif $2==1 xx=".5~"
    else xx="0~"
    fi
    if $3==2 yy="1~"
    elif $3==1 yy=".5~"
    else yy="0~"
    fi
    if !$10 f.. 0 fi
    sh. {s-1}
    j... ..,$xx,$yy,0,0,1,[-1],255
    rm[-2,-1]
endl done
#@gui Transfer Colors [Reduced Colors] : tcrc, tcrc_preview(0)
#@gui : note=note("<b>- Notes -</b> \n\nThis filter is used to stimulate pixel art or can be used for testing palettes. If you picked Auto for method of color transfer, that means palettes are automatically generated from images, and depending on your input layer choices, the top could be the reference image or the target image.\n\nWhen using pre-made palettes, the order of layers don't really matter unless you picked image as a reference for palette.In the case that you picked a image as a reference, you must make sure that the image in question is only 1px vertically, and the width is no more than 256 colors."), sep=separator()
#@gui : note=note("<b>Color-mapping Preliminary Setup</b>")
#@gui : Method of Color Transfer=choice(0,"Auto","Palette")
#@gui : Palette to Use=choice(10,"By Layer","BW-{2}","RGB-{3}","B-RGB-{4}","BW-RGB-{5}","CMY-{3}","CMYK-{4}","W-CMYK-{5}","RGBCMY-{6}","1-Bit-RGB-{8}","Aurora-{256}","PLAYPAL-{249}","Sonic Robo Blast 2-{256}","Famicube-{64}","Andrew Kensler - 16","Andrew Kensler - 32","Andrew Kensler - 54","AAP-Micro 12","AAP-16","AAP-64","AAP-SPLENDOR128","DB8","DB16","DB32","DB-ISO22","DimWiddy 17","DimWiddy 23","Endesga-4","Endesga-8","Endesga-16","Endesga-32","Endesga-36","Endesga-64","Juicy-32","Juicy-56","XAIUE-22","15P-DX","20P-DX","24P-DX","Cabana-64","Fantasy 16","Fantasy 24","Tranquil Fantasy 23","Tranquility Plus 39","Faraway 48","Fleja Master Palette-{33}","Koni32","Linear Color Palette Basic-{31}","Vines Flexible Linear Ramps-{38}","Arcade Standard 29","ARQ16","BLK 36","BLK-NEO-{46}","Broken Facility","Bubblegum-16","Cade 15","Calder 8-{11}","Chromatic16","CD-BAC-{16}","CG Arne-{16}","CPC BOY-{32}","Dinoknight 16","||||-22","FZT Ethereal 16","GZXP-{11}","Indecision-{17}","Island Joy 16","Journey-{64}","Juicy 17","Oak21","Nature's Embrace 55","Nauris-16","Pear 36","Peachy Pop 16-{16}","Pineapple 32","Resurrect 32-{32}","Rosy 42","SLSO-CLR17","Softy 15","SPEC12","Starmancer-{52}","Superb 8","SuperFuture25","Sweetie 16","Taffy 16","Todayland Palette V2-{25}","Vivid-17","Voodo34","Zughy 32","ENOS16","Undertones-17","Equpix 15","Night 16","Star 29","Star 34","Still-Life-{14}","SimpleJPC-16","Acid 15","Battery 24","Clumpy 18","Cthulhu-{16}","Crimso 11","Copper-Tech-{16}","DRZ15A","Eggy 15","Eroge-Copper","Europa 16-{16}","GreyT-bit-{8}","Jewel-{15}","Polar 11","Sheltzy 32","Rube-Goldberg-{9}","BoomBoom-{7}","Generic-8","Matriax8c","NT1H-{26}","Autum 15","Autum 15 [Yellow]","JerryPie 22","Naji 16","Blessing-{5}","Crayola Blind-{9}","Easter Island-{16}","Fairy Tales-{8}","Fuzzy Four-{4}","0xdb-01-{17}","Ocaso-{17}","Pastel-{15}","17 Pastels","Pollen-8","Nopal-12","Sy17","Syz15","TUI-15","Cave-{8}","Psygnosia-{16}","MarshMellow32","Rabbit 7","Finlal 11","Vinik 24","YKB-22","Graveyard-21","Steam Lords-{16}","AAP-RadiantXV-{15}","AAP-Majesty XVII-{17}","Daruda 22","Rust-6","XAIUE-Radiant-{22}","Firestorm-{9}","SuperNova 7","NYX8","OIL6","SGM-Palette 2-{17}","Fornax Void I-{256}","Fornax Void II-{128}","Pixelwave-{12}","Spacey Easter-{17}","Moonlit-39","Petite-8","Petite-8 Afterdark","Autochrome 3","Autochrome 5","GB Default #1-{4}","GB Default #2-{4}","GB Andrade-{4}","GB Blue Seni-{4}","GB Blackzone-{4}","GB Crimson-{4}","GB Didi-{4}","GB Dirty-{4}","GB Arne-{4}","GB Easy-{4}","GB Forest-{4}","GB Harsh Green-{4}","GB Light Green-{4}","GB Nostalgia-{4}","GB Platinum-{4}","GB Kirokaze-{4}","GB PJ-{4}","GB Cyber-{4}","GB Wish-{4}","GB Grapefruit-{4}","GB Ice Cream-{4}","GB Red_Blue-{4}","GB Spacehaze-{4}","GB Chocolate-{4}","GB Purple Dawn-{4}","GB Gray-{4}","ARNE4","HallowPumpkin-{4}","Amiga 2600 NTSC-{128}","Amiga 2600 PAL-{104}","Amiga 2600 SECAM-{8}","Amiga 7800 M.E.S.S-{256}","Amiga 7800-{256}","Amstrad CPC-{27}","Apple II-{15}","CGA-{16}","CGA Mode 0 [Low]-{4}","CGA Mode 0 [High]-{4}","CGA Mode 1 [Low]-{4}","CGA Mode 1 [High]-{4}","CGA Mode 2 [Low]-{4}","CGA Mode 2 [High]-{4}","Commodore 64 [Pepto Interpretation]-{16}","Commodore 64 [Colodore Interpretation]-{16}","Commodore VIC-20-{16}","Colecovision-{15}","Japanese Machine Palette-{16}","Macintosh II-{16}","NES-{52}","PICO-8-{16}","RISC OS-{16}","SAM Coupe-{128}","Thomson MO5-{16}","VGA-{244}","ZX Spectrum-{15}","GNOME 32-{32}","Electronic Crayon 22","Chip16","MSX-{15}","Deluxe Paint-{222}","Legacy Paint-{16}","XP Paint-{28}","Vista Paint-{28}")
#@gui : Layer to Use=choice(0,"Top Layer","Bottom Layer")
#@gui : Indexing Style=choice(0,"Regular [No Special Effect]","Noise","Luminance-Indexing","Vertical","Horizontal")
#@gui : Color Count=int(16,2,256)
#@gui : Color Dithering (%)=float(50,0,100)
#@gui : Transfer Color to Target Image?=bool(0)
#@gui : Alpha Count=int(2,1,256)
#@gui : Alpha Dithering (%)=float(50,0,100)
#@gui : Special Effect (%)=float(50,0,100)
#@gui : sep=separator(), note=note("<b>Pixel Ratio and Interpolation</b")
#@gui : Initial Rescale Method=choice(0,"Disabled","Nearest","Average","Linear","Grid","Bicubic","Lanczos")
#@gui : Upscale?=bool(0)
#@gui : Pixel Width=int(2,1,16)
#@gui : Pixel Height=int(2,1,16)
#@gui : sep=separator(), note=note("<b>Hardware Restriction Stimulation</b>\nWarning: This is computationally intensive!")
#@gui : Hardware Stimulation?=bool(0)
#@gui : Hardware Stimulation Precision Factor=int(2,2,32)
#@gui : sep=separator(), note=note("<i>Preliminary Processing Area for Hardware Stimulation</i>")
#@gui : Hardware Restriction Data Size=choice(2,"By Width","By Height","Specified Width and Height")
#@gui : Row/Column Thickness=int(1,1,16)
#@gui : Tile Width=int(16,2,16)
#@gui : Tile Height=int(16,2,16)
#@gui : sep=separator()note=note("<i>Color Restrictions Information</i>")
#@gui : Hardware Color Restriction=int(2,2,16)
#@gui : Hardware Color Mapping=choice(1,"Median Cut","Median Cut and K-Means")
#@gui : Alpha Precision=int(2,2,32)
#@gui : Alpha Mapping=choice(1,"Median Cut","Median Cut and K-Means")
#@gui : sep=separator(),Preview Type=choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(),note=note("<small>Author: Reptorian. Latest Update: <i>2019/5/18</i>.</small>")
tcrc: if {$1==0} if {$3==1} rv fi repeat {$!-1} l[0,{$>+1}] +colormap.. $5,1,1 to_rgb. pal_t[^0] -1,$4,{$6/100},0,$8,{$9/100},{$10/100},$11,$12,$13,$14,$15,$16,{$17==2?$19:($17==0?$18:{w})},{$17==2?$20:($17==0?{h}:$18)},$21,$22,$23,$24 rv endl done if {$!>2} rv[{$!-1},1] fi if {$3==1} rv fi else if {$2!=0} repeat $! l[$>]  pal_t {$2-1},$4,{$6/100},$7,$8,{$9/100},{$10/100},$11,$12,$13,$14,$15,$16,{$17==2?$19:($17==0?$18:{w})},{$17==2?$20:($17==0?{h}:$18)},$21,$22,$23,$24 endl done else if {$3==1} rv fi repeat {$!-1} l[0,{$>+1}] [0] pal_t[^0] -1,$4,{$6/100},$7,$8,{$9/100},{$10/100},$11,$12,$13,$14,$15,$16,{$17==2?$19:($17==0?$18:{w})},{$17==2?$20:($17==0?{h}:$18)},$21,$22,$23,$24 endl done if {$3!=1} rv fi fi fi
tcrc_preview:
tcrc $*
gui_split_preview "tcrc $*",${-3--1}
u "{$1}"\
"{$2}_"{$1==1?2:0}\
"{$3}_"{$1==0||($1==1&&$2==0)?2:1}\
"{$4}"\
"{$5}_"{$1==1?0:2}\
"{$6}"\
"{$7}_"{$1==1?2:0}\
"{$8}{$9}"\
"{$10}_"{$4==0?1:2}\
"{$11}"\
"{$12}_"{$11==0?0:2}\
"{$13}_"{$11==0?0:2}\
"{$14}_"{$11==0?0:2}\
"{$15}"\
"{$16}_"{$15==0?0:2}\
"{$17}_"{$15==0?0:2}\
"{$18}_"{$15==0?0:($17==2?0:2)}\
"{$19}_"{$15==0?0:($17==2?2:0)}\
"{$20}_"{$15==0?0:($17==2?2:0)}\
"{$21}_"{$15==0?0:2}\
"{$22}_"{$15==0?0:2}\
"{$23}_"{$15==0?0:2}\
"{$24}_"{$15==0?0:2}\
"{$25}{$26,$27}"

#@gui Goofy Resampling: goof_res,goof_res_preview(0)
#@gui : note=note("This filter is inspired by a method to divide images with a pasta maker, and alternate the strips of a picture which was cut using a pasta maker."),sep=separator()
#@gui : Amount of Cut-Out=int(8,4,64)
#@gui : Line Cutout Direction=choice(0,"Horizontal","Vertical")
#@gui : End Connectin Direction=choice(0,"Horizontal","Vertical")
#@gui : Reverse Ordering?=bool(0)
#@gui : sep=separator(),note=note("<small>Author: <i>Reptorian</i> Latest update: <i>2019/2/22</i>.</small>")
goof_res: repeat $! l[$>] if $2 s x,$1 repeat {$1/2-1} a[0,{$>+2}] x done a[^0] x if $4 rv fi if $3 a y else a x fi else  $2 s y,$1 repeat {$1/2-1} a[0,{$>+2}] y done a[^0] y if $4 rv fi if $3 a y else a x fi fi endl done
goof_res_preview: goof_res $*

#@gui Color Modulo Texture: gui_rep_colmt,gui_rep_colmt_preview
#@gui : note=note("This filter is inspired by <a href="https://forums.getpaint.net/topic/111782-color-modulo-texture-tool-ymd20170922/">Color Modulo</a> plugin made by <b>MadJik</b> for <a href="https://www.getpaint.net/">Paint.NET</a> software.\n\nPreview is inaccurate! Use 100% Zoom Preview for most accuracy!"), sep=separator()
#@gui : note=note("<b>Colour and Channel Setting</b>"), sep=separator()
#@gui : note=note("- Colour Space and Alpha Setting -")
#@gui : Colour Space=choice(0,"RGB-8","RYB-8","CMY-8","CMYK-8","HSI-8","HSL-8","HSV-8","LAB-8","LCH-8","YIQ-8","YUV-8","YCbCr-8","YCbCrGLIC-8","XYZ-8","YES-8")
#@gui : Contain Alpha?=bool(0)
#@gui : sep=separator(), note=note("- Channel Setting -")
#@gui : Channel Order=choice(0,"1-2-3-4","1-2-4-3","1-3-2-4","1-3-4-2","1-4-2-3","1-4-3-2","2-1-3-4","2-1-4-3","2-3-1-4","2-3-4-1","2-4-1-3","2-4-3-1","3-1-2-4","3-1-4-2","3-2-1-4","3-2-4-1","3-4-1-2","3-4-2-1","4-1-2-3","4-1-3-2","4-2-1-3","4-2-3-1","4-3-1-2","4-3-2-1")
#@gui : Channel Order=choice(0,"1-2-3","1-3-2","2-1-3","2-3-1","3-1-2","3-2-1")
#@gui : Edit Multiple Channel Separately?=bool(1)
#@gui : sep=separator(), note=note("<b>Diagonal Setting</b>"), sep=separator()
#@gui : Flip Diagonal?=bool(0)
#@gui : sep=separator(), note=note("<b>Modulo Texture Setting</b>")
#@gui : sep=separator(), note=note("- Multichannel Editing-")
#@gui : Modulo Mode=choice(3,"Regular Modulo","Continuous Regular Modulo","Divisive Modulo","Continuous Divisive Modulo")
#@gui : Modulo Variable #1=int(0,0,255)
#@gui : Modulo Variable #2=int(255,0,255)
#@gui : Function Angle=float(0,-180,180)
#@gui : Value Shift=int(0,0,255)
#@gui : Centered=bool(0)
#@gui : Negate=bool(0)
#@gui : Normalize=bool(0)
#@gui : note=note("<small>Option available when <u>Edit Multiple Channel Separately</u> is turned off</small>")
#@gui : sep=separator(), note=note("- Separate Channel Editing -")
#@gui : Channel Section=choice(0,"Channel #1","Channel #2","Channel #3","Channel #4")
#@gui : Channel Section=choice(0,"Channel #1","Channel #2","Channel #3")
#@gui : note=note("<small>Option available when <u>Edit Multiple Channel Separately</u> is turned on</small>"), sep=separator()
#@gui : Modulo Mode=choice(3,"Regular Modulo","Continuous Regular Modulo","Divisive Modulo","Continuous Divisive Modulo")
#@gui : Modulo Variable #1=int(0,0,255)
#@gui : Modulo Variable #2=int(255,0,255)
#@gui : Function Angle=float(0,-180,180)
#@gui : Value Shift=int(0,0,255)
#@gui : Centered=bool(0)
#@gui : Negate=bool(0)
#@gui : Normalize=bool(0)
#@gui : Modulo Mode=choice(3,"Regular Modulo","Continuous Regular Modulo","Divisive Modulo","Continuous Divisive Modulo")
#@gui : Modulo Variable #1=int(0,0,255)
#@gui : Modulo Variable #2=int(255,0,255)
#@gui : Function Angle=float(0,-180,180)
#@gui : Value Shift=int(0,0,255)
#@gui : Centered=bool(0)
#@gui : Negate=bool(0)
#@gui : Normalize=bool(0)
#@gui : Modulo Mode=choice(3,"Regular Modulo","Continuous Regular Modulo","Divisive Modulo","Continuous Divisive Modulo")
#@gui : Modulo Variable #1=int(0,0,255)
#@gui : Modulo Variable #2=int(255,0,255)
#@gui : Function Angle=float(0,-180,180)
#@gui : Value Shift=int(0,0,255)
#@gui : Centered=bool(0)
#@gui : Negate=bool(0)
#@gui : Normalize=bool(0)
#@gui : Modulo Mode=choice(3,"Regular Modulo","Continuous Regular Modulo","Divisive Modulo","Continuous Divisive Modulo")
#@gui : Modulo Variable #1=int(0,0,255)
#@gui : Modulo Variable #2=int(255,0,255)
#@gui : Function Angle=float(0,-180,180)
#@gui : Value Shift=int(0,0,255)
#@gui : Centered=bool(0)
#@gui : Negate=bool(0)
#@gui : Normalize=bool(0)
#@gui : note=note("<small>Option available when <u>Edit Multiple Channel Separately</u> is turned on</small>")
#@gui : sep=separator(), note=note("<b>Subpixel Processing Setting</b>"), sep=separator()
#@gui : Subpixel Rendering Level=float(1,0,1)
#@gui : Subpixel Interpolation=choice(5,"Nearest","Average","Grid","Linear","Bicubic","Lanczos")
#@gui : sep=separator(), note=note("<b>Preview Setting</b>"), Preview Type=choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(), note=note("<small>Author: Reptorian. Latest Update: <i>2019/10/22</i>.</small>")
gui_rep_colmt:
cs=$1
alp=$2
tc={$cs!=3?3+$alp:4}
if $tc==4
    if $3==0    (0,1,2,3)
    elif $3==1  (0,1,3,2)
    elif $3==2  (0,2,1,3)
    elif $3==3  (0,2,3,1)
    elif $3==4  (0,3,1,2)
    elif $3==5  (0,3,2,1)
    elif $3==6  (1,0,2,3)
    elif $3==7  (1,0,3,2)
    elif $3==8  (1,2,0,3)
    elif $3==9  (1,2,3,0)
    elif $3==10 (1,3,0,2)
    elif $3==11 (1,3,2,0)
    elif $3==12 (2,0,1,3)
    elif $3==13 (2,0,3,1)
    elif $3==14 (2,1,0,3)
    elif $3==15 (2,1,3,0)
    elif $3==16 (2,3,0,1)
    elif $3==17 (2,3,1,0)
    elif $3==18 (3,0,1,2)
    elif $3==19 (3,0,2,1)
    elif $3==20 (3,1,0,2)
    elif $3==21 (3,1,2,0)
    elif $3==22 (3,2,0,1)
    elif $3==23 (3,2,1,0)
    fi
else
    if $4==0 (0,1,2)
    elif $4==1 (0,2,1)
    elif $4==2 (1,0,2)
    elif $4==3 (1,2,0)
    elif $4==4 (2,0,1)
    elif $4==5 (2,1,0)
    fi
fi
channels={crop(#-1)}
if $5
    rep_colmt[^-1] ${17-48},$6,$1,$2,$49,$50,$channels
else
    rep_colmt[^-1] ${7-14},,,,,,,,,,,,,,,,,,,,,,,,,$6,$1,$2,$49,$50,$channels
fi
rm.
gui_rep_colmt_preview:
cs=$1
alp={$2?1}
tc={$cs!=3?3+$alp:4}
gui_split_preview "gui_rep_colmt ${1-50}",${-3--1}
u "{$1}"\
"{$2}_"{$1==3?0:2}\
"{$3}_"{$tc==4?2:0}\
"{$4}_"{$tc==3?2:0}\
"{$5}"\
"{$6}"\
"{$7}_"{!$5?2:0}\
"{$8}_"{!$5?2:0}\
"{$9}_"{!$5?2:0}\
"{$10}_"{!$5?2:0}\
"{$11}_"{!$5?2:0}\
"{$12}_"{!$5?2:0}\
"{$13}_"{!$5?2:0}\
"{$14}_"{!$5?2:0}\
"{$15}_"{$5&&$tc==4?2:0}\
"{$16}_"{$5&&$tc==3?2:0}\
"{$17}_"{$5?($tc==4?($15==0?2:0):($16==0?2:0)):0}\
"{$18}_"{$5?($tc==4?($15==0?2:0):($16==0?2:0)):0}\
"{$19}_"{$5?($tc==4?($15==0?2:0):($16==0?2:0)):0}\
"{$20}_"{$5?($tc==4?($15==0?2:0):($16==0?2:0)):0}\
"{$21}_"{$5?($tc==4?($15==0?2:0):($16==0?2:0)):0}\
"{$22}_"{$5?($tc==4?($15==0?2:0):($16==0?2:0)):0}\
"{$23}_"{$5?($tc==4?($15==0?2:0):($16==0?2:0)):0}\
"{$24}_"{$5?($tc==4?($15==0?2:0):($16==0?2:0)):0}\
"{$25}_"{$5?($tc==4?($15==1?2:0):($16==1?2:0)):0}\
"{$26}_"{$5?($tc==4?($15==1?2:0):($16==1?2:0)):0}\
"{$27}_"{$5?($tc==4?($15==1?2:0):($16==1?2:0)):0}\
"{$28}_"{$5?($tc==4?($15==1?2:0):($16==1?2:0)):0}\
"{$29}_"{$5?($tc==4?($15==1?2:0):($16==1?2:0)):0}\
"{$30}_"{$5?($tc==4?($15==1?2:0):($16==1?2:0)):0}\
"{$31}_"{$5?($tc==4?($15==1?2:0):($16==1?2:0)):0}\
"{$32}_"{$5?($tc==4?($15==1?2:0):($16==1?2:0)):0}\
"{$33}_"{$5?($tc==4?($15==2?2:0):($16==2?2:0)):0}\
"{$34}_"{$5?($tc==4?($15==2?2:0):($16==2?2:0)):0}\
"{$35}_"{$5?($tc==4?($15==2?2:0):($16==2?2:0)):0}\
"{$36}_"{$5?($tc==4?($15==2?2:0):($16==2?2:0)):0}\
"{$37}_"{$5?($tc==4?($15==2?2:0):($16==2?2:0)):0}\
"{$38}_"{$5?($tc==4?($15==2?2:0):($16==2?2:0)):0}\
"{$39}_"{$5?($tc==4?($15==2?2:0):($16==2?2:0)):0}\
"{$40}_"{$5?($tc==4?($15==2?2:0):($16==2?2:0)):0}\
"{$41}_"{$5?($tc==4?($15==3?2:0):0):0}\
"{$42}_"{$5?($tc==4?($15==3?2:0):0):0}\
"{$43}_"{$5?($tc==4?($15==3?2:0):0):0}\
"{$44}_"{$5?($tc==4?($15==3?2:0):0):0}\
"{$45}_"{$5?($tc==4?($15==3?2:0):0):0}\
"{$46}_"{$5?($tc==4?($15==3?2:0):0):0}\
"{$47}_"{$5?($tc==4?($15==3?2:0):0):0}\
"{$48}_"{$5?($tc==4?($15==3?2:0):0):0}\
"{$49}"\
"{$50}"\
"{$51}"\
"{$52,53}"
#@gui Picture Mosaic : fx_rep_pmos,_fx_rep_pmos_preview(0)
#@gui : note=note("<b>- Information -</b>\n\n<b>Do not be alarmed when multiple command prompt shows up when using folder input as it is a normal process!</b>\n\nThis filter is used for generation of mosaic pictures. Also, the mosaic cli command cannot support a number of images that is less than 3, so this gui filter will automatically use folder input option instead. So, you need at least 2 images inside a folder for the mosaic filter to work when using folder input. For more information, see below.\n\n<b>-Software Usage -</b>\n\n<b>For Krita, and GIMP: </b> Set to input layers to <b>All</b> assuming 3 or more layers are in your file to create mosaic using the top image as a mosaic target.If you are using folder input instead, it is recommended to set layer input to <b>Active</b>.\n\n<b>For Paint.NET: </b> Using 3 or more layer is unsupported due to the Paint.NET plugin restriction, so you can only use folder input. This is a workaround as G'MIC itself supports more than 2 layers.\n\nRight now because of certain issues, split_preview is not functional as of now."), sep=separator()
#@gui : note=note("<b>- Folder Input -<b>")
#@gui : Folder Input Instead?=bool(0)
#@gui : Mosaic Tile Pictures = folder()
#@gui : sep=separator()
#@gui : note=note("<b>- Mosaic Generation Options -</b>\n\n<small><i>Note: When tile_height is equal to 0, it will automatically create the tile ratio based on which side is smaller.</i></small>")
#@gui : Target Layer=choice(0,"Top Layer","Bottom Layer")
#@gui : Tile Width=int(15,2,50)
#@gui : Tile Height=int(0,0,50)
#@gui : Dithering (%)=float(50,0,100)
#@gui : Scaling Interpolation=choice(0,"Nearest","Average","Linear","Grid","Bicubic","Lanczos")
#@gui : Autocrop-By-Median=bool(0)
#@gui : Preserve Original Dimension=bool(0)
#@gui : sep=separator(), Preview Type=choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(), note=note("<small>Author: Reptorian. Latest Update: <i>2019/3/31</i>.</small>")
fx_rep_pmos: if {$!>2&&$1==0} rep_mosaic_gen $4,$5,{$6/100},{$7+1},$8,$9 elif {$!>2&&$1==1} repeat $! l[$>] rep_mosaic_gen $4,$5,{$6/100},{$7+1},$8,$9,1,$2 rv endl done else rep_mosaic_gen $4,$5,{$6/100},{$7+1},$8,$9,1,$2 fi
_fx_rep_pmos_preview:
image={$!}
fx_rep_pmos $*
u "{$1}_"{$image>2?2:0}\
"{$2}_"{$image>2&&$1==0?0:2}\
"{$3}_"{$image>2&&$1==0?2:0}\
"{$4}"\
"{$5}"\
"{$6}"\
"{$7}"\
"{$8}"\
"{$9}"\
"{$10}{$11,$12}"
#@gui Non-Convolution Edge Extraction : fx_ncee, fx_ncee_preview(0)
#@gui : note=note("Based off PS Embossing filtering. The way it works is that you duplicate once and then shift with wrap-around using original image data using an angle and offset. Then finally, you invert one of the layer, and average those values. In this filter, you have several options when it comes to alpha and how the image wrap-around. Also, CMYK mode may be fixed later as I'm trying to avoid the problem with Alpha mode and CMYK mode.")
#@gui : sep=separator()
#@gui : Colour Space=choice(0,"RGB8","RYB8","CMY8","CMYK8","HSI8","HSL8","HSV8","LAB8","LCH8","YIQ8","YUV8","XYZ8","YES8","Kodak 1-8","Ohta8")
#@gui : sep=separator()
#@gui : Angle=float(0,0,360)
#@gui : Offset=float(1,.5,256)
#@gui : Contrast Factor [%]=float(100,0,500)
#@gui : Wraparound Mode=choice(2,"Dirichlet","Neumann","Periodic","Mirror")
#@gui : Interpolation=bool(0)
#@gui : sep=separator(), note=note("Alpha Processing")
#@gui : Alpha Mode=choice(0,"Preserve Original Alpha","Multiply Alphas")
#@gui : sep=separator(), note=note("Blending Processing\n\n<i>If you're looking for normal blending mode, you do not need to touch this and if you did, set mode to alpha and opacity to 100.</i>")
#@gui : Blending Mode=choice(1,"add","alpha","and","average","blue","burn","darken","difference","divide","dodge","exclusion","freeze","grainextract","grainmerge","green","hardlight","hardmix","hue","interpolation","lighten","lightness","linearburn","linearlight","luminance","multiply","negation","or","overlay","pinlight","red","reflect","saturation","screen","shapeaverage","softburn","softdodge","softlight","stamp","subtract","value","vividlight","xor")
#@gui : 9. Blending Opacity=float(100,0,100)
#@gui : sep=separator(), Preview Type=choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(), note=note("<small>Author: Reptorian Latest Update: <i>2019/4/25</i>.</small>")
fx_ncee:
repeat $! l[$>] rep_ncee $3,$2,$5,$6,{$4/100},$7,$1,$8,{$9/100} endl done
fx_ncee_preview:
gui_split_preview "fx_ncee $*",${-3--1}
#@gui Fragment Blur : gui_rep_frblur,gui_rep_frblur_preview(0)
#@gui : note=note("Inspired by the Paint.NET Fragment Blur filter, this implementation improves upon it by adding color space options, preservation of original image as a option, boundary condition option, and interpolation option.\n\n<b>Warning -</b> Preview may not be accurate with image with completely opaque images. The output will not show any transparency regardless."), sep=separator(), note=note("<b>Main Setting</b>")
#@gui : Color Space=choice(0,"RGB","sRGB","RYB","CMYK","HCY","HSI","HSL","HSV","LAB","LCH")
#@gui : Additional Duplicates Count=int(10,2,100)
#@gui : Percent of image half-hypotenuse (%)=float(5,0,100)
#@gui : Angle=float(0,-180,180)
#@gui : Superimpose with Original?=bool(0)
#@gui : sep=separator(), note=note("<b>Secondary Setting</b>")
#@gui : Boundary=choice(1,"None","Neumann","Periodic","Mirror")
#@gui : Shift Linear Interpolation? =bool(0)
#@gui : sep=separator(), Preview Type=choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(), note=note("<small>Author : <i>Reptorian</i>      Latest update: <i>2019/9/26</i>.</small>")
gui_rep_frblur: rep_frblur $2,$3%,$4,$5,$6,$7,$1
gui_rep_frblur_preview: gui_split_preview "gui_rep_frblur $*",${-3--1}
#@gui Nebulous : fx_rep_nebulous,fx_rep_nebulous_preview
#@gui : note=note("Based off <a href="https://forums.getpaint.net/topic/111774-nebulous-texture-update-ymd20170922/?tab=comments#comment-535865">MadJik's PDN Nebulous plugin</a>. The G'MIC version of Nebulous allows you to manipulate the result by angle within the main surface and the distortion surface, and allows you to shift the positioning of the Nebulous surface. Furthermore, the G'MIC version of Nebulous doesn't use integer on the output of surface."), sep=separator()
#@gui : note=note("<b>Surface Theme</b>"), Colour Space Mode=choice (0,"RGB8","RYB8","HSI8","HSL8","HSV8","LAB8","LCH8","YIQ8","YUV8","XYZ8","YES8","Kodak 1-8","Ohta8"), sep=separator()
#@gui : note=note("<b>Surface Generation</b>")
#@gui : XY-Factor=float(4,.1,1000)
#@gui : X-Factor=float(10,.01,1000)
#@gui : Y-Factor=float(10,.01,1000)
#@gui : X-Shift (%)=float(0,-10,10)
#@gui : Y-Shift (%)=float(0,-10,10)
#@gui : Angle of Main Nebulous Surface=float(0,-180,180)
#@gui : Wave(s)=float(1,-25,25)
#@gui : Lighting Angle=float(0,-180,180)
#@gui : Surface Disturbance=float(0,0,2000)
#@gui : Surface Disturbance Multiplier=float(1,1,500)
#@gui : Disturbance X=float(0,0,1000)
#@gui : Disturbance Y=float(0,0,1000)
#@gui : Angle of Disturbance Surface=float(0,-180,180)
#@gui : Disturbance Scale-By-Factor=bool(0)
#@gui : Output Mode=choice(2,"Built-in Gray","Luminosity from Color","Color")
#@gui : Alpha Mode=choice(0,"None","Hard Light","Hard Dark","Smooth Light","Smooth Dark")
#@gui : sep=separator()
#@gui : note=note("<b>Subpixel Processing</b>\n\n You do not need to touch this unless you want higher amount of precision, but the difference is small. If you are using a very small surface or hard alpha mode, then it makes sense to touch subpixel processing variables.")
#@gui : Subpixel Level=int(1,0,3)
#@gui : Subpixel Interpolation=choice(3,"Average","Linear","Grid","Bicubic","Lanczos")
#@gui : sep=separator(),note=note("<small>Author: <i>Reptorian</i> Latest update: <i>2019/5/11</i>.</small>")
fx_rep_nebulous:
repeat $! l[$>]
rep_nebulous ${2-8},{$1>4&&$1<9?$9+180:$9},{$10*$11},${12-16},{$1>4&&$1<9?$17!=0?($17>=3?3+(4-$17):1+(2-$17)):$17},{$18+1},$19 + 1 * 127.5
if $1&&$16
sh 0,2
if $1==1 ryb2rgb.
elif $1==2 hsi82rgb.
elif $1==3 hsl82rgb.
elif $1==4 hsv82rgb.
elif $1==5 lab82rgb.
elif $1==6 lch82rgb.
elif $1==7 yiq82rgb.
elif $1==8 yuv82rgb.
elif $1==9 xyz82rgb.
elif $1==10 yes82rgb.
elif $1==11 k182rgb.
elif $1==12 ohta82rgb.
fi
rm.
fi
if $16==1 s c,{if(s==4,-3,if(s==2,-1,-s))} if $!==2 to_gray.. a c else to_gray fi fi
endl done
fx_rep_nebulous_preview:
fx_rep_nebulous $*
#@gui Grouped Pixel Axis-Based Shift : fx_rep_sptbwgp,fx_rep_sptbwgp_preview
#@gui : note=note("Based off MadJik's Paint.NET Gravity Plugin. New feature are shift position, and influence factor."),sep=separator()
#@gui : Shift Position (%)=float(0,-100,100)
#@gui : Influence Factor=float(0,0,100)
#@gui : Threshold (%)=float(0,0,100)
#@gui : Axis=choice(0,"Horizontal","Vertical")
#@gui : sep=separator(), Preview Type=choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(), note=note("<small>Author: Reptorian. Latest Update: <i>2019/5/14</i>.</small>")
fx_rep_sptbwgp:
position={$1%}
axis=$4
threshold={$3%*(255-10^-8)}
influence={$2%}
rep_sptbwgp $position,$axis,$influence,$threshold
fx_rep_sptbwgp_preview:
gui_split_preview "fx_rep_sptbwgp ${1-4}",${-3--1}
#@gui Binary Alternating Quaddro Texture [Basic] : rep_binary_quaddro_basic_gui, rep_binary_quaddro_basic_gui_preview(0)
#@gui : note=note("This filter is a extended version of a filter found in<a href="https://forums.getpaint.net/topic/6845-asmageddon-tools-pack-v3/">Asmageddon Tools Pack v3</a>. Translated to G'MIC using a source code, and then extended. It is a mixture of two texture filters."),sep=separator()
#@gui : note=note("<b>Channel Processing</b>"),Texture Output=choice(0,"Grayscale","Hue","Degradation Mode"),sep=separator()
#@gui : note=note("<b>Main Texture Processing</b>")
#@gui : Style=choice(0,"Cracking Alternating Texture","Alternating Glasses","Simple")
#@gui : Variable#1=int(8,-512,512)
#@gui : Variable#2=int(8,-512,512)
#@gui : Variable#3=int(128,-200,200)
#@gui : Operand=choice(2,"AND","OR","XOR")
#@gui : Angle=float(0,-180,180)
#@gui : X-Flip=bool(0)
#@gui : Y-Flip=bool(0)
#@gui : Number Modulo=int(256,256,2048)
#@gui : Internal Normalize=int(255,255,2048)
#@gui : Internal Normalization=bool(1)
#@gui : Number Modulo=int(361,256,2048)
#@gui : Internal Normalize=int(361,360,2048)
#@gui : sep=separator(),note=note("<small>Author: <i>Reptorian</i> Latest update: <i>2018/12/19</i>.</small>")
rep_binary_quaddro_basic_gui:
if $1==0
rep_binaltquad ${2-12} % 256
elif $1==1
repeat $! l[$>] rep_binaltquad ${2-9},${13-14},1 % 361 +f 1 . a c hsv2rgb endl done
elif $1==2
repeat $! l[$>] +rep_binaltquad ${2-9},{w*h-1},{w*h-1} f.. I[i#1] k.. endl done
fi
rep_binary_quaddro_basic_gui_preview:
rep_binary_quaddro_basic_gui $*
u "{$1}"\
"{$2}"\
"{$3}"\
"{$4}"\
"{$5}_"{$2!=2?2:0}\
"{$6}_"{$2!=2?2:0}\
"{$7}"\
"{$8}"\
"{$9}"\
"{$10}_"{$1==0?2:0}\
"{$11}_"{$1==0?2:0}\
"{$12}_"{$1==0?2:0}\
"{$13}_"{$1==1?2:0}\
"{$14}_"{$1==1?2:0}
#@gui Binary Alternating Quaddro Texture [MultiChannel]:rep_binary_quaddro_mc_gui, rep_binary_quaddro_mc_gui_preview(0)
#@gui : note=note("This filter is a extended version of a filter found in <a href="https://forums.getpaint.net/topic/6845-asmageddon-tools-pack-v3/">Asmageddon Tools Pack v3</a>. Translated to G'MIC using a source code, and then extended. It is a mixture of two texture filters."),sep=separator()
#@gui : note=note("<b>Configuration</b>")
#@gui : Color Space=choice(0,"RGB","RYB","CMY","CMYK","HSI","HSV","HSL","LAB","LCH","YCbCr","YCbCrGLIC","YIQ","YUV","XYZ")
#@gui : Contain Alpha?=bool(0)
#@gui : 8-Bit Mode?=bool(0)
#@gui : sep=separator()
#@gui : note=note("<b>Channel Order</b>")
#@gui : Channel #1=choice(0,"0","1","2")
#@gui : Channel #2=choice(1,"0","1","2")
#@gui : Channel #3=choice(2,"0","1","2")
#@gui : Channel #1=choice(0,"0","1","2","3")
#@gui : Channel #2=choice(1,"0","1","2","3")
#@gui : Channel #3=choice(2,"0","1","2","3")
#@gui : Channel #4=choice(3,"0","1","2","3")
#@gui : Channel #1=choice(0,"0","1","2","3","4")
#@gui : Channel #2=choice(1,"0","1","2","3","4")
#@gui : Channel #3=choice(2,"0","1","2","3","4")
#@gui : Channel #4=choice(3,"0","1","2","3","4")
#@gui : Channel #5=choice(4,"0","1","2","3","4")
#@gui : sep=separator()
#@gui : note=note("<b>Main Texture Processing</b>")
#@gui : note=note("<i>Channel #1</i>")
#@gui : Style=choice(0,"Bumping Alternating Texture","Alternating Glasses","Simple")
#@gui : Variable#1=int(8,-512,512)
#@gui : Variable#2=int(8,-512,512)
#@gui : Variable#3=int(128,-200,200)
#@gui : Operand=choice(2,"AND","OR","XOR")
#@gui : Angle=float(0,-180,180)
#@gui : X-Flip=bool(0)
#@gui : Y-Flip=bool(0)
#@gui : Normalize=bool(1)
#@gui : sep=separator()
#@gui : note=note("<i>Channel #2</i>")
#@gui : Style=choice(0,"Bumping Alternating Texture","Alternating Glasses","Simple")
#@gui : Variable#1=int(8,-512,512)
#@gui : Variable#2=int(8,-512,512)
#@gui : Variable#3=int(128,-200,200)
#@gui : Operand=choice(2,"AND","OR","XOR")
#@gui : Angle=float(0,-180,180)
#@gui : X-Flip=bool(0)
#@gui : Y-Flip=bool(0)
#@gui : Normalize=bool(1)
#@gui : sep=separator()
#@gui : note=note("<i>Channel #3</i>")
#@gui : Style=choice(0,"Bumping Alternating Texture","Alternating Glasses","Simple")
#@gui : Variable#1=int(8,-512,512)
#@gui : Variable#2=int(8,-512,512)
#@gui : Variable#3=int(128,-200,200)
#@gui : Operand=choice(2,"AND","OR","XOR")
#@gui : Angle=float(0,-180,180)
#@gui : X-Flip=bool(0)
#@gui : Y-Flip=bool(0)
#@gui : Normalize=bool(1)
#@gui : sep=separator()
#@gui : note=note("<i>Channel #4</i>")
#@gui : Style=choice(0,"Bumping Alternating Texture","Alternating Glasses","Simple")
#@gui : Variable#1=int(8,-512,512)
#@gui : Variable#2=int(8,-512,512)
#@gui : Variable#3=int(128,-200,200)
#@gui : Operand=choice(2,"AND","OR","XOR")
#@gui : Angle=float(0,-180,180)
#@gui : X-Flip=bool(0)
#@gui : Y-Flip=bool(0)
#@gui : Normalize=bool(1)
#@gui : sep=separator()
#@gui : note=note("<i>Channel #5</i>")
#@gui : Style=choice(0,"Bumping Alternating Texture","Alternating Glasses","Simple")
#@gui : Variable#1=int(8,-512,512)
#@gui : Variable#2=int(8,-512,512)
#@gui : Variable#3=int(128,-200,200)
#@gui : Operand=choice(2,"AND","OR","XOR")
#@gui : Angle=float(0,-180,180)
#@gui : X-Flip=bool(0)
#@gui : Y-Flip=bool(0)
#@gui : Normalize=bool(1)
#@gui : sep=separator(),note=note("<small>Author: <i>Reptorian</i> Latest update: <i>2018/12/19</i>.</small>")
rep_binary_quaddro_mc_gui:
cs_mode=$1
cmyk_mode={$cs_mode==3?4:3}
contain_alpha={$2?1:0}
tch={$cmyk_mode+$contain_alpha}
if $tch==3 rep_binary_alterating_quad_c $1,$2,$3,$4,$5,$6,${14-42}
elif $tch==4 rep_binary_alterating_quad_c $1,$2,$3,$7,$8,$9,$10,${15-51}
else rep_binary_alterating_quad_c $1,$2,$3,$11,$12,$13,$14,$15,${16-60}
fi
rep_binary_quaddro_mc_gui_preview:
cs_mode=$1
cmyk_mode={$1==3?4:3}
contain_alpha={$2?1:0}
tch={$cmyk_mode+$contain_alpha}
rep_binary_quaddro_mc_gui $*
u "{$1}"\
"{$2}"\
"{$3}_"{(($cs_mode>8&&$cs_mode<11)||$cs_mode<=3)?0:2}\
"{$4}_"{$tch==3?2:0}\
"{$5}_"{$tch==3?2:0}\
"{$6}_"{$tch==3?2:0}\
"{$7}_"{$tch==4?2:0}\
"{$8}_"{$tch==4?2:0}\
"{$9}_"{$tch==4?2:0}\
"{$10}_"{$tch==4?2:0}\
"{$11}_"{$tch==5?2:0}\
"{$12}_"{$tch==5?2:0}\
"{$13}_"{$tch==5?2:0}\
"{$14}_"{$tch==5?2:0}\
"{$15}_"{$tch==5?2:0}\
"{$16}"\
"{$17}"\
"{$18}"\
"{$19}_"{$16!=2?2:0}\
"{$20}_"{$16!=2?2:0}\
"{$21}"\
"{$22}"\
"{$23}"\
"{$24}"\
"{$25}"\
"{$26}"\
"{$27}"\
"{$28}_"{$24!=2?2:0}\
"{$29}_"{$24!=2?2:0}\
"{$30}"\
"{$31}"\
"{$32}"\
"{$33}"\
"{$34}"\
"{$35}"\
"{$36}"\
"{$37}_"{$34!=2?2:0}\
"{$38}_"{$34!=2?2:0}\
"{$39}"\
"{$40}"\
"{$41}"\
"{$42}"\
"{$43}_"{$tch>=4?2:0}\
"{$44}_"{$tch>=4?2:0}\
"{$45}_"{$tch>=4?2:0}\
"{$46}_"{$tch>=4?($43!=2?2:0):0}\
"{$47}_"{$tch>=4?($43!=2?2:0):0}\
"{$48}_"{$tch>=4?2:0}\
"{$49}_"{$tch>=4?2:0}\
"{$50}_"{$tch>=4?2:0}\
"{$51}_"{$tch>=4?2:0}\
"{$52}_"{$tch>=5?2:0}\
"{$53}_"{$tch>=5?2:0}\
"{$54}_"{$tch>=5?2:0}\
"{$55}_"{$tch>=5?($43!=2?2:0):0}\
"{$56}_"{$tch>=5?($43!=2?2:0):0}\
"{$57}_"{$tch>=5?2:0}\
"{$58}_"{$tch>=5?2:0}\
"{$59}_"{$tch>=5?2:0}\
"{$60}_"{$tch>=5?2:0}
#@gui Sinusoidal Water Distortion: rep_sinowaterdist_gui,rep_sinowaterdist_gui_preview(0)
#@gui : X-Balance=float(0,-100,100)
#@gui : Y-Balance=float(0,-100,100)
#@gui : Scale=float(.5,.1,100)
#@gui : Interpolation=choice(2,"Nearest","Linear","Bicubic")
#@gui : Boundary Condition=choice(0,"Periodic","Mirror")
#@gui : sep=separator(), Preview Type=choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split=point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(), note=note("<small>Author: Reptorian. Latest Update: <i>2019/6/4</i>.</small>")
rep_sinowaterdist_gui:
rep_sinowaterdist $1,$2,{($3/100)*(w>h?w:h)},$4,$5
rep_sinowaterdist_gui_preview:
gui_split_preview "rep_sinowaterdist_gui $*",${-3--1}
#@gui Strange Bulger: rep_strbul,rep_strbul_preview(0)
#@gui : Angle=float(0,-180,180)
#@gui : Axis=choice(0,"X-Axis","Y-Axis")
#@gui : Interpolation=choice(2,"Nearest","Linear","Bicubic")
#@gui : Boundary Condition=choice(0,"Periodic","Mirror")
#@gui : sep=separator(),Preview Type=choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(),note=note("<small>Author: Reptorian. Latest Update: <i>2019/6/4</i>.</small>")
rep_strbul_preview:
gui_split_preview "rep_strbul $*",${-3--1}
#@gui Strange Bulger Kaleidoscope: rep_strbulkal_gui, rep_strbulkal_gui_preview(0)
#@gui : note=note("This filter is a extended version of the filters named 'Strange Bulger A', and 'Strange Bulger B' found in<a href="https://forums.getpaint.net/topic/6845-asmageddon-tools-pack-v3/">Asmageddon Tools Pack v3</a>. Translated to G'MIC using source code for Asmageddon's tool, and then extended."),sep=separator()
#@gui : Bulge Angle=float(0,-180,180)
#@gui : Axis of Bulge=choice(0,"X-Axis","Y-Axis")
#@gui : Scale=float(1,.1,10)
#@gui : Preliminary Surface Shift = point(50,50,0,1,128,128,128,255)
#@gui : Distortion Surface Position = point(50,50,0,1,255,255,255,255)
#@gui : Distortion Surface Angle=float(0,0,360)
#@gui : Placement=choice(0,"Inside-Out","Outside-In")
#@gui : Boundary Condition=choice(0,"Periodic","Mirror")
#@gui : Interpolation=choice(2,"Nearest","Linear","Bicubic")
#@gui : Base Reference Dimension=int(1024,10,4096)
#@gui :  sep  = separator(), Preview Type=choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui :  sep  = separator(), note=note("<small>Author: Reptorian.      Latest Update: <i>2019/6/4</i>.</small>")
rep_strbulkal_gui:
rep_strbulkal ${1-3},{(($4/100)-.5)*2},{(($5/100)-.5)*-2},{(($6/100)-.5)*2},{(($7/100)-.5)*-2},${8-12}
rep_strbulkal_gui_preview:
gui_split_preview "rep_strbulkal_gui $*",${-3--1}
#@gui Logarithmic Distortion: rep_logpindis_gui, rep_logpindis_gui_preview(0)
#@gui : note=note("This filter is a extended version of a filter found in <a href="https://forums.getpaint.net/topic/6845-asmageddon-tools-pack-v3/">Asmageddon Tools Pack v3</a>. Translated to G'MIC using a source code, and then extended. It is a mixture of two texture filters."),sep=separator()
#@gui : Distortion Factor=float(1,.1,1000)
#@gui : Preliminary Surface Shift = point(50,50,0,1,128,128,128,255)
#@gui : Distortion Surface Position = point(50,50,0,1,255,255,255,255)
#@gui : Preliminary X-Axis Scaling=float(1,.1,10)
#@gui : Preliminary Y-Axis Scaling=float(1,.1,10)
#@gui : Effect X-Axis Scaling=float(1,.1,10)
#@gui : Effect Y-Axis Scaling=float(1,.1,10)
#@gui : Distortion Surface Angle=float(0,0,360)
#@gui : Placement=choice(0,"Inside-Out","Outside-In")
#@gui : Logarithmic Distortion Axis Combination for X-Axis=choice(0,"Different Axis","Same Axis")
#@gui : Logarithmic Distortion Axis combination for y-Axis=choice(0,"Different Axis","Same Axis")
#@gui : Logarithmic Distortion X-Axis Direction=choice(0,"Negative","Positive")
#@gui : Logarithmic Distortion Y-Axis Direction=choice(0,"Negative","Positive")
#@gui : Boundary Condition=choice(0,"Periodic","Mirror")
#@gui : Interpolation=choice(2,"Nearest","Linear","Bicubic")
#@gui : Base Reference Dimension=int(1024,10,4096)
#@gui : sep=separator(),Preview Type=choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(),note=note("<small>Author: Reptorian.      Latest Update: <i>2019/6/4</i>.</small>")
rep_logpindis_gui:
rep_logpindis $1,{(($2/100)-.5)*2},{(($3/100)-.5)*-2},{(($4/100)-.5)*2},{(($5/100)-.5)*-2},${6-18}
rep_logpindis_gui_preview:
gui_split_preview "rep_logpindis_gui $*",${-3--1}
#@gui Squareroot - Logarithmic Distortion: rep_sqrlogpindis_gui, rep_sqrlogpindis_gui_preview(0)
#@gui : note=note("This filter is a extended version of a filter found in <a href="https://forums.getpaint.net/topic/6845-asmageddon-tools-pack-v3/">Asmageddon Tools Pack v3</a>. Translated to G'MIC using a source code, and then extended. It is a mixture of two texture filters."),sep=separator()
#@gui : Distortion Factor=float(1,.1,1000)
#@gui : Preliminary Surface Shift = point(50,50,0,1,128,128,128,255)
#@gui : Distortion Surface Position = point(50,50,0,1,255,255,255,255)
#@gui : Preliminary X-Axis Scaling=float(1,.1,10)
#@gui : Preliminary Y-Axis Scaling=float(1,.1,10)
#@gui : Effect X-Axis Scaling=float(1,.1,10)
#@gui : Effect Y-Axis Scaling=float(1,.1,10)
#@gui : Distortion Surface Angle=float(0,0,360)
#@gui : Placement=choice(0,"Inside-Out","Outside-In")
#@gui : Logarithmic Distortion Axis Combination for X-Axis=choice(0,"Different Axis","Same Axis")
#@gui : Logarithmic Distortion Axis combination for y-Axis=choice(0,"Different Axis","Same Axis")
#@gui : Logarithmic Distortion X-Axis Direction=choice(0,"Negative","Positive")
#@gui : Logarithmic Distortion Y-Axis Direction=choice(0,"Negative","Positive")
#@gui : Boundary Condition=choice(0,"Periodic","Mirror")
#@gui : Interpolation=choice(2,"Nearest","Linear","Bicubic")
#@gui : Base Reference Dimension=int(1024,10,4096)
#@gui : sep=separator(), Preview Type=choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(), note=note("<small>Author: Reptorian. Latest Update: <i>2019/6/4</i>.</small>")
rep_sqrlogpindis_gui:
rep_sqrlogpindis $1,{(($2/100)-.5)*2},{(($3/100)-.5)*-2},{(($4/100)-.5)*2},{(($5/100)-.5)*-2},${6-18}
rep_sqrlogpindis_gui_preview:
gui_split_preview "rep_sqrlogpindis_gui $*",${-3--1}
#@gui Stitch : rep_stitch_gui, rep_stitch_gui_preview(0)
#@gui : note=note("This is a extended version of a existing filter within the Paint.NET software named <a href="https://forums.getpaint.net/topic/5936-stitch/">Stitch</a> which was made by pyrochild. The extension would be that it supports 1 angle, and it can support more than 2 angles. Anti-aliasing via interpolation and subpixel processing, along with boundary options are also supported.\n\n<i>Warning!Preview is only for giving a idea on the result!</i>"), sep=separator()
#@gui : Pixel Offset of Hypothenuse (%)=float(5,0,100)
#@gui : Thickness of Stitches=float(3,1,20)
#@gui : Stitches Repeat Pattern (0 means no repeat)=int(10,0,500)
#@gui : Interpolation=choice(4,"Nearest","Average","Linear","Grid","Bicubic","Lanczos")
#@gui : Boundary=choice(1,"None","Neumann","Repeat","Mirror")
#@gui : Subpixel Processing Level=float(1,0,5)
#@gui : Randomize Stitching?=bool(0), sep=separator()
#@gui : note=note("<b>Angle Inputs</b>\n\nOnly numbers are accepted!")
#@gui : Angle Count=int(2, 1, 12)
#@gui : Angle#1=float(45,-180,180)
#@gui : Angle#2=float(-45,-180,180)
#@gui : Angle#3=float(90,-180,180)
#@gui : Angle#4=float(0,-180,180)
#@gui : Angle#5=float(60,-180,180)
#@gui : Angle#6=float(-60,-180,180)
#@gui : Angle#7=float(15,-180,180)
#@gui : Angle#8=float(-15,-180,180)
#@gui : Angle#9=float(30,-180,180)
#@gui : Angle#10=float(-30,-180,180)
#@gui : Angle#11=float(5,-180,180)
#@gui : Angle#12=float(-5,-180,180)
#@gui : sep=separator(), Preview Type=choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split=point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(), note=note("<small>Author: Reptorian. Latest Update: <i>2019/7/24</i>.</small>")
rep_stitch_gui:
hypo={sqrt(w^2+h^2)*($1/100)}
if $8==1 rep_stitch $hypo,${2-7},$9
elif $8==2 rep_stitch $hypo,${2-7},${9-10}
elif $8==3 rep_stitch $hypo,${2-7},${9-11}
elif $8==4 rep_stitch $hypo,${2-7},${9-12}
elif $8==5 rep_stitch $hypo,${2-7},${9-13}
elif $8==6 rep_stitch $hypo,${2-7},${9-14}
elif $8==7 rep_stitch $hypo,${2-7},${9-15}
elif $8==8 rep_stitch $hypo,${2-7},${9-16}
elif $8==9 rep_stitch $hypo,${2-7},${9-17}
elif $8==10 rep_stitch $hypo,${2-7},${9-18}
elif $8==11 rep_stitch $hypo,${2-7},${9-19}
elif $8==12 rep_stitch $hypo,${2-7},${9-20}
fi
rep_stitch_gui_preview:
gui_split_preview "rep_stitch_gui $*",${-3--1}
u "{$1}"\
"{$2}"\
"{$3}"\
"{$4}"\
"{$5}"\
"{$6}"\
"{$7}"\
"{$8}"\
"{$9}"\
"{$10}_"{$8>=2?2:0}\
"{$11}_"{$8>=3?2:0}\
"{$12}_"{$8>=4?2:0}\
"{$13}_"{$8>=5?2:0}\
"{$14}_"{$8>=6?2:0}\
"{$15}_"{$8>=7?2:0}\
"{$16}_"{$8>=8?2:0}\
"{$17}_"{$8>=9?2:0}\
"{$18}_"{$8>=10?2:0}\
"{$19}_"{$8>=11?2:0}\
"{$20}_"{$8>=12?2:0}\
"{$21}"\
"{$22}"
#@gui Kaleidoscope [Polar]: gui_rep_polkal,gui_rep_polkal
#@gui : Angle Cut=float(2,.01,100)
#@gui : Radius Cut=float(1,.01,100)
#@gui : Surface Angle=float(0,-180,180)
#@gui : Center (%)=point(50,50)
#@gui : Flip Angle Direction?=bool(0)
#@gui : Flip Radial Direction?=bool(0)
#@gui : Angle Edge Behaviour=choice(1,"Repeat","Alternating")
#@gui : Radial Edge Behaviour=choice(2,"None","Repeat","Alternating")
#@gui : Fit Radial End to Min/Max Dimension=choice(0,"Minimum Dimension","Maximum Dimension")
#@gui : Conical Start at 0?=bool(1)
#@gui : note=note("<small>Conical start is only used for matching other software filter behavior with conical gradients</small>")
#@gui : sep=separator()
#@gui : Sublevel=float(.5,0,3)
#@gui : Interpolation=choice(2,"Nearest","Average","Linear","Grid","Bicubic","Lanczos")
#@gui : sep=separator(), note=note("<small>Author: Reptorian.      Latest Update: <i>2019/9/7</i>.</small>")
gui_rep_polkal: rep_polkal ${1-3},{($4-50)*2}%,{($5-50)*-2}%,${6--1}
#@gui Object Size Filtering: gui_rep_objvf,gui_rep_objvf_preview(0)
#@gui : Mode of Object Filtering=choice(0,"Auto","Alpha","Colour")
#@gui : Threshold for Auto-Mode Switching(%)=float(10,0,100)
#@gui : sep=separator(),note=note("<b>Object Filtering Options</b>")
#@gui : Volume 1 (%)=float(1,0,100)
#@gui : Volume 2 (%)=float(99,0,100)
#@gui : Preserve=choice(0,"Inclusive","Exclusive")
#@gui : Preserve=choice(0,"Inclusive by Secondary Max Area","Exclusive by Secondary Max Area")
#@gui : Use Secondary Maximum Area?=bool(0)
#@gui : Colour=color(0,0,0,0)
#@gui : sep=separator(),note=note("<b>Preview Settings</b>")
#@gui : Reveal Erased Objects?=bool(1)
#@gui : Colour of Erased Object=color(127,127,127)
#@gui : Render Mode=choice(0,"Main","Removed Alpha Mode","Alpha Details")
#@gui : List Percentiles?=bool(0)_0
#@gui : sep=separator(),note=note("<b>-Instruction-</b>\n\nThe purpose of this filter is to filter objects based on their volume. It is based on the principle of the <a href="https://forums.getpaint.net/topic/113962-object-pruner/">Object Pruner plugin</a> for Paint.NET made by <b>MJW</b>.\n\n<b>Note:</b> Use Colour Mode for fully opaque image.\n<b>Alternative Note:</b> Use Colour Mode with Alpha or Auto.\n\n<b>Special Note:</b> If you're seeing error, switch the render mode and pick the colors until error no longer show up on Main Render Mode.Sometimes changing Mode of Object Filtering can resolve it.\n----\n<b>Warning:</b> Untested on GIMP!")
#@gui : sep=separator(),note=note("<small>Author: Reptorian. Latest Update: <i>2020/2/21</i>.</small>")
gui_rep_objvf:
if $7 
    preserve_choice={($6+1)*-1}
else  
    preserve_choice=$5
fi
if !$1
    repeat $! l[$>]
        colour={vectors(${8-11})}
        if s==2||s>3
            ss={s-1}
            colour={vector$ss(${8-11})}
            sh {s-1}
            maxalp={iM#-1}
            +f. i#-1?1
            sumnalp={1-(is#-1/wh#-1)}
            rm.
            if $sumnalp>$2%
                rm. 
                rep_objvf $3%,$4%,$preserve_choice
            else
                if !iv#-1
                    alp=$maxalp
                else 
                    alp=0
                fi
                rm.
                rep_objvf $3%,$4%,$preserve_choice,$colour,$alp
            fi
        else
            colour={vectors(${8-11})}
            rep_objvf $3%,$4%,$preserve_choice,$colour
        fi
    endl done
elif $1==1 
    rep_objvf $3%,$4%,$preserve_choice
else 
    colour={vectors(${8-11})}
    rep_objvf $3%,$4%,$preserve_choice,$colour
fi
gui_rep_objvf_preview:
show_colour=0
current_layer=0

if !$1
    do
        l[$current_layer]
            if s==2||s>3
                {w},{h},100%,1,i(#-1,x,y,z,s-1)?1
                sumnalp={1-(is#-1/wh#-1)}
                if $1>$2% show_colour=1 fi
                rm.
            fi
        endl
        current_layer+=1
    while !$show_colour&&$current_layer<$!
elif $1==2 show_colour=1
fi

if $16==2
    channels {s-1}
elif $16==1
    channels 0,{s-2}
else
    if $12
        +gui_rep_objvf ${1-11}
        f begin(ss={s-1};);if(i(x,y,z,ss),i,0);
        f.. I!=I#-1?[${13-15},255]:I
    else 
        gui_rep_objvf ${1-11}
    fi
fi
u "{$1}"\
"{$2}"_{!$1?2:0}\
"{$3}"\
"{$4}"\
"{$5}"_{!$7?2:0}\
"{$6}"_{$7?2:0}\
"{$7}"\
"{$8,$9,$10,$11}"_{$show_colour?2:0}\
"{$12}"_{!$16?2:1}\
"{$13,$14,$15}"_{($12&&!$16)?2:1}\
"{$16}"\
"{$17}"_0
#@gui Tiled Form : gui_rep_form_pixel, gui_rep_form_pixel_preview(0)
#@gui : note=note("Original idea comes from <a href="https://forums.getpaint.net/topic/26758-trs-tiled-pixels-v12/">TR's Tiled Pixels V1.2</a> plugin by <b>TechnoRobbo</b> for Paint.NET. This version is a extended version utilizing average sampling per area per tile. Dynamic shapes are also supported by this filter.\n\nDynamic Shapes - Fern, Gear, Polygon, Snowflake, Star\n\nShape that are dynamic are labeled with -[D] next to their name.\n\n<small>Note - You may want to sharp your picture due to the average sampling per area per tile algorithm applied by this filter. The reason being is that the contour of the shape would be more discernible after filter is processed.</small>"), sep=separator()
#@gui : note=note("<b>Color Space Processing</b>")
#@gui : Colour Space=choice(0,"RGB","RYB","CMYK","HCY","HSI","HSL","HSV","LAB","LCH")
#@gui : sep=separator(), note=note("<b>Shape Option</b>")
#@gui : Tiled Shape=choice(1,"By Layer","Australia","Barbedwire","Circle","Crosshair","Cupid","Diamond","Dragonfly","Fern-[D]","Flip","Gear-[D]","Gumleaf","Heart","Information","Kookaburra","Mail","Mapleleaf","Paint Splat","Paw","Phone","Polygon-[D]","Rooster","Shopping Cart","Snowflake-[D]","Star-[D]")
#@gui : Reverse Layer =bool(0)
#@gui : note=note("<small>For the first option, you must use at least 2 layer to use layer as shape reference, else it'll use the only image itself as shape reference. Reverse Layer option might have to be used to generate the proper result when using first option.</small>")
#@gui : sep=separator(), note=note("<b>Tile Options</b>")
#@gui : Shape Width (px)=int(30,4,100)
#@gui : Shape Height (px)=int(30,4,100)
#@gui : Shape Ratio (%)=float(100,5,100)
#@gui : Shape Rotation=float(0,-180,180)
#@gui : Shape Mirror Axis=choice(0,"None","X","Y")
#@gui : Subpixel Level=float(.5,0,2)
#@gui : Interpolation=choice(5,"Nearest","Average","Linear","Grid","Bicubic","Lanczos")
#@gui : sep=separator(), note=note("<b>Dynamic Options</b>")
#@gui : Fern Type=choice("Asplenium Adiantum-Nigrum","Thelypteridaceae")
#@gui : Fern Density (%)=float(100,0,300)
#@gui : Gear Teeth Count=int(8,3,32)
#@gui : Gear Height (%)=float(25,0.1,100)
#@gui : Gear Offset Teeth (%)=float(0,0,100)
#@gui : Gear Inner Ratio (%)=float(50,0.1,100)
#@gui : Polygon Vertices=int(5,3,100)
#@gui : Snowflake Recursion=int(5,1,6)
#@gui : Star Branches=int(3,5,100)
#@gui : Star Thickness (%)=float(38,.1,100)
#@gui : note=note("<small>Options are only visible for dynamic shapes!</small>")
#@gui : sep=separator() note=note("<b>Preservation of Image Size</b>")
#@gui : Preserve Image Size=bool(0)
#@gui : note=note("<small>It is recommended to use this for blending mode and/or if you're using Paint.NET")
#@gui : sep=separator(),Preview Type=choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(),note=note("<small>Author: Reptorian. Latest Update: <i>2019/5/18</i>.</small>")
gui_rep_form_pixel:
if $3&&!$2 rv fi
if $1!=2&&$1!=0
repeat {!$2&&$!>1?$!-1:$!} l[{!$2&&$!>1?$>+1:$>}]
sh 0,2
if $1==1 rgb2ryb.
elif $1==3 rgb2hcy.
elif $1==4 rgb2hsi.
elif $1==5 rgb2hsl.
elif $1==6 rgb2hsv.
elif $1==7 rgb2lab.
elif $1==8 rgb2lch.
fi
rm.
endl done
elif $1==2
repeat {!$2&&$!>1?$!-1:$!} l[{!$2&&$!>1?$>+1:$>}]
if s==3 rgb2cmyk
elif s==4 s c,-3 rgb2cmyk.. a c
fi
endl done
fi
if $2==8 rep_form_pixel {$2-1},${4-5},{$6%},${7-10},$21,$12%,0,{100%},$11
elif $2==10 rep_form_pixel {$2-1},${4-5},{$6%},$21,${7-10},${13-16}
elif $2==20 rep_form_pixel {$2-1},${4-5},{$6%},$21,${7-10},{$17}
elif $2==23 rep_form_pixel {$2-1},${4-5},{$6%},$21,${7-10},{$18}
elif $2==24 rep_form_pixel {$2-1},${4-5},{$6%},$21,${7-10},{$19},{$20%}
else rep_form_pixel {$2-1},${4-5},{$6%},${7-10},$21
fi
if $1!=2&&$1!=0
repeat {!$2&&$!>1?$!-1:$!} l[{!$2&&$!>1?$>+1:$>}]
sh 0,2
if $1==1 ryb2rgb.
elif $1==3 hcy2rgb.
elif $1==4 hsi2rgb.
elif $1==5 hsl2rgb.
elif $1==6 hsv2rgb.
elif $1==7 lab2rgb.
elif $1==8 lch2rgb.
fi
rm.
endl done
elif $1==2
repeat {!$2&&$!>1?$!-1:$!} l[{!$2&&$!>1?$>+1:$>}]
if s==4 cmyk2rgb
elif s==5 s c,-4 cmyk2rgb.. a c
fi
endl done
fi
if $3 rv fi
gui_rep_form_pixel_preview:
if $2 gui_split_preview "gui_rep_form_pixel $*",${-3--1}
else gui_rep_form_pixel $* fi
u "{$1}"\
"{$2}"\
"{$3}_"{!$2?2:0}\
"{$4}"\
"{$5}"\
"{$6}"\
"{$7}"\
"{$8}"\
"{$9}"\
"{$10}"\
"{$11}_"{$2==8?2:0}\
"{$12}_"{$2==8?2:0}\
"{$13}_"{$2==10?2:0}\
"{$14}_"{$2==10?2:0}\
"{$15}_"{$2==10?2:0}\
"{$16}_"{$2==10?2:0}\
"{$17}_"{$2==20?2:0}\
"{$18}_"{$2==23?2:0}\
"{$19}_"{$2==24?2:0}\
"{$20}_"{$2==24?2:0}\
"{$21}"\
"{$22}"\
"{$23}"
#@gui Color Existence Distribution [RGB-8]: rep_color_existence_distribution_rgb8,rep_color_existence_distribution_rgb8
#@gui : note=note("This filter is used to find colors that does or does not exist within a image.\n\n For <b>Paint.NET users</b>, please refer to this tutorial named <a href="https://forums.getpaint.net/topic/115124-finding-millions-of-colors-that-does-or-does-not-exist-gmic-qt-tutorial/?tab=comments#comment-562927">Finding millions of colors that does or does not exist - G'MIC QT Tutorial</a>")
#@gui : sep separator()
#@gui : Set of Color(s)=choice(1,"Nonexistent Colors","Existing Colors")
#@gui : sep=separator(),note=note("<small>Author: Reptorian.      Latest Update: <i>2019/9/20</i>.</small>")
#@gui Gradient Mapping Reverse Engineering : gui_rep_regm, gui_rep_regm_preview(0)
#@gui : note=note("<b>Instruction:</b>\n\nFor <b>GIMP</b> and <b>Krita</b> Users: If you're using <u>Per Two layers</u>, you need to paste grayscale image for every first layer per 2 layer. <u>You must have a even amount of layers</u> when using <u>Per Two Layers</u> option.\n\nFor <b>Paint.NET Users</b>: It is recommended that you set do not use <u>Per Two Layers</u> for ease of usage with this filter, otherwise you would have to use Active and Below.\n\n<i>Warning!</i> Result will <u>not resize</u> in Paint.NET, so apply this filter into a image where both dimensions are bigger than 256!\n\nIn the case of using Active and Below: The Reverse Layer option is used to determine the result given by the preview, pick the one which leads into the reverse-engineered gradient."), sep=separator()
#@gui : note=note("<b>Processing Setting</b>")
#@gui : Background Color = color(0,0,0)
#@gui : Layer Processing Mode=choice(0,"Per Two layers","Autocrop components","Split Width into 2","Split Height into 2")
#@gui : Gradient Thickness=int(10,1,100)
#@gui : Reverse Layers?=bool(0)
#@gui : sep=separator(), note=note("<b>Preview Setting</b>")
#@gui : Preview all gradient at once?=bool(1)
#@gui : sep=separator(),note=note("<small>Author: Reptorian. Latest Update: <i>2019/9/20</i>.</small>")
gui_rep_regm:
to_a
ww={w}
hh={h}
portrait_mode={h>w}
if $4==0
    if $!%2 v + error "Odd number of layers are not accepted!" fi
    repeat $!/2 l[{$>*2},{$>*2+1}]
        if $6 rv fi
        rep_regm 256
        r. 256,$5,100%,100%,1
        if $portrait_mode rotate. 90 fi
        f.. x>(w#-1-1)||y>(h#-1-1)?[${1-3},255]:I#-1
        rm.
        if $6 rv fi
    endl done
    rv #To avoid layer ordering changes using All Layer as option!#
else
    repeat $! l[$>]
        if $4==1
            r {w+1},{h+1},100%,100%,0,0,1,1
            autocrop_components 100,,1,1
        elif $4==2
            s x,2
        elif $4==3
            s y,2
        fi
        if $6 rv fi
        rep_regm 256
        r. 256,$5,100%,100%,1
        if $portrait_mode rotate. 90 fi
        r.. $ww,$hh,100%,100%,0,0,1,1
        f.. x>(w#-1-1)||y>(h#-1-1)?[${1-3},255]:I#-1
        k..
        if $6 rv fi
    endl done
fi
gui_rep_regm_preview:
if $7
    to_a
    ww={w}
    hh={h}
    if $4==0
        if $!%2 v + error "Odd number of layers are not accepted!" fi
        repeat $!/2 l[{$>*2},{$>*2+1}]
            if $6 rv fi
            rep_regm 256
            r. 256,$5,100%,100%,1
            rm..
        endl done
        repeat $!/2 rm[$>] done a y
    else
        repeat $! l[$>]
            if $4==1
                r {w+1},{h+1},100%,100%,0,0,1,1
                autocrop_components 100,,1,1
            elif $4==2
                s x,2
            elif $4==3
                s y,2
            fi
            if $6 rv fi
            rep_regm 256
            r. 256,$5,100%,100%,1
            k.
        endl done
        a y
    fi
else
    gui_rep_regm ${1--2}
fi
#@gui Autofill Coloring Book : gui_rep_acb,gui_rep_acb_preview(0)
#@gui : note=note("This filter is specifically designed to autofill areas with random colors that only appear once.\n\n<b>Don't trust the preview for colors, test the result first!</b>")
#@gui : sep=separator()
#@gui : Line Threshold=int(180,1,254)
#@gui : Dilate/Erode=int(0,-3,3)
#@gui : Line Mode=choice(1,"Hard","Soft")
#@gui : Alpha Threshold=int(0,0,254)
#@gui : Coloring Seed=int(250000,0,500000)
#@gui : sep=separator(),Preview Type=choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(),note=note("<small>Author: Reptorian. Latest Update: <i>2019/6/4</i>.</small>")
gui_rep_acb: rep_acb {$1/255},$2,$3,{$4/255},$5
gui_rep_acb_preview:
gui_split_preview "gui_rep_acb $*",${-3--1}
#@gui Thorn Fractal - Secant Sea: gui_rep_tfrac,gui_rep_tfrac_preview
#@gui : note=note("Thorn Fractal is the fractal attributed to Andrew Wayne Graff, alternatively named the "Secant Sea".\nThe code was adapted from <a href="http://paulbourke.net/fractals/thorn/thorn_code.c">Sample C source code</a> provided by Adam Majewski.\n\nDocumentation - <a href="http://paulbourke.net/fractals/thorn/#dane">Thorn Fractal</a> by <a href="http://paulbourke.net/fractals/">Paul Bourke</a>\n\nAlternating Chaos formula are made by <a href="https://forums.getpaint.net/profile/45895-madjik/">MadJik</a>, and they are originally used in <a href="https://forums.getpaint.net/topic/111491-fractal-attractor-ymd170628/">Fractal Attractor</a> plugin for Paint.NET software."), sep=separator()
#@gui : note=note("<b>Style Setting</b>")
#@gui : Predefined Formula=choice(0,"Normal","Normal Inverted","Tanh Stroke 1","Tanh Stroke 2","Asymphological Vibrato","Asymphological Basic","Asymphological Basic 2","Asymphochaos","Petallian","Semi-Thorny Petallian","Thorny Petal 1,"Thorny Petal 2","Inflation","Inflation 2","Earthing","Acrylic Earthing","Unearthing Origami","Cubic Unearthing","Webbing Cubic Unearthing","Chaotic Hooks","Echo Wide","Echo Squircle","Echo Hall","Echo Hall 2","Liquid Parabolic","Chaos-Vibrato","Chaos Deep-Vibrato","Chaos Spacetime","Parabolic","Parabolic Chaos","Cubic-Diamond Chaos","C-Line","Contour Chaos","Spiderweb-Diamond","Acrylica","Refractive Space","Smooth-Artistry","Ferrofluid","Triangular Interweaving","Fabric Chaos","Reverse Tangent Division","Chaotic Tangent","Alternating Chaos 1","Alternating Chaos 2","Alternating Chaos 3","Alternating Chaos 4")
#@gui : Custom Formula=choice(0,"None","Custom Formula","Alternating Custom Formula Level 1","Alternating Custom Formula Level 2","Alternative Custom Formula Level 3","Alternating Custom Formula Level 4")
#@gui : sep=separator()
#@gui : note=note("<b>Fractal Calculation Constraints</b>")
#@gui : note=note("<small>Information at bottom of filter. Some predefined formulas requires you to use low values. You may need to type in values from 5-1024 manually.</small>")
#@gui : Escape Value=int(10000,5,1000000)
#@gui : Loop Limitation=int(255,1,1024)
#@gui : Subsampling Level=float(3,1,10)
#@gui : sep=separator(), note=note("<b>Distortion Factors</b>")
#@gui : Distortion X=float(0,-50,50)
#@gui : Distortion Y=float(0,-50,50)
#@gui : sep=separator(), note=note("<b>Transformations</b>"), note=note("- Scaling -")
#@gui : Scaling XY-Axis=float(1,.1,15)
#@gui : Scaling X-Axis=float(1,.1,15)
#@gui : Scaling Y-Axis=float(1,.1,15)
#@gui : PI-Based Scaling=bool(1), sep=separator(), note=note("- Displacement -")
#@gui : Offset X-Transformation=float(0,-5,5)
#@gui : Offset Y-Transformation=float(0,-5,5)
#@gui : sep=separator(), note=note("- Rotation -")
#@gui : Function Angle=float(0,-180,180)
#@gui : sep=separator(), note=note("<b>Custom Formula</b>)
#@gui : note=note("<small>See bottom of this filter to see instruction of usage</small>")
#@gui : Distortion X Formula-[VX]=text{atan2(a^2,b^2)/cos(b)}
#@gui : Distortion Y Formula-[VY]= text{b/sin(a)}
#@gui : Distortion X Formula-[VX]=text{sin(a)/cos(b)}
#@gui : Distortion Y Formula-[VY]= text{b/cos(a)}
#@gui : Distortion X Formula-[VX]=text{a/sin(b)}
#@gui : Distortion Y Formula-[VY]= text{b/cos(a+b)}
#@gui : Distortion X Formula-[VX]=text{a}
#@gui : Distortion Y Formula-[VY]= text{b}
#@gui : Distortion X Formula-[VX]=text{a}
#@gui : Distortion Y Formula-[VY]= text{b}
#@gui : sep=separator(), note=note("<b>Colour Setting</b>)
#@gui : Fractal Mapping=choice(0,"Grayscale","Hue","Random Color Map")
#@gui : Colours=int(3,3,8)
#@gui : Colour Generation Seed=int(0,0,5000)
#@gui : sep=separator(), note=note("<b>Information of Thorn Fractal - Secant Sea filter</b>"),sep=separator(), note=note("<i>Fractal Calculation Constraints</i>\n\n<b>Escape Value</b> defines the minimum value to escape from the loop used to determine the amount of iteration needed to be bigger than the specified value per pixels. The lower the value, the more contrast at a sacrifise of details.\n\n<b>Iterations</b> defines the maximum possible amount of loop per pixels when escape value is not reached. The lower the value, the more contrast and the more posterization of values.\n\n<b>Subsampling Level</b> is used to alter the dimensions before calculation of fractal, and it is resized to the original dimension after the fractal has been generated. The bigger the value, the more computationally intensive it is. In fact, this has the most consistent impact on performance."), sep=separator(),note=note("<i>Custom Formula</i>\n\nTo use this, type in a formula utilizing the syntax given by the G'MIC reference manual. Use notes given the information provided below.\n\nMultiple expressions are supported, and they are separated by \";\" character. If it the only expression, then it would be used for calculation of vx or vy. Otherwise, the first expression may be the only one used for calculation of vx or vy.\n\n<i>Available adjustible variable - </i> vx,vy,a,b\n\n<b>vx</b> - Distortion formula for x-axis.\n\n<b>vy</b> - Distortion formula for y-axis.\n\n<b>a</b> - Value of <b>a</b> is given by vx equation based on the number of repeats needed to escape from the iterative loop to check when resulting value is greater than escape number.\n\n<b>b</b> - Value of <b>b</b> is given by vx equation based on the number of repeats needed to escape from the iterative loop to check when resulting value is greater than escape number.")
#@gui : sep=separator(), note=note("<small>Author: Reptorian. Latest Update: <i>2019/10/6</i>.</small>")
gui_rep_tfrac:
srand $27
if !$2 rep_thorn_fractal $1,${3-14} else rep_thorn_fractal {-1*$2},${3-14},"$15","$16","$17","$18","$19","$20","$21","$22","$23","$24" fi
if $25==0 n 0,255
elif $25==1 n 0,360 r 100%,100%,100%,3 f [i0,1,1] hsv2rgb
else n 0,1 $26,1,1,1 f. u(x/w#-1,(x+1)/w#-1) n. 0,16777215 r. 100%,100%,1,3 f. [i0-256*floor(i0/256),floor(i0/256)-256*floor(floor(i0/256)/256),i0/(256^2)] r. 4096,1,100%,100%,5 r[^-1] 100%,100%,100%,3 f[^-1] i(#-1,i0*w#-1,0,z,c,2) rm.
fi
gui_rep_tfrac_preview:
gui_rep_tfrac ${1-14},"$15","$16","$17","$18","$19","$20","$21","$22","$23","$24",$25,$26,$27
u "{$1}_"{!$2?2:1}\
"{$2}"\
"{$3}"\
"{$4}"\
"{$5}"\
"{$6}"\
"{$7}"\
"{$8}"\
"{$9}"\
"{$10}"\
"{$11}"\
"{$12}"\
"{$13}"\
"{$14}"\
"{$15}_"{$2>=1?2:0}\
"{$16}_"{$2>=1?2:0}\
"{$17}_"{$2>=2?2:0}\
"{$18}_"{$2>=2?2:0}\
"{$19}_"{$2>=3?2:0}\
"{$20}_"{$2>=3?2:0}\
"{$21}_"{$2>=4?2:0}\
"{$22}_"{$2>=4?2:0}\
"{$23}_"{$2>=5?2:0}\
"{$24}_"{$2>=5?2:0}\
"{$25}"\
"{$26}_"{$25==2?2:0}\
"{$27}_"{$25==2?2:0}
#@gui Z-Time : rep_z_render
#@gui : note=note("Z-Time Rendering is a filter that utilize the value of a layer to represent the frame where frames are interpolated and normalized to the value of that layer. In other word, the reference layer can be seen as a representative of time.<b>Note:</b>Try to use a gradient for top or bottom layer depending on option you use.\n\n<b>Z-Depth Values</b> is recommended to be altered when using float image as reference. Use values less than 255 in order to posterize.\n\n<b>This filter do not work with Paint.NET as you need 3 images!</b>"), sep=separator()
#@gui : Layer to use as time reference?=choice(0,"Top Layer","Bottom Layer")
#@gui : Z-Depth Values=int(255,3,1024)
#@gui : Mirror Frame Ordering?=bool(0)
#@gui : Separate time by channels?=bool(0)
#@gui : sep=separator(), note=note("<small>Author: Reptorian.      Latest Update: <i>2019/10/13</i>.</small>")
#@gui Bricks: gui_rep_shape_brick
#@gui : note=note("This filter on the <a href="https://forums.getpaint.net/topic/8251-bricks-updated-with-examples/">Bricks plugin for Paint.NET</a> made by <a href="https://forums.getpaint.net/profile/49909-jchunn/">Jesse Chunn</a> as part of his <a href="https://forums.getpaint.net/index.php?/topic/8408-jesse-chunn-plugin-pack-march-8-2008/">plugin pack</a>.\n\n This is a extended version of the bricks filter with bevel options, and blending mode option.")
#@gui : sep=separator(), note=note("<b>Brick Main Setting</b>")
#@gui : Brick Width (px)=int(150,4,2048)
#@gui : Brick Height (px)=int(150,4,2048)
#@gui : Mortar Width (px)=int(5,0,512)
#@gui : Mortar Height (px)=int(5,0,512)
#@gui : Outline (px)=int(0,0,50)
#@gui : sep=separator(),note=note("<b>Offset Setting</b>)
#@gui : Brick Offset (%)=float(0,-100,100)
#@gui : Offset Direction=choice(0,"Horizontal","Vertical")
#@gui : Reverse Offset=bool(0)
#@gui : sep=separator(), note=note("<b>Bevel Setting</b>)
#@gui : Bevel Radius (px)=int(0,0,50)
#@gui : Bevel Style=choice(0,"Round","Inverse Round","Chamfer")
#@gui : sep=separator(), note=note("<b>Colouring and Blending Options</b>")
#@gui : Brick Colour=color(170,0,0,255)
#@gui : Brick Outline=color(85,0,0,255)
#@gui : Mortar Colour=color(121,77,2,255)
#@gui : Use Blending Mode?=bool(0)
#@gui : Blending Mode=choice(41,"add","alpha","and","average","blue","burn","darken",
#@gui : "difference","divide","dodge","exclusion","freeze",
#@gui : "grainextract","grainmerge","green","hardlight","hardmix",
#@gui : "hue","interpolation","lighten","lightness","linearburn",
#@gui : "linearlight","luminance","multiply","negation","or",
#@gui : "overlay","pinlight","red","reflect","saturation","screen",
#@gui : "shapeaverage","softburn","softdodge","softlight","stamp",
#@gui : "subtract","value","vividlight","xor")
#@gui : Opacity (%)=float(100,0,100)
#@gui : sep=separator(), note=note("<b>Antialias</b>)
#@gui : Antialias Level=float(0,0,3)
#@gui : sep=separator(),note=note("<small>Author: Reptorian.      Latest Update: <i>2019/10/15</i>.</small>")
gui_rep_shape_brick:
-m "MergeChoice : $""=_mode" -MergeChoice "add","alpha","and","average","blue","burn","darken","difference","divide","dodge","exclusion","freeze","grainextract","grainmerge","green","hardlight","hardmix","hue","interpolation","lighten","lightness","linearburn","linearlight","luminance","multiply","negation","or","overlay","pinlight","red","reflect","saturation","screen","shapeaverage","softburn","softdodge","softlight","stamp","subtract","value","vividlight","xor","edges","error"
repeat $! l[$>]
to_a
rep_shape_brick $1,$2,$3,$4,$5,$9,$10,$6%,$7,$8,$26
n. 0,1
r. {w#-2},{h#-2},100%,{s#-2},0,2,0,0
if $5 ($19,$15,$11^$20,$16,$12^$21,$17,$13^$22,$18,$14)
else ($19,$11^$20,$12^$21,$13^$22,$14)
fi
r. {($26+1)*100}%,100%,100%,100%,3
f.. i(#-1,(w#-1-1)*i,0,z,c,3) rm.
if $23 blend ${_mode{$24+1}},{$25%}
else k. fi
endl done
#@gui TR's Intense Filtration: gui_rep_trif,gui_rep_trif_preview(0)
#@gui : Hue=float(45,0,360)
#@gui : Image Coefficient (%)=float(100,0,200)
#@gui : Mix Factor (%)=float(0,0,100)
#@gui : Style Base=choice(0,"Based from Original Image","Based on Grayscale","Based on Hue")
#@gui : sep=separator(), note=note("<b>Preview Setting</b>"), Preview Type=choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(), note=note("<b>TR's Intense Filtration</b> is a filter that filters out colors and augment a color based on hue. The formula for the filter is created by <b>TechnoRobbo</b>. The code for this filter is based on the <a href="https://forums.getpaint.net/topic/30148-trs-intense-filtration-v-13-oct-092014/">source code</a> of <b>TechnoRobbo's Intense Filtration v1.3</b> plugin for <b>Paint.NET.</b>")
#@gui : sep=separator(), note=note("<small>Author: Reptorian.      Latest Update: <i>2019/11/1</i>.</small>")
gui_rep_trif: rep_trif $1,$2%,$3%,$4
gui_rep_trif_preview: gui_split_preview "gui_rep_trif ${1-4}",${-3--1}
#@gui TR's Pixel Sharpener: gui_rep_trps,gui_rep_trps_preview(0)
#@gui : Sharpening=float(0,0,50)
#@gui : Internal Blurring=int(0,0,4)
#@gui : Blur Type=choice(0,"Photo","Horizontal","Vertical","Angle - One Axis","Angle - Two Axis")
#@gui : Angle = float(0,-180,180)
#@gui : Channel(s)=choice(11,"All","RGBA [All]","RGB [All]","RGB [Red]","RGB [Green]","RGB [Blue]","RGBA [Alpha]",
#@gui : "Linear RGB [All]","Linear RGB [Red]","Linear RGB [Green]","Linear RGB [Blue]","YCbCr [Luminance]",
#@gui : "YCbCr [Blue-Red Chrominances]","YCbCr [Blue Chrominance]","YCbCr [Red Chrominance]",
#@gui : "YCbCr [Green Chrominance]","Lab [Lightness]","Lab [ab-Chrominances]","Lab [a-Chrominance]",
#@gui : "Lab [b-Chrominance]","Lch [ch-Chrominances]","Lch [c-Chrominance]","Lch [h-Chrominance]","HSV [Hue]",
#@gui : "HSV [Saturation]","HSV [Value]","HSI [Intensity]","HSL [Lightness]","CMYK [Cyan]","CMYK [Magenta]",
#@gui : "CMYK [Yellow]","CMYK [Key]","YIQ [Luma]","YIQ [Chromas]","RYB [All]","RYB [Red]","RYB [Yellow]","RYB [Blue]")
#@gui : sep=separator(), note=note("This is a extended filter which was based on a Paint.NET plugin that was created by <b>TechnoRobbo</b> - <a href="https://forums.getpaint.net/topic/26783-trs-pixel-sharpener-plugin-v20-dec-21-2014/">TR's Pixel Sharpener</a>")
#@gui : sep=separator(), Preview Type=choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(), note=note("<small>Author: Reptorian.      Latest Update: <i>2019/11/2</i>.</small>")
gui_rep_trps: ac "rep_tr_pixel_sharpener ${1-4}",$5
gui_rep_trps_preview: gui_split_preview "gui_rep_trps ${1-5}",${-3--1}
u "{$1}"\
"{$2}"\
"{$3}"\
"{$4}_"{$3>2?2:0}\
"{$5}"\
"{$6}"\
"{$7}"
#@gui Glass Vignette: gui_rep_gv, gui_rep_gv_preview(0)
#@gui : note=note("<small>Distorts images as if it is based from the view of a bulged car mirror or camera len. This G'MIC filter is a heavily extended version of <a href="https://forums.getpaint.net/topic/28355-trs-glass-vignette/">TR's Glass Vignette</a> plugin made by TechnoRobbo for Paint.NET. It can also be used for generating abstract art as well.</small>"), sep=separator()
#@gui : note=note("<b>Refraction Settings</b>")
#@gui : Refraction (%)=float(0,-200,200)
#@gui : Refraction Power (%)=float(0,-200,200)
#@gui : Len Size (%)=float(100,25,200)
#@gui : Chromatic Aberration (%)=float(0,-100,100)
#@gui : sep=separator(),note=note("<b>Transformations Settings</b>")
#@gui : note=note("<small><i>Preliminary Image Transformations</i></small>")
#@gui : Preliminary Image Shift=point(50,50,0,1,128,128,128,255)
#@gui : Image Additional Zoom (%)=float(0,0,500)
#@gui : Image Angle=float(0,-180,180)
#@gui : sep=separator(),note=note("<small><i>Distortion Transformations</i></small>")
#@gui : Distortion Scale by X-Axis (%)=float(100,0,1000)
#@gui : Distortion Scale by Y-Axis (%)=float(100,0,1000)
#@gui : Distortion Scale by XY-Axis (%)=float(100,0.01,500)
#@gui : Distortion Angle=float(0,-180,180)
#@gui : Distortion Offset=point(50,50,0,1,255,255,255,255)
#@gui : note=note("<small><i>When Distortion Scale by X-Axis and/or Y-Axis is 0, then distortion will be based on image ratio.</i></small>")
#@gui : sep=separator(),note=note("<b>Processing Settings</b>")
#@gui : Colour Space=choice(0,"RGB","sRGB","RYB","CMY","CMYK",HCY",HSI","HSL","HSV","LAB","LCH","YIQ","YUV","YCbCr","YCbCrGLIC","XYZ","YES","Kodak 1","Ohta")
#@gui : Boundary=choice(3,"None","Neumann","Periodic","Mirror")
#@gui : Interpolation=choice(5,"Nearest","Average","Linear","Grid","Bicubic","Lanczos")
#@gui : Subpixel=float(1,1,2)
#@gui : sep=separator(),note=note("<b>Preview Settings</b>"), Preview Type=choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(), note=note("<small>Author: Reptorian. Latest Update: <i>2019/11/7</i>.</small>")
gui_rep_gv: rep_gv $1%,$2%,$3%,$4%,{$5-50}%,{$6-50}%,$7%,$8,$9%,$10%,$11%,$12,{$13+50}%,{$14+50}%,${15-18}
gui_rep_gv_preview: gui_split_preview "gui_rep_gv ${1-18}",${-3--1}
#@gui Fibonacci Texture:gui_rep_fibo,gui_rep_fibo_preview
#@gui : note=note("Generates texture based on the <b>Fibonacci Sequence</b>\n\nFor <b>GIMP</b> or <b>Krita</b> users - The first option for <b>Output Mode</b> will generate a new layer that can exceed boundary of current canvas.")
#@gui : sep=separator(),note=note("<b>Main</b>")
#@gui : Fill Mode=choice(1,"Textile","Fill")
#@gui : Iterations=int(10,3,16)
#@gui : Output Mode=choice(1,"Create New Layer","Fill Image[s]")
#@gui : Corner Location=choice(0,"0","1","2","3")
#@gui : Corner Location=choice(0,"Top Left","Top Right","Bottom Left","Bottom Right")
#@gui : Square Spiral Mode=bool(1)
#@gui : Centerpoint (%)=point(50,50)
#@gui : Exponential Scaling=int(0,0,20)
#@gui : Boundary=choice(1,"None","Periodic","Mirror")
#@gui : Attachment Mode=choice(0,"A","B")
#@gui : sep=separator(),note=note("<b>Coloring/Shading</b>")
#@gui : Palette=choice(0,"Normalized Grayscale","BW-{2}","RGB-{3}","B-RGB-{4}","BW-RGB-{5}","CMY-{3}","CMYK-{4}","W-CMYK-{5}","RGBCMY-{6}","1-Bit-RGB-{8}","Aurora-{256}","PLAYPAL-{249}","Sonic Robo Blast 2-{256}","Famicube-{64}","Andrew Kensler - 16","Andrew Kensler - 32","Andrew Kensler - 54","AAP-Micro 12","AAP-16","AAP-64","AAP-SPLENDOR128","DB8","DB16","DB32","DB-ISO22","DimWiddy 17","DimWiddy 23","Endesga-4","Endesga-8","Endesga-16","Endesga-32","Endesga-36","Endesga-64","Juicy-32","Juicy-56","XAIUE-22","15P-DX","20P-DX","24P-DX","Cabana-64","Fantasy 16","Fantasy 24","Tranquil Fantasy 23","Tranquility Plus 39","Faraway 48","Fleja Master Palette-{33}","Koni32","Linear Color Palette Basic-{31}","Vines Flexible Linear Ramps-{38}","Arcade Standard 29","ARQ16","BLK 36","BLK-NEO-{46}","Broken Facility","Bubblegum-16","Cade 15","Calder 8-{11}","Chromatic16","CD-BAC-{16}","CG Arne-{16}","CPC BOY-{32}","Dinoknight 16","||||-22","FZT Ethereal 16","GZXP-{11}","Indecision-{17}","Island Joy 16","Journey-{64}","Juicy 17","Oak21","Nature's Embrace 55","Nauris-16","Pear 36","Peachy Pop 16-{16}","Pineapple 32","Resurrect 32-{32}","Rosy 42","SLSO-CLR17","Softy 15","SPEC12","Starmancer-{52}","Superb 8","SuperFuture25","Sweetie 16","Taffy 16","Todayland Palette V2-{25}","Vivid-17","Voodo34","Zughy 32","ENOS16","Undertones-17","Equpix 15","Night 16","Star 29","Star 34","Still-Life-{14}","SimpleJPC-16","Acid 15","Battery 24","Clumpy 18","Cthulhu-{16}","Crimso 11","Copper-Tech-{16}","DRZ15A","Eggy 15","Eroge-Copper","Europa 16-{16}","GreyT-bit-{8}","Jewel-{15}","Polar 11","Sheltzy 32","Rube-Goldberg-{9}","BoomBoom-{7}","Generic-8","Matriax8c","NT1H-{26}","Autum 15","Autum 15 [Yellow]","JerryPie 22","Naji 16","Blessing-{5}","Crayola Blind-{9}","Easter Island-{16}","Fairy Tales-{8}","Fuzzy Four-{4}","0xdb-01-{17}","Ocaso-{17}","Pastel-{15}","17 Pastels","Pollen-8","Nopal-12","Sy17","Syz15","TUI-15","Cave-{8}","Psygnosia-{16}","MarshMellow32","Rabbit 7","Finlal 11","Vinik 24","YKB-22","Graveyard-21","Steam Lords-{16}","AAP-RadiantXV-{15}","AAP-Majesty XVII-{17}","Daruda 22","Rust-6","XAIUE-Radiant-{22}","Firestorm-{9}","SuperNova 7","NYX8","OIL6","SGM-Palette 2-{17}","Fornax Void I-{256}","Fornax Void II-{128}","Pixelwave-{12}","Spacey Easter-{17}","Moonlit-39","Petite-8","Petite-8 Afterdark","Autochrome 3","Autochrome 5","GB Default #1-{4}","GB Default #2-{4}","GB Andrade-{4}","GB Blue Seni-{4}","GB Blackzone-{4}","GB Crimson-{4}","GB Didi-{4}","GB Dirty-{4}","GB Arne-{4}","GB Easy-{4}","GB Forest-{4}","GB Harsh Green-{4}","GB Light Green-{4}","GB Nostalgia-{4}","GB Platinum-{4}","GB Kirokaze-{4}","GB PJ-{4}","GB Cyber-{4}","GB Wish-{4}","GB Grapefruit-{4}","GB Ice Cream-{4}","GB Red_Blue-{4}","GB Spacehaze-{4}","GB Chocolate-{4}","GB Purple Dawn-{4}","GB Gray-{4}","ARNE4","HallowPumpkin-{4}","Amiga 2600 NTSC-{128}","Amiga 2600 PAL-{104}","Amiga 2600 SECAM-{8}","Amiga 7800 M.E.S.S-{256}","Amiga 7800-{256}","Amstrad CPC-{27}","Apple II-{15}","CGA-{16}","CGA Mode 0 [Low]-{4}","CGA Mode 0 [High]-{4}","CGA Mode 1 [Low]-{4}","CGA Mode 1 [High]-{4}","CGA Mode 2 [Low]-{4}","CGA Mode 2 [High]-{4}","Commodore 64 [Pepto Interpretation]-{16}","Commodore 64 [Colodore Interpretation]-{16}","Commodore VIC-20-{16}","Colecovision-{15}","Japanese Machine Palette-{16}","Macintosh II-{16}","NES-{52}","PICO-8-{16}","RISC OS-{16}","SAM Coupe-{128}","Thomson MO5-{16}","VGA-{244}","ZX Spectrum-{15}","GNOME 32-{32}","Electronic Crayon 22","Chip16","MSX-{15}","Deluxe Paint-{222}","Legacy Paint-{16}","XP Paint-{28}","Vista Paint-{28}")
#@gui : Color Random Ordering Seed=int(2500,0,5000)
#@gui : Cycle Color(%)=float(0,0,100)
#@gui : Negate?=bool(0)
#@gui : sep=separator(),note=note("<small>Author: Reptorian. Latest Update: <i>2019/11/11</i>.</small>")
#@gui : sep=separator(),note=note("<u>- Guide for Paint.NET Users -</u>\n\nDue to the <i>Paint.NET</i> API, option for creating new layer using plugins is not supported!\n\nIf you prefer a filter based on <i>Fibonacci Sequence</i> as a individual plugin rather than a G'MIC filter, you can download <a href="https://forums.getpaint.net/topic/28522-fibonacci-fill/">Fibonacci Fill plugin</a> for <i>Paint.NET</i>.")
gui_rep_fibo:
srand $13
if $12 pal {$12-1} {w#-1},1,1,1,u(0,1) pixelsort.. +,x,[-1] rm. store. palmap fi
ww={w}
hh={h}
if $12&&$3 to_rgb elif !$12&&$3 channels 0 fi
if $1
    rep_fibonacci_fill $5,$6,$3,{($7-50)*2}%,{($8-50)*2}%
    Cyc={iM#-1+1} if $3 f (i+int($14/100*($Cyc-1)))%$Cyc else f. (i+int($14/100*($Cyc-1)))%$Cyc fi
    if $15 if $3 negate else negate. fi fi
    if $12
        $palmap
        if $3 map[^-1] [-1],2 else map.. .,2 fi
        rm.
    else
        if $3 n 0,255 else n. 0,255 fi
    fi
else
    rep_fibonacci_squares $2,$4,$6 r2dx. {($9+1)*100}%,1
    Cyc={iM#-1+1} f. (i+int($14/100*($Cyc-1)))%$Cyc
    if !$15 negate. fi 
    if $10 
        . negate.
        if $2%2 if $11 a[-2,-1] y else a[-2,-1] x fi
        else if $11 a[-2,-1] x else a[-2,-1] y fi
        fi
    fi
    if $12
        $palmap map.. .,2 rm.
    else
        n. 0,255
    fi
    to_a
    if $3
        r. $ww,$hh,100%,100%,0,{$10?$10+1:$10},.5,.5
        f[^-1] i(#-1)
        rm.
    fi
fi
gui_rep_fibo_preview: gui_rep_fibo $* if !$3 k. fi
u "{$1}"\
"{$2}_"{$1?0:2}\
"{$3}"\
"{$4}_"{$1?0:2}\
"{$5}_"{$1?2:0}\
"{$6}"\
"{$7,$8}_"{$1?($6?2:1):0}\
"{$9}_"{$1?0:2}\
"{$10}_"{$1?0:2}\
"{$11}_"{$1?0:($10?2:1)}\
"{$12}"\
"{$13}_"{$12?2:1}\
"{$14}"\
"{$15}"
#@gui Spiral Distortion: gui_rep_sd,gui_rep_sd_preview(0)
#@gui : note=note("Transform image using spiral gradient for x-coordinate, and radial gradient for y-coordinate."),sep=separator()
#@gui : Revolution=float(1,.1,10)
#@gui : Spiral Height=float(1,.5,10)
#@gui : Refraction Power=float(0,-.99,2)
#@gui : Direction=choice(0,"Clockwise","Counterclockwise")
#@gui : Angle=float(0,-180,180)
#@gui : Spiral Mode=choice(0,"Periodic","Continuous")
#@gui : Preshift Position=point(50,50,0,1,200,200,200,255)
#@gui : Preshift Boundary=choice(0,"Periodic","Mirror")
#@gui : Skew Position (%)=point(50,50,0,1,100,100,100,255)
#@gui : Skew Multiplier=float(1,-.5,3)
#@gui : Offset (%)=point(50,50,0,1,255,255,255,255)
#@gui : Scale X-Coordinate (%)=float(100,1,1000)
#@gui : Scale Y-Coordinate (%)=float(100,1,1000)
#@gui : Boundary Condition=choice(3,"None","Neumann","Periodic","Mirror")
#@gui : Interpolation=choice(4,"Nearest","Average","Linear","Bicubic","Lanczos")
#@gui : sep=separator(),Preview Type=choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"),Preview Split=point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(),note=note("<small>Author: Reptorian. Latest Update: <i>2019/10/15</i>.</small>")
gui_rep_sd: rep_sd ${1-6},{($7-50)*2}%,{($8-50)*2}%,$9,{($10-50)*2}%,{($11-50)*-2}%,$12,{($15-50)*2}%,{($16-50)*2}%,{($13-50)*2}%,{($14-50)*2}%,$17,$18
gui_rep_sd_preview: gui_split_preview "gui_rep_sd ${1-18}",${-3--1}
u "{$1}"\
"{$2}"\
"{$3}"\
"{$4}"\
"{$5}"\
"{$6}"\
"{$7,$8}"\
"{$9}_"{(($7!=50)||($8!=50))?2:1}\
"{$10,$11}"\
"{$12}_"{($10!=50)||($11!=50)?2:1}\
"{$13,$14}"\
"{$15}"\
"{$16}"\
"{$17}"\
"{$18}"\
"{$19}"\
"{$20,21}"
#@gui Perspective Streak: gui_rep_perspective_streak,gui_rep_perspective_streak_preview(0)
#@gui : note=note("Creates streak effect toward vanishing point. Read notes below the filter option for more instructions.\n\n<b>Warning - </b> This is a computationally intensive filter.\n\n<small><b>Note - </b>Future versions may come with easier way to utilize this filter.</small>"),sep=separator(),note=note("<b>Main</b>")
#@gui : Vanishing Point (%)=point(50,50,0,1,128,128,128,255)
#@gui : Alpha Exponential Factor (%)=float(0,-100,500)
#@gui : Distance Threshold (%)=float(100,.1,100)
#@gui : Distance Start (%)=float(0,0,99.99)
#@gui : Streak Direction=choice(0,"Inside","Outside")
#@gui : sep=separator(),note=note("<b>Info Output</b>")
#@gui : Streak Mode=choice(0,"Color","Grayscale","Binary","Grayscale+Binary")
#@gui : Preserve Edges=bool(1)
#@gui : note=note("<small>Preserve Edges are not available on binary mode.</small>")
#@gui : sep=separator(),note=note("<b>Preview</b>")Preview Type=choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"),Preview Split=point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(),note=note("<b>- Instruction Notes-</b>\n\n<small><b>Note 1 - </b>To effectively use this filter, experiment using <b>Secondary Settings</b> on <u>multiple copies of original image[s]</u>.\n\n<b>Note 2 - </b>Use blending modes.\n\n<b>Note 3 - </b>If your software supports alpha inheritance, use that to advantage.</small>")
#@gui : sep=separator(),note=note("<small>Author: Reptorian. Latest Update: <i>2019/12/8</i>.</small>")
gui_rep_perspective_streak:
px={(($1-50)*2)/100}
py={(($2-50)*-2)/100}
if $px<-1 px=-1
elif $px>1 px=1
fi
if $py<-1 px=-1
elif $py>1 px=1
fi
rep_pstrk $px,$py,$3%,$4%,$5%,$6,$7,$8
if $7 * 255 fi
gui_rep_perspective_streak_preview:
gui_split_preview "gui_rep_perspective_streak ${1-8}",${-3--1}
u "{$1,$2}"\
"{$3}"\
"{$4}"\
"{$5}"\
"{$6}"\
"{$7}"\
"{$8}_"{$7!=2?2:1}\
"{$9,$10}"\
"{$11}"
#@gui Axis Streak: gui_axis_streak,gui_axis_streak_preview
#@gui : note=note("Streaks pixel taking into account of opacity by blending pixels-by-pixels."),sep=separator()
#@gui : Orientation=choice(0,"Horizontal","Vertical")
#@gui : Direction=choice(0,"Left","Right")
#@gui : Direction=choice(0,"Up","Down")
#@gui : Alpha Exponential Factor(%)=float(0,-100,500)
#@gui : sep=separator(),note=note("<b>Preview</b>")Preview Type=choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"),Preview Split=point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(),note=note("<small>Author: Reptorian. Latest Update: <i>2019/12/7</i>.</small>")
gui_axis_streak:
if $1 rep_axis_streak $1,!$3,$4%
else rep_axis_streak $1,$2,$4%
fi
gui_axis_streak_preview:
gui_split_preview "gui_axis_streak ${1-4}",${-3--1}
u "{$1}"\
"{$2}"_{$1?0:2}\
"{$3}"_{$1?2:0}\
"{$4}"\
"{$5,$6}"\
"{$7}"
#@gui Majority: gui_rep_majority,gui_rep_majority_preview
#@gui : sep=separator(),note=note("<b>Filter Options</b>")
#@gui : Color Space=choice(0,"RGB","sRGB","RYB","CMY","CMYK","HCY","HSI","HSL","HSV","LAB","LCH","YIQ","YUV","YCbCr","YCbCrGLIC","XYZ","YES","Kodak 1","Ohta")
#@gui : Contain Alpha=bool(0)
#@gui : Kernel Size=int(5,2,50)
#@gui : Mode=choice(0,"Soft Regular","Soft Average Channels","Hard Regular,"Hard Average Channels")
#@gui : Convert to Black and White?=bool(0)
#@gui : sep=separator(), note=note("<b>Preview Setting</b>"), Preview Type=choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(), note=note("<b>Info about filter</b>\n\n<small>Majority effects comes in one of those two version.\n\n1- Use a predefined value to take either the value of the min/max values within kernel.\n\n2-Automatically let the average of kernel to define which values to take which can be either min/max value within kernel.</small>"),sep=separator(),note=note("<small>More information - <a href="https://forums.getpaint.net/topic/3978-majority-color-effect-ymd100726/">Paint.NET Majority Effect</a></small>")
#@gui : sep=separator(), note=note("<small>Author: Reptorian. Latest Update: <i>2019/12/31</i>.</small>")
gui_rep_majority:
rep_major $3,$4,$1,$2
if $5 to_graya fi
gui_rep_majority_preview:
gui_split_preview "gui_rep_majority ${1-5}",${-3--1}
#@gui Majority [Threshold]: gui_rep_majority_threshold,gui_rep_majority_threshold_preview
#@gui : sep=separator(),note=note("<b>Filter Options</b>")
#@gui : Color Space=choice(0,"RGB","sRGB","RYB","CMY","CMYK","HCY","HSI","HSL","HSV","LAB","LCH","YIQ","YUV","YCbCr","YCbCrGLIC","XYZ","YES","Kodak 1","Ohta")
#@gui : Contain Alpha=bool(0)
#@gui : Kernel Size=int(5,2,50)
#@gui : Tolerance (%)=float(50,0,100)
#@gui : Conditional Mode=choice(0,"Less Than","Greater Than")
#@gui : Output Mode=choice(0,"Soft","Hard")
#@gui : Convert to Black and White?=bool(0)
#@gui : sep=separator(), note=note("<b>Preview Setting</b>"), Preview Type=choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(), note=note("<b>Info about filter</b>\n\n<small>Majority effects comes in one of those two version.\n\n1- Use a predefined value to take either the value of the min/max values within kernel.\n\n2-Automatically let the average of kernel to define which values to take which can be either min/max value within kernel.</small>"),sep=separator(),note=note("<small>More information - <a href="https://forums.getpaint.net/topic/3978-majority-color-effect-ymd100726/">Paint.NET Majority Effect</a></small>")
#@gui : sep=separator(), note=note("<small>Author: Reptorian. Latest Update: <i>2019/12/31</i>.</small>")
gui_rep_majority_threshold:
rep_major_t $3,$4%,$5,$6,$1,$2
if $7 to_graya fi
gui_rep_majority_threshold_preview:
gui_split_preview "gui_rep_majority_threshold ${1-7}",${-3--1}
#@gui Newton Fractal [MadJik Style]: rep_mj_newf,rep_mj_newf
#@gui : note=note("<b>Warning-</b> Filter is very hard to control!Also,filter is computationally intensive!\n\nMight be solved later."),sep=separator()
#@gui : Zoom=float(16,1,1000000)
#@gui : X-Pan=float(0,-10000,10000)
#@gui : Y-Pan=float(0,-10000,10000)
#@gui : Color Range=float(128,0,255)
#@gui : Factor A=float(9,-100,100)
#@gui : Factor B=float(0,-100,100)
#@gui : Factor C=float(75,-100,100)
#@gui : Factor D=float(5,-100,100)
#@gui : Exponent=float(10,0,17)
#@gui : Depth=float(50,1,500)
#@gui : Background Frequency=float(50,1,500)
#@gui : Color Angle=float(45,-180,180)
#@gui : Alternate Color Function=bool(0)
#@gui : Symmetry=bool(0)
#@gui : Channel Swap=bool(0)
#@gui : sep=separator(),note=note("<small>Original Code made by MadJik - <a href="https://forums.getpaint.net/topic/111758-newton-fractal-texture-ymd-170915/">Newton Fractal texture (ymd 170915)</a></small>")
#@gui : sep=separator(),note=note("<small>Author: Reptorian. Latest Update: <i>2020/1/2</i>.</small>")
#@gui Graduated Filter: fx_rep_graduated_filter,fx_rep_graduated_filter_preview(0)
#@gui : Strength (%)=float(50,0,100)
#@gui : Luminosity Filtering Strength (%)=float(100,0,100)
#@gui : Placement (%)=float(50,0,100)
#@gui : Filtering Angle=float(0,-180,180)
#@gui : Graduated Filter Color=color(0,0,0)
#@gui : sep=separator(),Preview type=choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(),note=note("<small>Author: <i>Reptorian</i> Latest update: <i>2020/1/4</i>.</small>")
fx_rep_graduated_filter: rep_graduated_filter $1%,$2%,$3%,$4,,${5-7}
fx_rep_graduated_filter_preview: gui_split_preview "fx_rep_graduated_filter ${1-7}",${-3--1}
#@gui Rectangle-Square Fill: fx_rep_rand_sqrrecfill,fx_rep_rand_sqrrecfill
#@gui : note=note("<b>Main</b>")
#@gui : 1.Palette=choice(0,"None","RGB-{3}","B-RGB-{4}","BW-RGB-{5}","CMY-{3}","CMYK-{4}","W-CMYK-{5}","RGBCMY-{6}","1-Bit-RGB-{8}","Aurora-{256}","PLAYPAL-{249}","Sonic Robo Blast 2-{256}","Famicube-{64}","Andrew Kensler - 16","Andrew Kensler - 32","Andrew Kensler - 54","AAP-Micro 12","AAP-16","AAP-64","AAP-SPLENDOR128","DB8","DB16","DB32","DB-ISO22","DimWiddy 17","DimWiddy 23","Endesga-4","Endesga-8","Endesga-16","Endesga-32","Endesga-36","Endesga-64","Juicy-32","Juicy-56","XAIUE-22","15P-DX","20P-DX","24P-DX","Cabana-64","Fantasy 16","Fantasy 24","Tranquil Fantasy 23","Tranquility Plus 39","Faraway 48","Fleja Master Palette-{33}","Koni32","Linear Color Palette Basic-{31}","Vines Flexible Linear Ramps-{38}","Arcade Standard 29","ARQ16","BLK 36","BLK-NEO-{46}","Broken Facility","Bubblegum-16","Cade 15","Calder 8-{11}","Chromatic16","CD-BAC-{16}","CG Arne-{16}","CPC BOY-{32}","Dinoknight 16","||||-22","FZT Ethereal 16","GZXP-{11}","Indecision-{17}","Island Joy 16","Journey-{64}","Juicy 17","Oak21","Nature's Embrace 55","Nauris-16","Pear 36","Peachy Pop 16-{16}","Pineapple 32","Resurrect 32-{32}","Rosy 42","SLSO-CLR17","Softy 15","SPEC12","Starmancer-{52}","Superb 8","SuperFuture25","Sweetie 16","Taffy 16","Todayland Palette V2-{25}","Vivid-17","Voodo34","Zughy 32","ENOS16","Undertones-17","Equpix 15","Night 16","Star 29","Star 34","Still-Life-{14}","SimpleJPC-16","Acid 15","Battery 24","Clumpy 18","Cthulhu-{16}","Crimso 11","Copper-Tech-{16}","DRZ15A","Eggy 15","Eroge-Copper","Europa 16-{16}","GreyT-bit-{8}","Jewel-{15}","Polar 11","Sheltzy 32","Rube-Goldberg-{9}","BoomBoom-{7}","Generic-8","Matriax8c","NT1H-{26}","Autum 15","Autum 15 [Yellow]","JerryPie 22","Naji 16","Blessing-{5}","Crayola Blind-{9}","Easter Island-{16}","Fairy Tales-{8}","Fuzzy Four-{4}","0xdb-01-{17}","Ocaso-{17}","Pastel-{15}","17 Pastels","Pollen-8","Nopal-12","Sy17","Syz15","TUI-15","Cave-{8}","Psygnosia-{16}","MarshMellow32","Rabbit 7","Finlal 11","Vinik 24","YKB-22","Graveyard-21","Steam Lords-{16}","AAP-RadiantXV-{15}","AAP-Majesty XVII-{17}","Daruda 22","Rust-6","XAIUE-Radiant-{22}","Firestorm-{9}","SuperNova 7","NYX8","OIL6","SGM-Palette 2-{17}","Fornax Void I-{256}","Fornax Void II-{128}","Pixelwave-{12}","Spacey Easter-{17}","Moonlit-39","Petite-8","Petite-8 Afterdark","Autochrome 3","Autochrome 5","GB Default #1-{4}","GB Default #2-{4}","GB Andrade-{4}","GB Blue Seni-{4}","GB Blackzone-{4}","GB Crimson-{4}","GB Didi-{4}","GB Dirty-{4}","GB Arne-{4}","GB Easy-{4}","GB Forest-{4}","GB Harsh Green-{4}","GB Light Green-{4}","GB Nostalgia-{4}","GB Platinum-{4}","GB Kirokaze-{4}","GB PJ-{4}","GB Cyber-{4}","GB Wish-{4}","GB Grapefruit-{4}","GB Ice Cream-{4}","GB Red_Blue-{4}","GB Spacehaze-{4}","GB Chocolate-{4}","GB Purple Dawn-{4}","GB Gray-{4}","ARNE4","HallowPumpkin-{4}","Amiga 2600 NTSC-{128}","Amiga 2600 PAL-{104}","Amiga 2600 SECAM-{8}","Amiga 7800 M.E.S.S-{256}","Amiga 7800-{256}","Amstrad CPC-{27}","Apple II-{15}","CGA-{16}","CGA Mode 0 [Low]-{4}","CGA Mode 0 [High]-{4}","CGA Mode 1 [Low]-{4}","CGA Mode 1 [High]-{4}","CGA Mode 2 [Low]-{4}","CGA Mode 2 [High]-{4}","Commodore 64 [Pepto Interpretation]-{16}","Commodore 64 [Colodore Interpretation]-{16}","Commodore VIC-20-{16}","Colecovision-{15}","Japanese Machine Palette-{16}","Macintosh II-{16}","NES-{52}","PICO-8-{16}","RISC OS-{16}","SAM Coupe-{128}","Thomson MO5-{16}","VGA-{244}","ZX Spectrum-{15}","GNOME 32-{32}","Electronic Crayon 22","Chip16","MSX-{15}","Deluxe Paint-{222}","Legacy Paint-{16}","XP Paint-{28}","Vista Paint-{28}")
#@gui : 2.Use Random Color Instead?=bool(0)
#@gui : 3.Square Size=int(15,2,150)
#@gui : 4.Max Primary Dimension of Rectangle=int(2,1,10)
#@gui : 5.Max Secondary Dimension of Rectangle=int(1,1,10)
#@gui : 6.Frequency of Rectangle=float(1,0,1)
#@gui : 7.Line Erosion=int(0,-15,15)
#@gui : 8.Line Output=bool(1)
#@gui : 9.Reduce Non-Rectangular Shape=bool(1)
#@gui : 10.Remove Black from Palette?=bool(1)
#@gui : Seed=int(0,0,50000)
#@gui : Colour Space=choice(0,"RGB-8","RYB-8","HSI-8","HSL-8","HSV-8","LAB-8","LCH-8","YIQ-8","YUV-8")
#@gui : sep=separator(),note=note("<b>Extra</b>")
#@gui : Output Mode=choice(0,"Clipped","Enlarged","Shrinked")
#@gui : sep=separator(),note=note("<small>Author: <i>Reptorian</i> Latest update: <i>2020/1/8</i>.</small>")
fx_rep_rand_sqrrecfill:
    ww={w}
    hh={h}
if $-1!=1
    square_size=$3
    if $8
        if abs($7) 
            if $7>0 square_size+={abs($5)}
            else square_size+=1
            fi
        fi
    fi
    rw={w-$square_size*2}
    rh={h-$square_size*2}
    nw={floor($rw/($square_size*($8?(($3+1)/$3):1)))*$square_size}
    nh={floor($rh/($square_size*($8?(($3+1)/$3):1)))*$square_size}
    if $-1==2 r $nw,$nh,100%,100% fi
fi
if $2 rep_rand_sqrrecfill -1,${3--2}
else rep_rand_sqrrecfill $1,${3--3} 
if $1==0 n. 0,255 fi
fi

if $-1!=1 if $-1==2 f. 255-i fi r. $ww,$hh,100%,100%,0,0,.5,.5 if $-1==2 f. 255-i fi fi
k.
u "{$1}_"{$2?1:2}\
"{$2}"\
"{$3}"\
"{$4}"\
"{$5}"\
"{$6}"\
"{$7}_"{(($1==0&&$2==0)?0:$8)?2:1}\
"{$8}_"{$1==0&&$2==0?1:2}\
"{$9}"\
"{$10}"_{!($1==0&&$2!=1)?2:1}\
"{$11}"\
"{$12}_"{$2?2:1}\
"{$13}"
#@gui Point Warp:gui_rep_pw,gui_rep_pw_preview(0)
#@gui : Point Width=float(100,0,100)
#@gui : Distance=float(100,0,100)
#@gui : Radial Influence=float(0,0,100)
#@gui : Placement of Distortion=point(50,50,0,1,128,128,128,255)
#@gui : Distortion Angle=float(0,-180,180)
#@gui : Boundary Condition=choice(3,"None","Neumann","Periodic","Mirror")
#@gui : sep=separator(), Preview Type=choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(),_=note("<small>This is a modified code of a conversion of Illab2014's Paint.NET plugin named <a href="https://forums.getpaint.net/topic/32180-point-warp-engorged-smudge-aug-20-2015/">Point Warp</a>. The difference between this and Illab2014's filter is that this one takes into account of image size and contains boundary conditions.</small>")
#@gui : sep=separator(),_=note("<small>Author: <i>Reptorian</i> Latest update: <i>2020/2/26</i>.</small>")
gui_rep_pw:
rep_pw $1%,$2%,$3%,{($4/100-.5)*2},{($5/100-.5)*-2},$6,$7
gui_rep_pw_preview:
gui_split_preview "gui_rep_pw ${1-7}",${-3--1}
#@gui Prime Surface:gui_rep_prime_surface
#@gui : _=note("<b>Warning!:</b> This filter is super computationally intensive!It is recommended that you use a small image dimension to use this filter!\n\n<b>For starters:</b> Start with a dimension of 256x256. If it takes too long, decrease the area of your image dimension. If it finish quickly, then increase the area of your dimension."),sep=separator()
#@gui : Negate Direction?=bool(0)
#@gui : Mirror?=bool(0)
#@gui : sep=separator(),_=note("<small>Author: <i>Reptorian</i> Latest update: <i>2020/2/26</i>.</small>")
gui_rep_prime_surface:
rep_prime_surface {w},{h},$1,$2 k. n 0,255
#@gui Pixel Push : fx_rep_pxpush,fx_pxpush_preview(0)
#@gui : Push Point=point(50,50,0,1,255,255,255,255)
#@gui : sep=separator(),_=note("Recreation of filter from source code to TR's Pixel Push plugin for Paint.NET.Currently only Bezier option is supported until the secondary option is figured out.")
#@gui : sep=separator(), Preview Type=choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(), note=note("<small>Author: Reptorian. Latest Update: <i>2020/2/26</i>.</small>")
fx_rep_pxpush: rep_pxpush {($1/100-.5)*2},{($2/100-.5)*2}
fx_pxpush_preview: gui_split_preview "fx_rep_pxpush $*",${-3--1}
#@gui Rotate by Torus Map: fx_rep_rbtt, fx_rep_rbtt_preview(0)
#@gui : _=note("<b>Main</b>")
#@gui : Circumference A (%)=float(100,0,100)
#@gui : Circumference B (%)=float(50,0,100)
#@gui : sep=separator()_=note("<b>Distortion</b>")
#@gui : Distortion Angle=float(-180,-720,720)
#@gui : Distortion Mode=choice(3,"Soft","Medium","Hard","Alternative Hard","Distroy","Inverse-Distroy","Quad Extrude","Hexagonal Extrude")
#@gui : Distortion Mode A=choice(3,"Soft","Medium","Hard","Alternative Hard","Distroy","Inverse-Distroy","Quad Extrude","Hexagonal Extrude")
#@gui : Distortion Mode B=choice(7,"Soft","Medium","Hard","Alternative Hard","Distroy","Inverse-Distroy","Quad Extrude","Hexagonal Extrude")
#@gui : Distortion Mode Blending (%)=float(50,0,100)
#@gui : Enable Distortion Mode Blending=bool(1)
#@gui : Distortion Position=point(50,50,0,1,255,255,255,255)
#@gui : Wraparound Distortion?=bool(1)
#@gui : sep=separator(),_=note("<b>Additional</b>")
#@gui : Remove Background?=bool(0)
#@gui : Activate Isolated Torus Mode?=bool(0)
#@gui : sep=separator(),_=note("<b>Rendering</b>")
#@gui : Interpolation=choice(1,"None","Linear")
#@gui : Boundary Condition=choice(2,"None","Neumann","Periodic","Mirror")
#@gui : sep=separator(),_=note("<b>Preview</b>"), Preview Type=choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split = point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(),_=note("<b>Information</b>\n"),_=note("This filter is inspired by <a href="https://forums.getpaint.net/topic/23400-donut-distortion-effect-plugin/">Donut Distortion Paint.NET plugin</a> by <a href="https://forums.getpaint.net/profile/45895-madjik/">MadJik</a>.\n\n This G'MIC version includes additional modes,wraparound mode, and special mode which isolates the distortion.")
#@gui : sep=separator(), note=note("<small>Author: Reptorian. Latest Update: <i>2020/2/29</i>.</small>")
fx_rep_rbtt:
to_a
if $8 rep_rbtt {$1/100},{$2/100},$3,$5,$6,{$7/100},{($9/100-.5)*2},{($10/100-.5)*-2},$11,$12,$13,$14,$15
else  rep_rbtt {$1/100},{$2/100},$3,$4,,,{($9/100-.5)*2},{($10/100-.5)*-2},$11,$12,$13,$14,$15
fi
fx_rep_rbtt_preview: gui_split_preview "fx_rep_rbtt ${1-13},{$14*-1},$15",${-3--1}
u "{$1}"\
"{$2}"\
"{$3}"\
"{$4}_"{!$8?2:1}\
"{$5}_"{$8?2:1}\
"{$6}_"{$8?2:1}\
"{$7}_"{$8?2:1}\
"{$8}"\
"{$9,$10}"\
"{$11}"\
"{$12}"\
"{$13}_"{$12?2:1}\
"{$14}"\
"{$15}"\
"{$16}"\
"{$17,$18}"
#@gui RGB-Gray Linear Interpolation: fx_rep_lerp_rgb_gray,fx_rep_lerp_rgb_gray_preview(0)
#@gui : _=note("<b>Formula</b>")
#@gui : Mode=choice(0,"Luminosity A","Luminosity B","Lightness","Minimum","Maximum","Average",Weighted")
#@gui : Limit Factor to 100%=bool(0)
#@gui : sep=separator(),_=note("<b>Channel Factor</b>")
#@gui : Red Factor (%)=float(100,0,150)
#@gui : Green Factor (%)=float(100,0,150)
#@gui : Blue Factor (%)=float(100,0,150)
#@gui : Red Factor (%)=float(100,0,100)
#@gui : Green Factor (%)=float(100,0,100)
#@gui : Blue Factor (%)=float(100,0,100)
#@gui : Red Weight=float(1,0,1)
#@gui : Green Weight=float(100,0,1)
#@gui : Blue Weight=float(100,0,1)
#@gui : sep=separator(),_=note("<b>Preview</b>"),Preview Type=choice("Full","Forward Horizontal","Forward Vertical","Backward Horizontal","Backward Vertical","Duplicate Top","Duplicate Left","Duplicate Bottom","Duplicate Right","Duplicate Horizontal","Duplicate Vertical","Checkered","Checkered Inverse"), Preview Split=point(50,50,0,0,200,200,200,0,10)_0
#@gui : sep=separator(),note=note("<small>Author: Reptorian. Latest Update: <i>2020/14/3</i>.</small>")
fx_rep_lerp_rgb_gray:
if $1==6 
    if $2 rep_lerp_rgb_gray $6%,$7%,$8%,${9-11}
    else  rep_lerp_rgb_gray $3%,$4%,$5%,${9-11}
    fi
else 
    if $2 rep_lerp_rgb_gray $6%,$7%,$8%,$1
    else  rep_lerp_rgb_gray $3%,$4%,$5%,$1
    fi
fi
fx_rep_lerp_rgb_gray_preview:
gui_split_preview "fx_rep_lerp_rgb_gray ${1-11}",${-3--1}
u "{$1}"\
"{$2}"\
"{$3}_"{$2?0:2}\
"{$4}_"{$2?0:2}\
"{$5}_"{$2?0:2}\
"{$6}_"{$2?2:0}\
"{$7}_"{$2?2:0}\
"{$8}_"{$2?2:0}\
"{$9}_"{$1==6?2:0}\
"{$10}_"{$1==6?2:0}\
"{$11}_"{$1==6?2:0}\
"{$12}"\
"{$13,14}"
######################

# Local Variables:
# mode: sh
# End:
#
# (End of G'MIC custom commands)
