#@gmic
#
#  File        : joan_rake1.gmic
#                ( G'MIC commands file )
#
#  Description : Personal G'MIC filters done by Ronounours and others.
#
#  Copyright   : David Tschumperle
#                ( http://tschumperle.users.greyc.fr/ )
#
#  License     : CeCILL v2.0
#                ( http://www.cecill.info/licences/Licence_CeCILL_V2-en.html )
#
#  This software is governed by the CeCILL  license under French law and
#  abiding by the rules of distribution of free software.  You can  use,
#  modify and/ or redistribute the software under the terms of the CeCILL
#  license as circulated by CEA, CNRS and INRIA at the following URL
#  "http://www.cecill.info".
#
#  As a counterpart to the access to the source code and  rights to copy,
#  modify and redistribute granted by the license, users are provided only
#  with a limited warranty  and the software's author,  the holder of the
#  economic rights,  and the successive licensors  have only  limited
#  liability.
#
#  In this respect, the user's attention is drawn to the risks associated
#  with loading,  using,  modifying and/or developing or reproducing the
#  software by the user in light of its specific status of free software,
#  that may mean  that it is complicated to manipulate,  and  that  also
#  therefore means  that it is reserved for developers  and  experienced
#  professionals having in-depth computer knowledge. Users are therefore
#  encouraged to load and test the software's suitability as regards their
#  requirements in conditions enabling the security of their systems and/or
#  data to be ensured and,  more generally, to use and operate it in the
#  same conditions as regards security.
#
#  The fact that you are presently reading this means that you have had
#  knowledge of the CeCILL license and that you accept its terms.
#

#@gui _<b>Degradations</b>
#---------------------------

#@gui UltraWarp+++ : fx_ultrawarpplusplusplus, fx_ultrawarpplusplusplus(1)
#@gui : note = note("Sequence of multiple partially-randomised texture generation and image deformation filters with multi-iteration warping")
#@gui : note = note("<small>This modular filter is extremely complex and its logic may not follow that which you expect. Left on its default settings, it is very likely to munge your image beyond recognition.</small>"), sep = separator()
#@gui : 1.  Quick Refresh Button = bool(0)
#@gui : sep = separator()
#@gui : 2.  Plasma Texture [Discards input image] = bool(0)
#@gui : 3.  Plasma Scale = float(3.3,0,20)
#@gui : 4.  Plasma Alpha Channel = bool(0)
#@gui : sep = separator()
#@gui : 5.  Segmentation [no alpha channel] = bool(1)
#@gui : 6.  Edge Threshold = float (20,0.01,60)
#@gui : 7.  Smoothness = float (0,0,60)
#@gui : sep = separator()
#@gui : 8.  Blur = float (0,0,30)
#@gui : sep = separator()
#@gui : 9.  Quadtree Pixelisation [no alpha channel] = bool(1)
#@gui : 10.  Quadtree Min Precision = int(4,2,2048)
#@gui : 11.  Quadtree Max Precision = int(256,0,2048)
#@gui : 12.  Quadtree Min Homogeneity = float(4.8,0,5)
#@gui : 13.  Quadtree Max Homogeneity = float(5,0,5)
#@gui : sep = separator()
#@gui : 14. Noise Type = choice(2,"Gaussian","Uniform","Salt and pepper","Poisson")
#@gui : 15. Minimum Noise = float(0,0,8)
#@gui : 16. Maximum Noise = float(0,0,8)
#@gui : 17. Noise Channel(s) = choice(2,"All","RGBA [all]","RGB [all]","RGB [red]","RGB [green]","RGB [blue]","RGBA [alpha]","Linear RGB [all]","Linear RGB [red]","Linear RGB [green]","Linear RGB [blue]","YCbCr [luminance]","YCbCr [blue-red chrominances]","YCbCr [blue chrominance]","YCbCr [red chrominance]","YCbCr [green chrominance]","Lab [lightness]","Lab [ab-chrominances]","Lab [a-chrominance]","Lab [b-chrominance]","Lch [ch-chrominances]","Lch [c-chrominance]","Lch [h-chrominance]","HSV [hue]","HSV [saturation]","HSV [value]","HSI [intensity]","HSL [lightness]","CMYK [cyan]","CMYK [magenta]","CMYK [yellow]","CMYK [key]","YIQ [luma]","YIQ [chromas]")
#@gui : sep = separator(), note = note("<small>Warping</small>")
#@gui : 18. Warp Iterations = int(5,0,30)
#@gui : 19. Warp Intensity = float(2.8,0,30)
#@gui : 20. Warp Offset = float(10,0,2000)
#@gui : 21. Scale to Width = bool(1)
#@gui : 22. Scale to Height = bool(1)
#@gui : 23. Correlated Channels = choice("Random","Off","On")
#@gui : 24. Warp Channel(s) = choice(2,"Random","RGBA [all]","RGB [all]","RGB [red]","RGB [green]","RGB [blue]","RGBA [alpha]","Linear RGB [all]","Linear RGB [red]","Linear RGB [green]","Linear RGB [blue]","YCbCr [luminance]","YCbCr [blue-red chrominances]","YCbCr [blue chrominance]","YCbCr [red chrominance]","YCbCr [green chrominance]","Lab [lightness]","Lab [ab-chrominances]","Lab [a-chrominance]","Lab [b-chrominance]","Lch [ch-chrominances]","Lch [c-chrominance]","Lch [h-chrominance]","HSV [hue]","HSV [saturation]","HSV [value]","HSI [intensity]","HSL [lightness]","CMYK [cyan]","CMYK [magenta]","CMYK [yellow]","CMYK [key]","YIQ [luma]","YIQ [chromas]")
#@gui : 25. Random Negation = bool(1)
#@gui : 26. Random Negation Channel(s) = choice(2,"Random","RGBA [all]","RGB [all]","RGB [red]","RGB [green]","RGB [blue]","RGBA [alpha]","Linear RGB [all]","Linear RGB [red]","Linear RGB [green]","Linear RGB [blue]","YCbCr [luminance]","YCbCr [blue-red chrominances]","YCbCr [blue chrominance]","YCbCr [red chrominance]","YCbCr [green chrominance]","Lab [lightness]","Lab [ab-chrominances]","Lab [a-chrominance]","Lab [b-chrominance]","Lch [ch-chrominances]","Lch [c-chrominance]","Lch [h-chrominance]","HSV [hue]","HSV [saturation]","HSV [value]","HSI [intensity]","HSL [lightness]","CMYK [cyan]","CMYK [magenta]","CMYK [yellow]","CMYK [key]","YIQ [luma]","YIQ [chromas]")
#@gui : 27. Gamma Offset = float(0.25,0,1)
#@gui : 28. Hue Offset = float(1,0,1)
#@gui : 29. Normalise = bool(1)
#@gui : sep = separator(), note = note("<small>Final HSV Scaling</small>")
#@gui : 30. Minimum Hue = float(0,0,20)
#@gui : 31. Maximum Hue = float(5,0,20)
#@gui : 32. Minimum Saturation = float(0,0,20)
#@gui : 33. Maximum Saturation = float(3,0,20)
#@gui : 34. Minimum Value = float(0,0,20)
#@gui : 35. Maximum Value = float(20,0,20)
#@gui : note = note("<small>Set these to their minimum values for randomisation</small>")
#@gui : 36. Hue Offset = float(-180.01, -180.01, 180)
#@gui : 37. Saturation Offset = float(-0.01, -0.01, 1)
#@gui : 38. Value Offset = float(-20.01,-20.01,20)
#@gui : sep = separator(),
#@gui : -3. Normalise = bool(1)
#@gui : -2. Channel(s) = choice("All","RGBA [all]","RGB [all]","RGB [red]","RGB [green]","RGB [blue]","RGBA [alpha]","Linear RGB [all]","Linear RGB [red]","Linear RGB [green]","Linear RGB [blue]","YCbCr [luminance]","YCbCr [blue-red chrominances]","YCbCr [blue chrominance]","YCbCr [red chrominance]","YCbCr [green chrominance]","Lab [lightness]","Lab [ab-chrominances]","Lab [a-chrominance]","Lab [b-chrominance]","Lch [ch-chrominances]","Lch [c-chrominance]","Lch [h-chrominance]","HSV [hue]","HSV [saturation]","HSV [value]","HSI [intensity]","HSL [lightness]","CMYK [cyan]","CMYK [magenta]","CMYK [yellow]","CMYK [key]","YIQ [luma]","YIQ [chromas]")
#@gui : -1. Value action = choice("None","Cut","Normalize")

ultrawarpplusplusplus:

# plasma rendering and pixelisation followed by random warp with gamma and hue randomisation and final HSV scaling

  hue_min={$30}
  hue_max={$31}
  sat_min={$32}
  sat_max={$33}
  val_min={$34}
  val_max={$35}

  j={min($hue_min,$hue_max)+(u*(max($hue_min,$hue_max)-min($hue_min,$hue_max)))}
  k={min($sat_min,$sat_max)+(u*(max($sat_min,$sat_max)-min($sat_min,$sat_max)))}
  l={min($val_min,$val_max)+(u*(max($val_min,$val_max)-min($val_min,$val_max)))}

  -if {$2}

    -if {$4} ch=0 -else ch=2 -endif

    -ac  "rr={round(u*255)}
          gg={round(u*255)}
          bb={round(u*255)}

          -fx_plasma 0.5,0,{$3},1,1,{$rr},{$gg},{$bb}
          -if {$4} -to_rgba -else ch=2 -to_rgb -endif",{$ch}

  -endif

  -fx_gaussian_blur {$8},0,0,1,2,0,0

  n_min={$15}
  n_max={$16}

  -if {$n_min > $n_max}
    n_min = {$n_min + $n_max}
    n_max = {$n_min - $n_max}
    n_min = {$n_min - $n_max}
  -endif

  noise_exp={max(0,$n_min+(u*($n_max-$n_min)))}
  n_amt={4^($noise_exp-3)-((4^(-3))*($noise_exp-1))}

  -if {$5}
    -fx_segment_watershed {$6},{$7},0,2,0
  -endif
  -if {$9}

    p_min={$10}
    p_max={$11}
    h_min={$12}
    h_max={$13}

    -if {$p_min > $p_max}
      p_min = {$p_min + $p_max}
      p_max = {$p_min - $p_max}
      p_min = {$p_min - $p_max}
    -endif

    -if {$h_min > $h_max}
      h_min = {$h_min + $h_max}
      h_max = {$h_min - $h_max}
      h_min = {$h_min - $h_max}
    -endif

    -fx_noise {$noise_exp},{$14},{$17},1,0
    -fx_quadtree 0,{max(2,round($p_min+(u*($p_max-$p_min))))},{max(0,round($h_min+(u*($h_max-$h_min))))},0,3,1.5,1,1,0

  -endif

  -fx_noise {$noise_exp},{$14},{$17},1,0

  f={$18} # iterations
  i={$19} # warp intensity
  m={$20} # offset magnitude
  s={$27} # gamma
  v={$28} # hue

  -repeat {max(0,$f)}

    -if {$21}
      scale_x=w/100
    -else
      scale_x=1
    -endif
    -if {$22}
      scale_y=h/100
    -else
      scale_y=1
    -endif

    a=(u-0.5)*$i
    b=(u-0.5)*$i
    c=(u-0.5)*$m*sign($m)*$scale_x
    d=(u-0.5)*$m*sign($m)*$scale_y
    f={round((u*2.98)+0.51)}
    g={round((u*33.98)-0.49)}
    h={(u-0.5)*$s*200}
    o={(u-0.5)*$v*200}

    -if {$23==1}
      e=0
    -elif {$23==2}
      e=1
    -else
      e={round(u)}
    -endif

    -if {$24==0}
      -fx_warp_by_intensity {$a},{$b},{$c},{$d},{$e},0,{$f},{$g},0
    -else
      -ac  "-if {$21}
              scale_x=w/100
            -else
              scale_x=1
            -endif
            -if {$22}
              scale_y=h/100
            -else
              scale_y=1
            -endif
            a={(u-0.5)*$19}
            b={(u-0.5)*$19}
            c={(u-0.5)*$20*sign($20)*$scale_x}
            d={(u-0.5)*$20*sign($20)*$scale_y}
            f={round((u*2.98)+0.51)}

            -if {$23==1}
              e=0
            -elif {$23==2}
              e=1
            -else
              e={round(u)}
            -endif

         -_fx_warp_by_intensity {$a},{$b},{$c},{$d},{$e},0,{$f}",{$24},0
    -endif


    -if {$25}
      nn={round(u)}
      -if {$nn}
        -if {$26==0}
          nch={round((u*33.98)-0.49)}
          -ac "-negate",{$nch}
        -else
          -ac "-negate",{$26}
        -endif
      -endif
    -endif

    -fx_adjust_colors 0,0,{$h},{$o},0,0

    -if {$29}
      -ac "-n 0,255",3
    -endif

  -done

  -if {$36==-180.1}
    hh=((u-0.5)*360)
  -else
    hh={$36}
  -endif
  -if {$37==-0.01}
    ss=((u-0.5)*2)
  -else
    ss={$37}
  -endif
  -if {$38==-20.01}
    vv=((u-0.5)*2)
  -else
    vv={$38}
  -endif

  -fx_mix_hsv {$j},{$hh},0,{$k},{$ss},0,{$l},{$vv},0,0,2,0

  -if {$-3}
    -ac "-n 0,255",3
  -endif

fx_ultrawarpplusplusplus:

index=0
layers=l

-repeat {max(0,$layers)}
  -ac[$index] "-ultrawarpplusplusplus $*",$-2,$-1
  -fx_adjust_colors[$index] 0,0,0,{(u-0.5)*200},0,0
  index={$index+1}
-done


# #@gui Rectexture : fx_rectexture, fx_rectexture(1)
# #@gui : Channel(s) = choice("All","RGBA [all]","RGB [all]","RGB [red]","RGB [green]","RGB [blue]","RGBA [alpha]","Linear RGB [all]","Linear RGB [red]","Linear RGB [green]","Linear RGB [blue]","YCbCr [luminance]","YCbCr [blue-red chrominances]","YCbCr [blue chrominance]","YCbCr [red chrominance]","YCbCr [green chrominance]","Lab [lightness]","Lab [ab-chrominances]","Lab [a-chrominance]","Lab [b-chrominance]","Lch [ch-chrominances]","Lch [c-chrominance]","Lch [h-chrominance]","HSV [hue]","HSV [saturation]","HSV [value]","HSI [intensity]","HSL [lightness]","CMYK [cyan]","CMYK [magenta]","CMYK [yellow]","CMYK [key]","YIQ [luma]","YIQ [chromas]")
# #@gui : Value action = choice("None","Cut","Normalize")


# rectexture:

#   100%,100%,1,3
#   -fill_color[-1] 255,255,255
#   100%,100%,1,3
#   ww=(round($w*u))
#   hh=(round($h*u))
#   sw=(round($w*u))
#   sh=(round($h*u))
#   -r[-1] 1,0,$ww,$hh
#   -fill_color[-1] 0,0,0
#   -shift[-1] $sw, $sh
#   -blend[-1,-2]
#   -ac "-ultrawarpplusplusplus $*",2,0
#   -norm -gt 50% -* 255
#   -to_rgba[-1]

#   fx_rectexture:



#   index=0
#   layers=l

#   -repeat {max(0,$layers)}
#     -ac[$index] "-rectexture $*",$-2,$-1
#     index={$index+1}
#   -done

# Local Variables:
# mode: sh
# End:
#
# (End of G'MIC custom commands)
