#@gmic
#
#  File        : karsten_rodenacker.gmic
#                ( G'MIC and G'MIC-Gimp commands file )
#
#  Description : Define several gmic commands
#
#  Copyright   : Karsten Rodenacker
#
#  License     : CeCILL v2.0
#                ( http://www.cecill.info/licences/Licence_CeCILL_V2-en.html )
#
#  This software is governed by the CeCILL  license under French law and
#  abiding by the rules of distribution of free software.  You can  use,
#  modify and/ or redistribute the software under the terms of the CeCILL
#  license as circulated by CEA, CNRS and INRIA at the following URL
#  "http://www.cecill.info".
#
#  As a counterpart to the access to the source code and  rights to copy,
#  modify and redistribute granted by the license, users are provided only
#  with a limited warranty  and the software's author,  the holder of the
#  economic rights,  and the successive licensors  have only  limited
#  liability.
#
#  In this respect, the user's attention is drawn to the risks associated
#  with loading,  using,  modifying and/or developing or reproducing the
#  software by the user in light of its specific status of free software,
#  that may mean  that it is complicated to manipulate,  and  that  also
#  therefore means  that it is reserved for developers  and  experienced
#  professionals having in-depth computer knowledge. Users are therefore
#  encouraged to load and test the software's suitability as regards their
#  requirements in conditions enabling the security of their systems and/or
#  data to be ensured and,  more generally, to use and operate it in the
#  same conditions as regards security.
#
#  The fact that you are presently reading this means that you have had
#  knowledge of the CeCILL license and that you accept its terms.
#

#@gui _<b>Testing</b>
#@gui KaRo's Tests

#@gui About : _none_, karos_about
#@gui : note = note{"
#@gui : KaRo's test files for <b>G'MIC</b>\n\written by"}
#@gui : note = link("Karsten Rodenacker","http://K.Rodenacker.de")
#@gui : note = note{"\n"}
#@gui : note = note{"
#@gui : The source code of this set of filters is available at :"}
#@gui : note = link("https://github.com/dtschump/gmic-community/blob/master/karos.gmic")
#@gui : sep = separator()
#@gui : note = note{"Several operations here rely on executables existing <i>in search PATH</i> ($PATH unter Mac/Unix).
#@gui : This means that the executable is downloaded or built and properly located.
#@gui : E. g. CImg examples have to be built and copied to a location in the search path, e.g. under unix <i>/usr/local/bin</i>.
#@gui : Similar with PINK executables. For Mac they have to be built according the README with <i>./makelin</i>
#@gui : and PATH as to be extended by <i>..pink location../linux/bin</i>."}
#@gui : sep = separator()
#@gui : note = note{"  CImg Skeleton: <i>use_skeleton</i> in search PATH"}
#@gui : note=link("https://github.com/dtschump/CImg/blob/master/examples/use_skeleton.cpp")
#@gui : note = note{"  CImg nlmeans: <i>use_nlmeans</i> in search PATH"}
#@gui : note=link("https://github.com/dtschump/CImg/blob/master/examples/use_nlmeans.cpp")
#@gui : note = note{"  mM Differences: \nmathematical morphology operation differences\nmM operation size - mM operation size2"}
#@gui : note = note{"  oC Differences: \nmathematical morphology open/close differences\nmM open size - mM close size"}
#@gui : note = note{"  Pink operations binary: <i>Pink applications</i> in search PATH"}
#@gui : note=link("http://pinkhq.com/")
#@gui : sep = separator()
#@gui : note = note{"\nThe functions defined are quite <i>experimental</i> and subject to changes.
#@gui : Please do not rely on the fact that they will perform equally forever."}
karos_about :
  -fx_logo_version{round(u(0.5,3.49))} $_version [0] -*[-1] 0 -text[-1] "KaRo's",10%,22%,57,1,255 -text[-1] "Tests",40%,60%,57,1,200 --to_gray[-1] -skeleton[-1] , -n[-1--2] 0,255 -dilate[-2] 2 --[-1--2] -+ -n 0,255

#@cli :: KaRo's Tests

#@cli wykoread : _filename
#@cli : Read Wyko/Bruker/Vision ASCII file and produce image(s)
#@cli : Data preceded by "RAW_DATA" and/or "Intensity" are imported
wykoread : -skip "${1=Wyko_Example.ASC}"
  -e[^-1] "Read Vision surface profilometry OPD text data "$1 
  -v - -l[]
    -i raw:"$1",uchar nm={b}
    # Retrieve header information.
    -s +,10
    size_x=-1 size_y=-1 hend=-1 rend=-1
    -repeat $!
      -if {same(['{$>,t}'],'"X Size"',6)} -rows[$>] 6,100% size_x={{$>,t}}
      -elif {same(['{$>,t}'],'"Y Size"',6)} -rows[$>] 6,100% size_y={{$>,t}}
      -elif {same(['{$>,t}'],'"RAW_DATA"',8)} hend=$>
      -elif {same(['{$>,t}'],'"Intensity"',9)} rend=$> -break
      -endif
    -done
    -if {$hend>0}
      -rm[0-{$hend+1}] 
      -if {$rend>$hend} -a[0-{$rend-$hend-3}] y -rm[1,2] -a[1--1] y -else -a y -endif
      #-e "Size = ("$size_x,$size_y,$hend,$rend")"
      # Save remaining data as a pure ascii file.
      -replace_str "Bad","nan"
      -discard 13
      file_tmp=${-file_rand}
      -if {$!>1} -o.. raw:$file_tmp,uchar -rm.. -i dlm:$file_tmp -nm. $nm 
        -o.. raw:${file_tmp}_,uchar -rm.. -i dlm:${file_tmp}_ -nm. ${nm}_ -file_rm ${file_tmp}_
      -else -o raw:$file_tmp,uchar -rm -i dlm:$file_tmp -nm. $nm 
      -endif
      -file_rm $file_tmp
	  -rotate -90,0
    -else
      -rm
    -endif
  -endl -v + 

#@cli pseudo_c : Pseudo coloring of greyscale image
pseudo_c : -v - -if {s!=1} -to_gray. -endif {iM},1,1,3,u(255) -round. -map.. . -rm.  -v +

#@cli sincos : _w(512), _h(512)
#@cli : testimage
#@cli : Ex: -sincos , --shift. 50%,0,0,0,2 --shift.. 0,50%,0,0,2 -a c
sincos :
  -skip "${1=512},${2=512}" -v - -l[]
  $1,$2,1,1,'init(a=pi*w;b=pi*h);sin(a/(x+1))*cos(b/(y+1))'
  --f. 'sign(i)' -eq. 1 --neq. 1 -*[1] [-3] -*. [-3] -n[-1,-2] 0,255
  -f. 'if(i==255,0,i)' -or[-1,-2] -rm.. -nm. sincos -endl -v +

#@cli karo_luminance : _type = [itur1990 | itur1990-2 | gmic | gmic-2]
#@cli : Compute luminance of selected RGB images according
#@cli :   itur1990 | itur1990-2 sqr/sqrt | gmic -luminance | sqr/sqrt gmic -luminance.
#@cli : sRGB RGB and back only with gmic!
#@cli : Default _type=itur1990
#@cli : $ image.jpg --karo_luminance ,
karo_luminance : -skip ${1=itur1990}
-e[^-1] "Compute luminance $1 of image$?."
-v - -remove_opacity -if {['"$1"']=='gmic'" || "['"$1"']=='gmic-2'} -srgb2rgb -endif
-repeat $! -l[$>]
-if {s==3} -sh 0,0 -sh[0] 1,1 -sh[0] 2,2
  -if   {['"$1"']=='gmic'} -*[1] 0.299 -*[2] 0.587 -*[3] 0.114 -+[1-3] -rm[1]
  -elif {['"$1"']=='gmic-2'} -sqr -*[1] 0.299 -*[2] 0.587 -*[3] 0.114 -+[1-3] -sqrt -rm[1]
  -elif {['"$1"']=='itur1990-2'} -sqr -*[1] 0.212655 -*[2] 0.715158 -*[3] 0.072187 -+[1-3] -sqrt -rm[1]
  -else -*[1] 0.212655 -*[2] 0.715158 -*[3] 0.072187 -+[1-3] -rm[1] -endif
-elif {s!=1} -norm -n 0,255
-endif -endl -done
-channels 0
-if {['"$1"']=='gmic'" || "['"$1"']=='gmic-2'} -rgb2srgb -endif
-v +

#@cli karo_close : '_size>0','_shape=0|1|2' (square|octagon|circle),'_invert=0|1','_scale=0|1',
#@cli : '_channel=0..22' (All|RGBA|RGB|Luminance|Blue/red chrominances|Blue chrominance|Red chrominance|Lightness
#@cli : |ab-components|a-component|b-component|Hue|Saturation|Value|Key|Green chrominance|ch-components|c-component|h-component|Red|Green|Blue|Alpha)
#@cli : Morphological closing (dilate and erode) of given size (only 2d)
#@cli :  with -fx_morpho and implicitly apply_channels!
#@cli : $ image.jpg  --karo_close 15 --karo_close[0] 15,1 --karo_close[0] 15,2 -rm[0]
karo_close :
  -e "Compute closing image$?, with size $1 (only 2d)."
  -skip ${1=5},${2=0},${3=0},${4=0},${5=0} -check $2<3 -v -
  -if {$_version<175} -fx_morpho 3,$1,$3,$2,$5,$4
  -else -fx_morpho_v2 3,$2,$1,"1,0,1; 0,1,0; 1,0,1",$3,1,$5,$4
  -endif -v +

#@cli karo_open : '_size>0','_shape=0|1|2' (square|octagon|circle),'_invert=0|1','_scale=0|1',
#@cli : '_channel=0..22' (All|RGBA|RGB|Luminance|Blue/red chrominances|Blue chrominance|Red chrominance|Lightness
#@cli : |ab-components|a-component|b-component|Hue|Saturation|Value|Key|Green chrominance|ch-components|c-component|h-component|Red|Green|Blue|Alpha)
#@cli : Morphological opening (erode and dilate) of given size (only 2d)
#@cli :  with -fx_morpho and implicitly apply_channels!
#@cli : $ image.jpg  --karo_open 15 --karo_open[0] 15,1 --karo_open[0] 15,2 -rm[0]
karo_open :
  -e "Compute opening image$?, with size $1 (only 2d)."
  -skip ${1=5},${2=0},${3=0},${4=0},${5=0} -check $2<3 -v -
  -if {$_version<175} -fx_morpho 2,$1,$3,$2,$5,$4
  -else -fx_morpho_v2 2,$2,$1,"1,0,1; 0,1,0; 1,0,1",$3,1,$5,$4
  -endif -v +

#@cli karo_doc : '_size>0','_shape=0|1|2' (square|octagonal|circular),
#@cli : '_channel=0..22' (All|RGBA|RGB|Luminance|Blue/red chrominances|Blue chrominance|Red chrominance|Lightness
#@cli : |ab-components|a-component|b-component|Hue|Saturation|Value|Key|Green chrominance|ch-components|c-component|h-component|Red|Green|Blue|Alpha)
#@cli  : compute difference of open+close and original (only 2d)
karo_doc :
  -e "Compute difference of open/close and original image$?, with window size $1 (only 2d)." -v -
  -skip ${1=5},${2=1},${3=0}
  -repeat $! -l[$<]
    --karo_open[0] $1,$2,0,0,$3 --karo_close[0] $1,$2,0,0,$3
    -+[-2,-1] -/[-1] 2 --
  -endl -done -v +


#@cli karo_doo : _size1>0,_size2>0,_type=0..3 (ero/dil/open/close),_shape=0|1|2 (sqaure|octagon|circle),'_scale=0|1',
#@cli : '_channel=0..22' (All|RGBA|RGB|Luminance|Blue/red chrominances|Blue chrominance|Red chrominance|Lightness
#@cli : |ab-components|a-component|b-component|Hue|Saturation|Value|Key|Green chrominance|ch-components|c-component|h-component|Red|Green|Blue|Alpha)
#@cli : Compute difference of mm op on selected images (only 2d).
karo_doo : -skip ${1=5},${2=7},${3=2},${4=1},${5=0},${6=0}
  -e[^-1] "Compute difference of mm op on image$?, with sizes $1 and $2 (only 2d)." -v -
  -repeat $! -l[$<]
    --fx_morpho[-1] $3,$1,0,$4,$6,0
     -fx_morpho[-2] $3,$2,0,$4,$6,0
    -if {{${3}&1}==0} -rv[-2,-1] -endif
    --[-2,-1]
    -if {$5==1} -n[-1] 0,255 -endif
  -endl -done -v +

#@cli karo_label_sort :
#@cli : Rearrange a label image (the selected image) according to the region size
#@cli : $ 400,400 -rand 0,1 -b 3 -ge 50% -label 0,1 -karo_label_sort -threshold 50%
#@cli : Author : <i>KaRo and David Tsch.</i>. Latest update : <i>2013/04/07</i>.
karo_label_sort :
-e[^-1] "Sort labelled image [1] by region size."
-v - -repeat $! -l[$>]
  nb={1+iM} mn={im} --histogram[-1] $nb,0,{$nb-1}
  100%,1,1,1,x -a[-2,-1] y -sort[-1] -,x -rows[-1] 1
  100%,1,1,1,x -a[-2,-1] y -sort[-1] +,x -rows[-1] 1
  -map[-2] [-1] -rm[-1]
-endl -done -v +

#@cli karo_label : tolerance>=0,is_high_connectivity={ 0 | 1 },sort={ 0 | 1} : (+)
#@cli : Label connected components in selected images and possibly sort by region size.
#@cli : Default values: 'tolerance=0', 'is_high_connectivity=0' and 'sort=0'.
#@cli : $ image.jpg -luminance -threshold 60% -label 0 -normalize 0,255 -map 0
#@cli : $ 400,400 -set 1,50%,50% -distance 1 -mod 16 -threshold 8 -karo_label 0,,1 -mod 255 -map 2
#@cli : Author : <i>KaRo and David Tsch.</i>. Latest update : <i>2013/04/07</i>.
karo_label : -check "$1>=0" -skip ${2=0} -skip ${3=0}
  -e[^-1] "Label connected components on image [1], with tolerance $1, "${-arg\ 1+!$2,high,low}" connectivity and "${-arg\ 1+!$3,sorted,unsorted}
  -v - -repeat $! -l[$>]
    -label[-1] $1,$2
	-if {$3}
      nb={1+iM} --histogram[-1] $nb,0,{iM}
      100%,1,1,1,x -a[-2,-1] y -sort[-1] -,x -rows[-1] 1
      100%,1,1,1,x -a[-2,-1] y -sort[-1] +,x -rows[-1] 1
      -map[-2] [-1] -rm[-1]
	-endif
  -endl -done -v +

#@cli karo_threshold : _method={ triangle | yen | otsu | _otsu | bgt | intera | rats | fixnnn},_delclass>0,_smooth>0
#@cli : Calculate threshold (from ImageJ) in range [0,255], evtl. normalization necessary.
#@cli : For each method user function _karo_"_method" is called!
#@cli : If _delclass > 0 delete cluster _delclass-1. blur_x histogram with amplitude _smooth.
#@cli : If _smooth > 0 blur_x histogram with amplitude _smooth.
#@cli : No histogram processing for otsu, rats and intera!
#@cli : $ image.jpg -luminance -karo_threshold[-1] ,
karo_threshold : -skip ${1="triangle"} -skip ${2=0} -skip ${3=0}
  -e[^-1] "Calculate "$1" thresholded mask from images$? with histogram in range [0,255] and binsize 1."
  -v -
  -if ${-strcontains\ $1,fix} meth=fix
  -else meth=$1 -endif
  -if {['$meth']=='otsu'} -otsu 256
  -elif {['$meth']=='rats'} -karo_rats ,
  -elif {['$meth']=='intera'} -threshold
  -else -repeat $!
    -l[$>]
	  -if {['$meth']=='fix'} -_karo_fix ,,$1
	  -else --histogram[-1] 256,0,255
	    -if {$2>0} -=[-1] 0,{$2-1} -endif
	    -if {$3!=0} tot={is} -/[-1] $tot -blur_x[-1] $3 -/[-1] {is} -*[-1] $tot -round[-1] -endif
	    --_karo_$meth[-1] 0,1 -rm[-1]
	  -endif
	  th=${}
	  -threshold[0] $th
# Concatenate results for image list
      -if {$>==0} sres=$th -else sres=$sres,$th -endif
    -endl -done -u $sres -endif
  -v +

#@cli _karo_fix : 0,1,fixnnn
#@cli : fix threshold nnn returned in status
_karo_fix :
  -skip "${1=0} ${2=1} ${3=fix005}"
  -u ${-strreplace\ $3,fix,\ }

#@cli _karo_triangle : _minval,_bins
#@cli : Calculate triangle threshold (from ImageJ auto thresholder)
#@cli : tested only with 256 classes from 0 to 255
#@cli : $ image.jpg -luminance --histogram 256,0,255 -_karo_triangle[-1] , --threshold[0] ${}
_karo_triangle : -skip "${1=0} ${2=1}"
  -e[^-1] "Calculate triangle threshold from 1d histogram$? in range ["$1","{$1+(w-1)*$2}"]."
  -v -
  -repeat $!
    -l[$>]
      ac=${-autocrop_coords[-1]} wd={w}
	  min={${-arg\ 1,$ac}} -if {$min==1&&{@0}!=0} min=0 -endif # corr autocrop_coords
	  -if {$min>0} min={$min-1} -endif
	  min2={${-arg\ 4,$ac}} -if {$min2<{$wd-1}} min2={$min2+1} -endif
	  dmax={iM} max={xM}
	  -if {($max-$min)<($min2-$max)}
	    inverted=1 -mirror[0] x min={$wd-1-$min2} max={$wd-1-$max}
	  -else inverted=0 -endif
	  -if {$min==$max} split=$min -else
	    nx={i($max)} ny={$min-$max}
	    d={sqrt($nx*$nx+$ny*$ny)}
	    nx={$nx/$d} ny={$ny/$d}
	    d={$nx*$min+$ny*i($min)}
	    --f[-1] x -*[-1] $nx -*[-2] $ny -+[-1,-2] --[-1] $d
	    -crop[-1] {$min+1},$max
	    -if {$inverted} split={$wd-(xM+$min)} -else split={xM+$min+1} -endif
	  -endif
	  res={$1+$split*$2}
# Concatenate results for image list
      -if {$>==0} sres=$res -else sres=$sres\,$res -endif
    -rm[0] -endl
  -done -u $sres -v +

# #@cli _karo_yen : _minval,_bins
# #@cli : Calculate yen threshold (from ImageJ auto thresholder)
# #@cli : tested only with 256 classes from 0 to 255
# _karo_yen :  -skip "${1=0} ${2=1}" -v -
#   -repeat $! -l[$>]
#     total={0,is}
#     -*[0] {1/$total}
#     --cumulate[0]
#     --sqr[0] -cumulate[-1]
#     --mirror[0] x -sqr[-1] -cumulate[-1] -mirror[-1] x
# 	--*[-1,-2]
# 	--gt[-1] 0 -c[-2] 0.000001%,100 -log[-2] -*[-2,-1] -*[-1] -1
# 	--*[1] -1 -+[-1] 1 -*[1,-1] --gt[1] 0 -c[1] 0.000001%,100 -log[1] -*[1,-1] -*[1] 2
# 	-+[-1,1] -k[1]
# 	res={${-karo_nth_max\ 2,1}*$2+$1}
# 	-rm[0]
# 	-if {$>==0} -u $res -else -u ${},$res -endif
#   -endl -done -v +
#@cli _karo_yen : _minval,_bins
#@cli : Calculate yen threshold (from ImageJ auto thresholder)
_karo_yen :  -skip "${1=0} ${2=1}" -v -
  -repeat $! -l[$>]
    -if $> r_yen=${} -endif
    -autocrop_coords. 0 range=${} mn=${-arg\ 1,$range} mx=${-arg\ 4,$range}
    -/. {is}
    --cumulate.
    --sqr.. -cumulate.
    --mirror... x -sqr. -cumulate. -mirror[-1,-4] x
    -*[-1,-2] -log. -replace_inf. {iM} -*. -1
    --*.. -1.0 -+. 1.0 -*[-1,-3] -log.. -replace_inf.. {iM} -*.. 2.0 
    -+[-1,-2] -k.
    -if {$mn>0} -repeat $mn -=. 0,$> -done -endif
    -if {$mx<(w-1)} -repeat {w-$mx} -=. 0,{$mx+$>} -done -endif
    res={xM*$2+$1}
    -rm.
    -if $> -u $r_yen,$res -else -u $res -endif
  -endl -done -v +

# #@cli _karo__otsu : _minval,_bins
# #@cli : Calculate otsu threshold (from gmic -otsu)
# #@cli : tested only with 256 classes from 0 to 255
# _karo__otsu : -skip "${1=0} ${2=1}" -v -
#   -repeat $! -l[$>]
#     im=$1 iM={$im+(w+1)*$2} total={is}
#     --*[-1] 'x' sum={is} -rm[-1]
#     sumB=0 wB=0 wF=0 varMax=0 threshold=0
#     -repeat {w}
#       wB={$wB+{@$>}}
#       -if {$wB==0} -continue -endif
#       wF={$total-$wB}
#       -if {$wF==0} -break -endif
#       sumB={$sumB+$>*{@$>}}
#       mB={$sumB/$wB}
#       mF={($sum-$sumB)/$wF}
#       varBetween={$wB*$wF*($mB-$mF)^2}
#       -if {$varBetween>$varMax} varMax=$varBetween threshold=$> -endif
#     -done -rm[-1]
# 	res={$threshold*$2+$1} -u $res
#   -endl -done -v +
#@cli _karo__otsu : _minval(0) _bins(1)
#@cli : Calculate otsu threshold from a histogram
#@cli : with class o = _minval and bin size = _bins
#@cli : Threshold is stored in status
#@cli : $ image.jpg -to_gray --histogram 256,0,255 -_karo__otsu , -threshold ${}
_karo__otsu : -skip "${1=0} ${2=1}" -v -
-l.
-/. {is}	#p
--cumulate. x	#q_L
--+. -1. -negate.	#q_h
--f. "x" --*[0] . -rm.. -cumulate. x
--+. {-iM} -negate.
-/.. [-4]	#miu_L
-/. [-3]	#miu_H
--[-2,-1] -sqr.
-*[-1--3] -replace_nan. 0.0
-u {xM*$2+$1}
-rm
-endl
-v +

#cli _karo_bgt : _minval,_bins
#cli : Autothreshold using SD from whole image starting from the mode of the histogram (image range 0,255)
_karo_bgt: -skip "${1=0} ${2=1}" -v - fact=1.5
  -l[-1]
    hft=${-hist_feature\ -2} mn=${-arg\ 5,$hft} mx=${-arg\ 6,$hft} sd=${-arg\ 4,$hft} md=${-arg\ 1,$hft}
    -if {($mx-$md)<=($md-$mn)} res={$md-$fact*$sd}
    -else res={$md+$fact*$sd} -endif
	-u {$res*$2+$1} -rm
  -endl -v +

#@cli karo_rats : _pow(0.5)
#@cli : Robust automatic threshold selection (Kittler et al. 1985)
#@cli : Input image (not histogram similar -otsu!)
karo_rats :
  -check ${1=0.5}>0
  -e[^-1] "Calculate rats from image$? with power "$1"." -v -
  -repeat $! -l[$>]
    --gradient_norm. -pow. $1 gr={is} -*[-1] [-2] gri={is} res={$gri/$gr} -rm.
    -threshold. $res
# Concatenate results for image list
    -if {$>==0} sres=$res -else sres=$sres\,$res -endif
    -endl -done
  -u $sres -v +

#@cli _kr_histogram : _nb_levels>0[%],_value0[%],_value1[%]
#@cli : Computes the histogram and returns in status 
#@cli : the value of first class and the bin size
#@cli : $ -sp barbara -/. 2 -+. 32 -_kr_histogram , -e ${}
_kr_histogram : -skip "${1=256} ${2=0%} ${3=100%}" -v -
-if ${-is_percent\ $2} mn={im+(iM-im)*$2} -else mn=$2 -endif 
-if ${-is_percent\ $3} mx={im+(iM-im)*$3} -else mx=$3 -endif 
-u {$mn},{($mx-$mn)/($1-1)} 
-histogram. ${1-3} -v +

#@cli _kr_histogram8 : _nb_levels>0[%],_value0[%],_value1[%]
#@cli : same as _kr_histogram, stil defaults to byte data (256,0,255)
#@cli : $ -sp dog -_kr_histogram8 , -e ${}
_kr_histogram8 : -skip "${1=256} ${2=0} ${3=255}" -v - -_kr_histogram. ${1-3} -v +

#@cli hist_percentile : _nth[%],_zero,_min0,_stepw
#@cli : Estimation of _nth percentiles (lower & upper) from histogram and returning value(s) in status (${})
#@cli : _zero Class 0 is zeroed if !=0
#@cli : _min0 value of class 0
#@cli : _stepw value of class width (bin size)
#@cli : Def. val.: 'nth=25%', '_zero=0', '_min0=0', '_stepw=1'
#@cli : $ image.jpg -luminance --dh ,,256,0,255 -histogram.. 256,0,255 -hist_percentile.. , -rm.. t=${} -text $t,40,5,23,1,128
hist_percentile :
  -check "${1=25%}>0"
  -skip ${2=0},${3=0},${4=1}
  -e[^-1] "Calculate $1 percentile from 1d histogram$?."
  -v - -repeat $!
    -l[$>]
      -if {h>1||d>1||s>1} -v + -e[^-1] "Image "$>" seemingly not 1d!" -v - -continue -endif
  # Delete class zero
      -if {$2!=0} -set[-1] 0,0 -endif
  # Calculate features
      m0={is}
	  N={if(${"-is_percent $1"},$m0*$1,$1)}
	  #-echo_stdout $m0,$N
  # Percentile
      --cumulate[-1]
      --ge[-1] $N mn={${-arg\ 1,{[xM,yM,zM,cM]}}*$4+$3} -rm[-1]
      --ge[-1] {iM-$N} mx={${-arg\ 1,{[xM,yM,zM,cM]}}*$4+$3} -rm[-1,-2]
  # Prepare result for one image
      res=$mn\,$mx
  # Concatenate results for image list
      -if {$>==0} sres=$res -else sres=$sres\,$res -endif
    -endl
  -done -u $sres -v +

#@cli hist_feature : _moment,_nth,_zero,_min0,_stepw
#@cli : Estimation of features mode,sum,mean,SD,min,max,median from histogram
#@cli : _moment=-2/mode,m0,m1,m2,min,max,med -1/mode 0/sum 1/mean 2/SD 3/min 4/max 5/median
#@cli : _nth extreme value
#@cli : _zero Class 0 is zeroed if !=0
#@cli : _min0 value of class 0
#@cli : _stepw value of class width (bin size)
#@cli : Def. val.: '_moment=-2', 'nth=1', '_zero=0', '_min0=0', '_stepw=1'
#@cli : Updated 140314 (smoothing replaced by nth selection)
#@cli : $ image.jpg -luminance --histogram 256,0,255 -dh.. ,,256,0,255 -hist_feature , -repeat 7 t={_arg($>+1${})} -text $t,40,{$>*25+5},23,1,128 -done -rm.
hist_feature :
  -check "${1=-2}>=-2&&$1<=5&&isint($1)&&isint(${2=1})&&$2>0"
  -skip ${3=0},${4=0},${5=1}
  -e[^-1] "Calculate md,m0,m1,m2,$2th-min,$2th-max,med from 1d histogram$?."
  -v -
  -repeat $!
    -l[$>]
      -if {h>1||d>1||s>1} -v + -e[^-1] "Image "$>" seemingly not 1d!" -v - -continue -endif
  # Delete class zero
      -if {$3!=0} -set[-1] 0,0 -endif
  # Calculate features
      md={xM*$5+$4}
      m0={is}
      --*[-1] 'x*$5+$4' m1={is/$m0} -rm[-1]
      --*[-1] '(x*$5+$4)^2' m2={sqrt(is/$m0-$m1^2)} -rm[-1]
  # Median, min, max
	  --cumulate[-1]
	  --ge[-1] $2 mn={${-arg\ 1,{[xM,yM,zM,cM]}}*$5+$4} -rm[-1]
	  -if {$2>1} --ge[-1] {iM-$2} mx=${-arg\ 1,{[xM,yM,zM,cM]}} -rm[-1] -else  mx=${-arg\ 1,{[xM,yM,zM,cM]}} -endif
	  mx={$mx*$5+$4}
	  --ge[-1] {iM/2} med1=${-arg\ 1,{[xM,yM,zM,cM]}} -rm[-1]
	  --le[-1] {iM/2} med2=${-arg\ 1,{[xm,ym,zm,cm]}} -rm[-1,-2]
	  med={($med1+$med2)/2*$5+$4}
  # Prepare result for one image
      res=$md\,$m0\,$m1\,$m2\,$mn\,$mx\,$med
      -if {$1>-2} res=${-arg\ {$1+2},$res} -endif
  # Concatenate results for image list
     -if {$>==0} sres=$res -else sres=$sres\,$res -endif
    -endl
  -done -u $sres -v +

#@cli karo_nth_max : _n(1),_ind(=0)
#@cli : Return in the status the n-th max or the index of the n-th max of an image
#@cli : Possibility to fetch the index instead of the value (_ind=1)
karo_nth_max : -check "isint(${1=1}) && $1>0" -skip ${2=0}
  -e[^-1] "Return in the status the $1-th max of image$?."
  -v - -repeat $! -l[$>]
     [0] -repeat {$1-1} -set[-1] {im},{[xM,yM,zM,cM]} -done
     -if $2 mx={xM} -else mx={iM} -endif -rm[-1]
     -if {$>==0} -u $mx -else -u ${},$mx -endif
  -endl -done -v +

#@cli karo_nth_min : _n(1),_ind(=0)
#@cli : Return in the status the n-th min of an image
#@cli : Possibility to fetch the index instead of the value (_ind=1)
karo_nth_min : -check "isint(${1=1}) && $1>0" -skip ${2=0}
  -e[^-1] "Return in the status the $1-th min of image$?."
  -v - -repeat $! -l[$>]
     [0] -repeat {$1-1} -set[-1] {iM},{[xm,ym,zm,cm]} -done
     -if $2 mn={xm} -else mn={-im} -endif -rm[-1]
     -if {$>==0} -u $mn -else -u ${},$mn -endif
  -endl -done -v +

#@cli karo_xcimg : programname ,parameterlist :
#@cli : Call external CImg Example 'programname'
#@cli : which has to be found in PATH by external call by
#@cli : 'programname' image_in 'parameterlist' image_out
#@cli : with writing image_in and reading after execution image_out
karo_xcimg :
  filename=${-file_rand}
  -if {!${-is_windows}}
    -x "which "$1" >/dev/null 2>&1"
    -if ${} -v + -e "executable \"$1\" not found in PATH, status = "${}"!! Returning!!\n" -v -
    {w},{h} -fx_logo "exec Error !!" -return -endif
  -endif
  -o ${filename}.cimg
  -x "$1 -i "${filename}".cimg $2 -o "${filename}".cimg"
  -if ${} -v + -e "Status is "${}"." -v - {w},{h} -fx_logo "exec Error !!"
  -else -i ${filename}.cimg -endif
  -file_rm ${filename}.cimg

#@cli karo_li2st : p1,p2,...,pn
#@cli : Convert comma separated list to space separated string.
karo_li2st :
  -v - -u "" -if {$#>=1} ({"'${1--1}'"}) -replace[-1] {','},{"' '"} -u {t} -rm[-1] -endif -v +

#@cli karo_skeleton : _p1,..,p2n : (-median,0,-inv,0|1,-t,-0.3,-curve,0|1,-corr,0|1,-dlt,1)
#@cli : Execute use_skeleton (CImg demo) external.
karo_skeleton : -v - -if {$#>0} -karo_li2st ${1--1} p=${} -else p="" -endif -v +
-e "Compute use_skeleton exec with options "$p" on$?" -v -
-repeat $! -l[$>]
  s={s} -if {$s>1} -s[-1] c -endif
  -repeat $! -l[$>] -karo_xcimg use_skeleton,${p}" -visu 0" -mv[-1] 0 -k[0] -endl -done
  -if {$s>1} -a[-$s--1] c -endif
-endl -done -v +

#@cli karo_nlmeans : _p1,..,pn=-zoom,1,-ng,0|1,-nu,0|1,-ns,0|1,-p,1,-lambda,-1,-sigma,-1,-alpha,3,-sampling,1
#@cli : Execute use_nlmeans  (CImg demo) external. (see also q-nlmeans p=4,lambda=4,sigma=10)
karo_nlmeans : -v - -if {$#>0} -karo_li2st ${1--1} p=${} -else p="" -endif -v +
-e "Compute use_nlmeans exec with options "${p}" on$?" -v -
-repeat $! -l[$>]
  s={s} -if {$s>1} -s[-1] c -endif
  -repeat $! -l[$>] -karo_xcimg use_nlmeans,${p}" -visu 0" -mv[-1] 0 -k[0] -endl -done
  -if {$s>1} -a[-$s--1] c -endif
-endl -done -v +

#@cli karo_VST : _inverse(=0)
#@cli : Variance Stabilizing Transformation
#@cli : following http://hal.archives-ouvertes.fr/docs/00/51/08/66/PDF/Burst_Hal.pdf
#@cli : $ image.jpg -e ${-std_noise} -karo_VST 0 -e ${-std_noise} --karo_VST 1
karo_VST :
  -v - -skip ${1=0} -if $1 inv=" (inverse)." -else inv="." -endif -v +
  -e[^-1] "Variance Stabilizing Transformation"$inv -v -
  -repeat $! -l[$>]
    -if $1 -/[0] 2 -sqr[0] --[0] {3/8} -else -+[0] {3/8} -sqrt[0] -*[0] 2 -endif
  -endl -done -v +

#@cli pearson_correlation
#@cli : Compute pearson-correlation using two-by-two selected images.
#@cli : $ image.jpg --shift -30,-20 -pearson_correlation -e ${}
pearson_correlation :
  -e[^-1] "Compute pearson-correlation using two-by-two image$?."
  -v - -repeat {int($!/2)} -l[{$>*2},{$>*2+1}]
     ---[0] {0,ia} ---[1] {1,ia} --*[2,3]
	 -sqr[2,3] #-*[2,3]
	 r={ia/sqrt({2,ia}*{3,ia})}
	 -if {$>==0} -u $r -else -u ${},$r -endif
	 -rm[2-4]
  -endl -done -v +

#@cli karo_extinction : _whitevalue[%]
#@cli : Convert (integer) transmission image into extinction with _whitevalue.
#@cli : Def. val.: '_whitevalue=100%'
karo_extinction : -check "${1=100%}>0"
  -e[^-1] "Convert transmission image$? into extinction with white value $1." -v -
  -repeat $! -l[$>]
    -if ${-is_percent\ $1} WW={iM*$1} -else WW=$1 -endif
    -c[-1] 1,{iM} -/[-1] $WW -log10[-1] -*[-1] -1
  -endl -done -v +

#@cli karo_rndbit0 :
#@cli : Randomize in [0..255] image$? bit level 0."
karo_rndbit0 :
  -e[^-1] "Randomize in [0..255] image$? bit level 0." -v -
  -repeat $! -l[$>] -and 254 --rand 0,1 -round[-1] -or -endl -done -v +

#@cli karo_dtpread : filename,_bit0
#@cli : Read dtp image file format
#@cli :   (512 byte header, col[22-24] x row[25-27] byte image)
#@cli : with _bit0 != 0 bit level 1 is extracted as binary mask
#@cli :   and bit level 1 in the gray image is randomized with -karo_rndbit0
#@cli : Ex.: -karo_dtpread Images/Beispiele/tra005.cel,1
karo_dtpread : -check $1 -check "${2=0}>=0"
  -e[^-1] "Read dtp image file from $1." -v -
  -i raw:$1,uchar
  ({@22-24}) x={t} -rm[-1]
  ({@25-27}) y={t} -rm[-1]
  ({@0-79}) _dtph={t} -rm[-1]
  -crop[-1] 0,512,0,{h}
  -resize[-1] $x,$y,1,1,-1
  -if $2
    --and[-1] 1 -karo_rndbit0[-2]
  -endif
  -v +

#@cli _kr_ch2ch : number
#@cli : return alpha channel mode from number in status
#@cli : Ex. -v - -repeat 51 -_kr_ch2ach $> -v + -echo_stdout $>,${} -done
_kr_ch2ch :
-if {isval("$1")} -if {isint("$1")}
-u ${-arg\ 1+$1,all,rgba,rgba_r,rgba_g,rgba_b,rgba_a,rgb,rgb_r,rgb_g,rgb_b,\
lrgb,lrgb_r,lrgb_g,lrgb_b,ycbcr,ycbcr_y,ycbcr_cbcr,ycbcr_cb,ycbcr_cr,ycbcr_cg,\
lab,lab_l,lab_ab,lab_a,lab_b,lch,lch_l,lch_ch,lch_c,lch_h,\
hsv,hsv_h,hsv_s,hsv_v,hsi,hsi_h,hsi_s,hsi_i,hsl,hsl_h,hsl_s,hsl_l,\
cmy,cmy_c,cmy_m,cmy_y,cmyk,cmyk_c,cmyk_m,cmyk_y,cmyk_k}
-else -u "$1" -endif -else -u "$1" -endif

#@gui CImg Skeleton : fx_karo_cimg_skel, fx_karo_cimg_skel_preview(0)
#@gui : Auto-threshold = bool(1)
#@gui : Threshold \% = float(50,0,100)
#@gui : Size Median = int(0,0,15)
#@gui : Invert = bool(false)
#@gui : Threshold on flux = float(-0.3,-5,5)
#@gui : Medial curve = bool(false)
#@gui : Torsello correction =bool(false)
#@gui : Discrete step = int(1,1,15)
#@gui : sep = separator(), Preview type = choice(1,"Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gui : sep = separator(), note = note(Skeleton using CImg example plugin use_skeleton.)
#@gui : note = note{"CImg Skeleton: <i>use_skeleton</i> in search PATH"}
#@gui : sep = separator(), note = note("<small>Author : <i>KaRo</i>. Latest update : <i>2012/10/26</i>.</small>")
#@cli fx_karo_cimg_skel : auto_thresh(1),thresh(50\%),median(0),invert(0),thresh_flux(-0.3),medial_curve(0),Torsello corr(0),steps(1)
#@cli : Execute use_skeleton (CImg demo) external.
fx_karo_cimg_skel :
  -skip "${1=1}","${2=50}","${3=0}","${4=0}","${5=-0.3}","${6=0}","${7=0}","${8=1}"
  -if $1 -otsu 256 -else -threshold ${2}% -endif
  -karo_skeleton -median,$3,-inv,$4,-t,$5,-curve,$6,-corr,$7,-dlt,$8 -n 0,255

fx_karo_cimg_skel_preview :
  -gui_split_preview "-fx_karo_cimg_skel ${1-8}",$9

#@gui CImg nlmeans : fx_karo_cimg_nlmeans, fx_karo_cimg_nlmeans_preview(0)
#@gui : Add Gauss noise = float(0.0,0.0,30.0)
#@gui : Add uniform noise = float(0.0,0.0,30.0)
#@gui : Add Salt &amp; Pepper noise = float(0.0,0.0,30.0)
#@gui : Half size of patch = int(1,1,15)
#@gui : Band width lambda = float(-1,-1,25)
#@gui : Noise SD sigma = float(-1,-1,25)
#@gui : Neighborhood size alpha = int(3,1,15)
#@gui : Sampling step size = int(2,1,5)
#@gui : sep = separator(), Preview type = choice(1,"Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gui : sep = separator(), note = note(Smoothing using CImg example plugin use_nlmeans.)
#@gui : note = note{"CImg nlmeans: <i>use_nlmeans</i> in search PATH"}
#@gui : sep = separator(), note = note("<small>Author : <i>KaRo</i>. Latest update : <i>2012/10/26</i>.</small>")
#@cli fx_karo_cimg_nlmeans : add_Gauss_noise(0),add_uniform_noise(0),add_salt_pepper(0),patch_size(0),lambda(-1),noise_sd(-1),alpha(3),steps(2)
#@cli : Execute use_nlmeans (CImg demo) external.
fx_karo_cimg_nlmeans :
  -skip "${1=0}","${2=0}","${3=0}","${4=1}","${5=-1}","${6=-1}","${7=3}","${8=2}"
  -karo_nlmeans -ng,$1,-nu,$2,-ns,$3,-p,$4,-lambda,$5,-sigma,$6,-alpha,$7,-sampling,$8

fx_karo_cimg_nlmeans_preview :
  -gui_split_preview "-fx_karo_cimg_nlmeans ${1-8}",$9

#@gui mM Differences : fx_karo_mm_diff, fx_karo_mm_diff_preview(0)
#@gui : Size = int(5,1,25)
#@gui : Size2 = int(7,1,25)
#@gui : Operation = choice(2,"Erosion","Dilation","Open","Close")
#@gui : Shape = choice(1,"Square","Octagon","Circle")
#all,rgba,rgba_r,rgba_g,rgba_b,rgba_a,rgb,rgb_r,rgb_g,rgb_b,\
#lrgb,lrgb_r,lrgb_g,lrgb_b,ycbcr,ycbcr_y,ycbcr_cbcr,ycbcr_cb,ycbcr_cr,ycbcr_cg,\
#lab,lab_l,lab_ab,lab_a,lab_b,lch,lch_l,lch_ch,lch_c,lch_h,\
#hsv,hsv_h,hsv_s,hsv_v,hsi,hsi_h,hsi_s,hsi_i,hsl,hsl_h,hsl_s,hsl_l,\
#cmy,cmy_c,cmy_m,cmy_y,cmyk,cmyk_c,cmyk_m,cmyk_y,cmyk_k
#@gui : Channel(s) = choice(0,"all","rgba","rgba_r","rgba_g","rgba_b","rgba_a","rgb","rgb_r","rgb_g","rgb_b","lrgb","lrgb_r","lrgb_g","lrgb_b","ycbcr","ycbcr_y","ycbcr_cbcr","ycbcr_cb","ycbcr_cr","ycbcr_cg","lab","lab_l","lab_ab","lab_a","lab_b","lch","lch_l","lch_ch","lch_c","lch_h","hsv","hsv_h","hsv_s","hsv_v","hsi","hsi_h","hsi_s","hsi_i","hsl","hsl_h","hsl_s","hsl_l","cmy","cmy_c","cmy_m","cmy_y","cmyk","cmyk_c","cmyk_m","cmyk_y","cmyk_k")
#@gui : Scale = bool(true)
#@gui : sep = separator(), Preview type = choice(1,"Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
##@gui : Best with odd sizes!
#@gui : sep = separator(), note = note("Arithmetical difference of a morphological operation of <i>size</i> and <i>size2</i>.")
#@gui : sep = separator(), note = note("<small>Author : <i>KaRo</i>. Latest update : <i>2012/10/26</i>.</small>")
#@cli fx_karo_mm_diff : Compute difference of mm op on selected images.
#@cli : Size = int(5,1,25)
#@cli : Size2 = int(7,1,25)
#@cli : Operation = choice(2,"Erosion","Dilation","Open","Close")
#@cli : Shape = choice(1,"Square","Octagon","Circle")
#@cli : Channel(s) = choice(0,"All","RGBA","RGB","Luminance","Blue/red chrominances","Blue chrominance","Red chrominance","Lightness","ab-components","a-component","b-component","Hue","Saturation","Value","Key","Green chrominance","ch-components","c-component","h-component","Red","Green","Blue","Alpha")
#@cli : Scale = bool(true)
#@cli : sep = separator(), Preview type = choice(1,"Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
##@cli : Best with odd sizes!
#@cli : sep = separator(), note = note("Arithmetical difference of a morphological operation of <i>size</i> and <i>size2</i>.")
#@cli : sep = separator(), note = note("<small>Author : <i>KaRo</i>. Latest update : <i>2013/07/09</i>.</small>")
fx_karo_mm_diff :
  -skip "${1=5}","${2=7}","${3=2}","${4=1}","${5=0}","${6=1}"
  -if {$2<=$1} s2={$1+2} -else s2=$2 -endif
  -karo_doo $1,${s2},$3,$4,$6,$5

fx_karo_mm_diff_preview :
  -gui_split_preview "-fx_karo_mm_diff ${1-6}",$7

#@gui oC Differences : fx_karo_oc_diff, fx_karo_oc_diff_preview
#@gui : Size = int(5,2,25)
#@gui : Shape = choice(1,"Square","Octagon","Circle")
#@gui : Channel(s) = choice(0,"All","RGBA","RGB","Luminance","Blue/red chrominances","Blue chrominance","Red chrominance","Lightness","ab-components","a-component","b-component","Hue","Saturation","Value","Key","Green chrominance","ch-components","c-component","h-component","Red","Green","Blue","Alpha")
#@gui : Scale =bool(true)
#@gui : sep = separator(), Preview type = choice(1,"Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
##@gui : Best with odd sizes!
#@gui : sep = separator(), note = note("Difference of mean of morphological opening and closing with original.")
#@gui : sep = separator(), note = note("<small>Author : <i>KaRo</i>.           Latest update : <i>2013/07/04</i>.</small>")
fx_karo_oc_diff :
  -apply_channels "-karo_doc $1,$2,0",$3,$4

fx_karo_oc_diff_preview :
  -gui_split_preview "-fx_karo_oc_diff ${1-4}",$5


#@cli fx_pink : Pink example, _operator(=11), _connect(=0), _smooth(=0), _param(=5), _channel(=0)
#@cli : _operator = 0..19 ("wshedtopo","wshedtopo inv","minima","maxima","heightminima","heightmaxima","grayskel","htkern","htkernu","lvkern","lvkernu","asf","asflin","asfr","asft","asftmed","asftndg","dilatballnum","erosballnum","lintophat")
#@cli : _connect = 0..1 ("Four/x","Eight/y")
#@cli : _smooth = 0..
#@cli : _param = 0..25
#@cli : _channel = 0..22 ("All","RGBA","RGB","Luminance","Blue/red chrominances","Blue chrominance","Red chrominance","Lightness","ab-components","a-component","b-component","Hue","Saturation","Value","Key","Green chrominance","ch-components","c-component","h-component","Red","Green","Blue","Alpha")
#@cli : $ image.jpg --fx_pink , ---
#@cli : $ image.jpg --fx_pink[-1] 12,1,0.582524,10,0,0 --fx_pink[-2] 12,0,0.582524,10,0,0 -+[-1,-2] # asflin in x and y
#@gui Pink operator : fx_pink, fx_pink_preview(1)
#@gui : Pink operator = choice("wshedtopo","wshedtopo inv","minima","maxima","heightminima","heightmaxima","grayskel","htkern","htkernu","lvkern","lvkernu","asf","asflin","asfr","asft","asftmed","asftndg","dilatballnum","erosballnum","lintophat")
#@gui : Connectivity / Dir = choice("Four/x","Eight/y")
#@gui : Smoothness = float(0,0,5)
#@gui : Height/Rep = int(5,0,25)
#@gui : Channel(s) = choice(0,"All","RGBA","RGB","Luminance","Blue/red chrominances","Blue chrominance","Red chrominance","Lightness","ab-components","a-component","b-component","Hue","Saturation","Value","Key","Green chrominance","ch-components","c-component","h-component","Red","Green","Blue","Alpha")
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right")
#@gui : note = link("http://pinkhq.com/")
fx_pink :
  -skip ${1=11},${2=0},${3=0},${4=5},${5=0} -v -
  -if   {$1==0}  -apply_channels "-b $3 -pink heightminima,{($2+1)*4},$4 -pink wshedtopo,{($2+1)*4}",$5,0
  -elif {$1==1}  -apply_channels "-b $3 -pink heightmaxima,{($2+1)*4},$4 -pink wshedtopo,{($2+1)*4},i",$5,0
  -elif {$1==2}  -apply_channels "-b $3 -pink minima,{($2+1)*4}",$5,0
  -elif {$1==3}  -apply_channels "-b $3 -pink maxima,{($2+1)*4}",$5,0
  -elif {$1==4}  -apply_channels "-b $3 -pink heightminima,{($2+1)*4},$4",$5,0
  -elif {$1==5}  -apply_channels "-b $3 -pink heightmaxima,{($2+1)*4},$4",$5,0
  -elif {$1==6}  -apply_channels "-b $3 -pink grayskel,null,4,$4",$5,0
  -elif {$1==7}  -apply_channels "-b $3 -pink htkern,null,{($2+1)*4}",$5,0
  -elif {$1==8}  -apply_channels "-b $3 -pink htkernu,null,{($2+1)*4}",$5,0
  -elif {$1==9}  -apply_channels "-b $3 -pink lvkern,null,{($2+1)*4}",$5,0
  -elif {$1==10} -apply_channels "-b $3 -pink lvkernu,null,{($2+1)*4}",$5,0
  -elif {$1==11} -apply_channels "-b $3 -pink asf,$4",$5,0
  -elif {$1==12}
     -if {$2==0} -apply_channels "-b $3 [0]x2 -a z -pink asflin,x,$4 -s z -k[-1]",$5,0
           -else -apply_channels "-b $3 [0]x2 -a z -pink asflin,y,$4 -s z -k[-1]",$5,0 -endif
  -elif {$1==13} -apply_channels "-b $3 -pink asfr,$4",$5,0
  -elif {$1==14} -apply_channels "-b $3 -pink asft,null,null,{($2+1)*4},$4",$5,0
  -elif {$1==15} -apply_channels "-b $3 -pink asftmed,{($2+1)*4},$4",$5,0
  -elif {$1==16} -apply_channels "-b $3 -pink asftndg,null,null,{($2+1)*4},$4",$5,0
  -elif {$1==17} -apply_channels "-b $3 -pink dilatballnum,$4",$5,0
  -elif {$1==18} -apply_channels "-b $3 -pink erosballnum,$4",$5,0
  -elif {$1==19} -apply_channels "-b $3 -pink lintophat,$4",$5,0
  -else          -apply_channels "-b $3 -pink heightminima,{($2+1)*4},$4 -pink wshedtopo,{($2+1)*4}",$5,0
  -endif -v +

fx_pink_preview :
  -gui_split_preview "-fx_pink ${1-5}",$6

#@gui Pink operator binary: fx_karo_pink_bin, fx_karo_pink_bin_preview(1)
#@gui : Auto-threshold = bool(1)
#@gui : Threshold \% = int(50,0,100)
#@gui : Pink operator = choice(3,"skelpar","skelend","skelcurv","skeleton","barycentre","border","closeball","openball","convexhull","dist","distc","label pla","Lantuejoul")
#@gui : Connectivity / Dir = choice("Four/x","Eight/y")
#@gui : Height/Rep = int(5,-1,25)
#@gui : Algorithm = int(4,0,29)
#@gui : Channel(s) = choice(0,"All","RGBA","RGB","Luminance","Blue/red chrominances","Blue chrominance","Red chrominance","Lightness","ab-components","a-component","b-component","Hue","Saturation","Value","Key","Green chrominance","ch-components","c-component","h-component","Red","Green","Blue","Alpha")
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right")
#@gui : sep = separator(), note = note(Binary operations with Pink externals.)
#@gui : note = note{"Diverse Pink executables in search PATH"}
#@gui : sep = separator(), note = note("<small>Author : <i>KaRo</i>.           Latest update : <i>2014/02/05</i>.</small>")
#@gui : note = link("http://pinkhq.com/")
fx_karo_pink_bin :
  -skip ${1=1},${2=50},${3=3},${4=0},${5=5},${6=4},${7=0} -v -
  -if   {$3==0}  -apply_channels "-if $1 -otsu 256 -else -threshold ${2}% -endif -pink_skelpar $6,$5 -n 0,255",$7,0
  -elif {$3==1}  -apply_channels "-if $1 -otsu 256 -else -threshold ${2}% -endif -pink_skelend {($4+1)*4},$5 -n 0,255",$7,0
  -elif {$3==2}  -apply_channels "-if $1 -otsu 256 -else -threshold ${2}% -endif -pink_skelcurv $6,{($4+1)*4} -n 0,255",$7,0
  -elif {$3==3}  -apply_channels "-if $1 -otsu 256 -else -threshold ${2}% -endif -pink_skeleton $6,{($4+1)*4} -n 0,255",$7,0
  -elif {$3==4}  -apply_channels "-if $1 -otsu 256 -else -threshold ${2}% -endif -pink barycentre,{($4+1)*4} -n 0,255",$7,0
  -elif {$3==5}  -apply_channels "-if $1 -otsu 256 -else -threshold ${2}% -endif -pink border,{($4+1)*4} -n 0,255",$7,0
  -elif {$3==6}  -apply_channels "-if $1 -otsu 256 -else -threshold ${2}% -endif -pink closeball,$5,$6 -n 0,255",$7,0
  -elif {$3==7}  -apply_channels "-if $1 -otsu 256 -else -threshold ${2}% -endif -pink openball,$5,$6 -n 0,255",$7,0
  -elif {$3==8}  -apply_channels "-if $1 -otsu 256 -else -threshold ${2}% -endif -pink convexhull,3 -n 0,255",$7,0
  -elif {$3==9}  -apply_channels "-if $1 -otsu 256 -else -threshold ${2}% -endif -pink dist,$6 -n 0,255",$7,0
  -elif {$3==10}  -apply_channels "-if $1 -otsu 256 -else -threshold ${2}% -endif -pink distc,$6 -n 0,255",$7,0
  -elif {$3==11}  -apply_channels "-if $1 -otsu 256 -else -threshold ${2}% -endif -pink label,{($4+1)*4},pla",$7,0
  -elif {$3==12}  -apply_channels "-if $1 -otsu 256 -else -threshold ${2}% -endif -pink lantuejoul,$6 -n 0,255",$7,0
  -else
  -endif

fx_karo_pink_bin_preview :
  -gui_split_preview "-fx_karo_pink_bin ${1-7}",$8

#@gui Pink test operator bianca: fx_karo_pink_bianca, fx_karo_pink_bianca_preview(0)
#@gui : ASF smooth size = int(5,1,10)
#@gui : Threshold \% = int(60,0,100)
#@gui : Watershed height min = int(5,0,20)
#@gui : Opening radius = int(1,0,10)
#@gui : Invert = bool(0)
#@gui : Use G instead of B = bool(0)
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right")
#@gui : sep = separator(), note = note(Pink test operator Bianca for RGB image; only B used.)
#@gui : note = note{"Pink executables in search PATH or C:\\Pink\\bin\\ for Windows"}
#@gui : sep = separator(), note = note("<small>Author : <i>KaRo</i>.           Latest update : <i>2012/10/26</i>.</small>")
#@gui : note = link("http://pinkhq.com/")
#@cli fx_karo_pink_bianca : Pink test operator bianca
#@cli : ASF smooth size = int(5,1,10)
#@cli : Threshold \% = int(60,0,100)
#@cli : Watershed height min = int(5,0,20)
#@cli : Opening radius = int(1,0,10)
#@cli : Invert = bool(0)
#@cli : Use G instead of B = bool(0)
#@cli : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right")
#@cli : sep = separator(), note = note(Pink test operator Bianca for RGB image; only B used.)
#@cli : note = note{"Pink executables in search PATH or C:\\Pink\\bin\\ for Windows"}
#@cli : sep = separator(), note = note("<small>Author : <i>KaRo</i>.           Latest update : <i>2012/11/18</i>.</small>")
#@cli : note = link("http://pinkhq.com/")
fx_karo_pink_bianca :
  -skip "${1=5}","${2=60}","${3=5}","${4=1}","${5=0}","${6=0}"
  -if $5 -negate -endif
  -if {!${-is_windows}} exe="label" -else exe="C:\Pink\bin\label" -endif
  -s c -if $6 -k[-2] -else -k[-1] -endif
  --pink asf,$1 --- -k[-1,-3] -threshold[-1] ${2}%
  --pink_wshed[-2] ,1,$3
  -pink[-1] $exe,4,max -threshold[-1] 1
  -erode_oct[-2] {$4*2+1} -dilate_oct[-2] {$4*2+1}
  --*[-1,-2] -negate[-2] -n[-1,-2] 0,255 -a[-1,-2,-4] c -k[0]

fx_karo_pink_bianca_preview :
  -gui_split_preview "-fx_karo_pink_bianca ${1-6}",$7

#@gui _

# Local Variables:
# mode: sh
# End:
#
# (End of G'MIC custom commands)
