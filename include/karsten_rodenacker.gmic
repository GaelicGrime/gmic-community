#@gmic
#
#  File        : karsten_rodenacker.gmic
#                ( G'MIC and G'MIC-Gimp commands file )
#
#  Description : Define several gmic commands
#
#  Copyright   : Karsten Rodenacker
#
#  License     : CeCILL v2.0
#                ( http://www.cecill.info/licences/Licence_CeCILL_V2-en.html )
#
#  This software is governed by the CeCILL  license under French law and
#  abiding by the rules of distribution of free software.  You can  use,
#  modify and/ or redistribute the software under the terms of the CeCILL
#  license as circulated by CEA, CNRS and INRIA at the following URL
#  "http://www.cecill.info".
#
#  As a counterpart to the access to the source code and  rights to copy,
#  modify and redistribute granted by the license, users are provided only
#  with a limited warranty  and the software's author,  the holder of the
#  economic rights,  and the successive licensors  have only  limited
#  liability.
#
#  In this respect, the user's attention is drawn to the risks associated
#  with loading,  using,  modifying and/or developing or reproducing the
#  software by the user in light of its specific status of free software,
#  that may mean  that it is complicated to manipulate,  and  that  also
#  therefore means  that it is reserved for developers  and  experienced
#  professionals having in-depth computer knowledge. Users are therefore
#  encouraged to load and test the software's suitability as regards their
#  requirements in conditions enabling the security of their systems and/or
#  data to be ensured and,  more generally, to use and operate it in the
#  same conditions as regards security.
#
#  The fact that you are presently reading this means that you have had
#  knowledge of the CeCILL license and that you accept its terms.
#

#@gui _<b>Testing</b>
#@gui KaRo's Tests

#@gui About : _none_, karos_about
#@gui : note = note{"
#@gui : KaRo's test files for <b>G'MIC</b>\n\written by"}
#@gui : note = link("Karsten Rodenacker","http://K.Rodenacker.de")
#@gui : note = note{"\n"}
#@gui : note = note{"
#@gui : The source code of this set of filters is available at :"}
#@gui : note = link("https://github.com/dtschump/gmic-community/blob/master/karos.gmic")
#@gui : sep = separator()
#@gui : note = note{"Several operations here rely on executables existing <i>in search PATH</i> ($PATH unter Mac/Unix).
#@gui : This means that the executable is downloaded or built and properly located.
#@gui : E. g. CImg examples have to be built and copied to a location in the search path, e.g. under unix <i>/usr/local/bin</i>.
#@gui : Similar with PINK executables. For Mac they have to be built according the README with <i>./makelin</i>
#@gui : and PATH as to be extended by <i>..pink location../linux/bin</i>."}
#@gui : sep = separator()
#@gui : note = note{"  CImg Skeleton: <i>use_skeleton</i> in search PATH"}
#@gui : note=link("https://github.com/dtschump/CImg/blob/master/examples/use_skeleton.cpp")
#@gui : note = note{"  CImg nlmeans: <i>use_nlmeans</i> in search PATH"}
#@gui : note=link("https://github.com/dtschump/CImg/blob/master/examples/use_nlmeans.cpp")
#@gui : note = note{"  mM Differences: \nmathematical morphology operation differences\nmM operation size - mM operation size2"}
#@gui : note = note{"  oC Differences: \nmathematical morphology open/close differences\nmM open size - mM close size"}
#@gui : note = note{"  Pink operations binary: <i>Pink applications</i> in search PATH"}
#@gui : note=link("https://pinkhq.com/hg/pink/file/tip/src/")
#@gui : sep = separator()
#@gui : note = note{"\nThe functions defined are quite <i>experimental</i> and subject to changes.
#@gui : Please do not rely on the fact that they will perform equally forever."}
karos_about :
  fx_logo_version{round(u(0.5,3.49))} $_version [0] *. 0 text. "KaRo's",10%,22%,57,1,255 text. "Tests",40%,60%,57,1,200
  +to_gray. skeleton. , n[-1--2] 0,255 dilate.. 2 -[-1--2] + n 0,255

#------------------------------------
#
#@cli :: PINK-library operators
#
#------------------------------------

_wrbytepnk :
  output_pink3d ${1}.pnk

_xpink :
  na={-1,n}
  filename=${-file_rand}
  x_filename={/$filename}
  prefix=pink.
  if {!${-is_windows}}
    -x "which "${prefix}${1}" >/dev/null 2>&1"
    if {${}!=0} prefix=""
      -x "which "$1" >/dev/null 2>&1"
      if {${}!=0} v + error "Executable (pink.)"$1" not found in PATH, status = "${}"!! Returning!!\n" fi
    fi
    output_pink3d ${filename}.pnk -x ${prefix}${1}" "${filename}".pnk $2 "${filename}"_o.pnk >/dev/null 2>&1"
  else
    output_pink3d ${filename}.pnk -x $1" "${x_filename}".pnk $2 "${x_filename}"_o.pnk"
  fi
  status=${}
  file_rm ${x_filename}.pnk
  if {$status!=0" && "['"$1"']!='seuilauto'} v + error "Exec status is "${status}"."
  elif ${filename}_o.pnk i ${filename}_o.pnk file_rm ${x_filename}_o.pnk k. nm. $na
  else v + error "Exec error!!"
  fi

_xpinks :
  s={s} if {$s>1} s. c fi
  repeat $! l[$>]  _xpink $1,"$2" k. endl done
  if {$s>1} a[-$s--1] c fi

_xframe :
  line 0%,0%,100%,0% line 0%,100%,100%,100% line 0%,0%,0%,100% line 100%,0%,100%,100%

#@cli output_pink3d : filename,_type
#@cli : Save selected images as _type-coded (P5,P8,P9) PPM files (PINK extension for 3d volumetric images).
output_pink3d : skip ${2=P5}
  e[^-1] "Output image$? as file '$1' (in 3d pink extension of "$2"-coded PPM format)."
  v - if {$!==1} filename0="$1"
  else repeat $! filename$>=${filename\ "\"$1\"",$>} done
  fi
  repeat $! l[$>]
    if {['"$2"']=='P5'}
      if {d==1} o. ppm:${filename$>}  # 2d image, save as regular PPM format.
      else                            # 3d image, save as PINK PPM extension.
        ({'P5\n{w}\ {h}\ {d}\n255\n'})
        +channels.. 0 y. x a[-2,-1] x
        o. raw:${filename$>},uchar
        rm.
      fi
    elif {['"$2"']=='P8'}
      ({'P8\n{w}\ {h}\ {d}\n{iM}\n'})
      +channels.. 0 cast. uint,uchar y[-2,-1] x a[-2,-1] x
      o. raw:${filename$>},uchar
      rm.
    elif {['"$2"']=='P9'}
      ({'P9\n{w}\ {h}\ {d}\n{ceil(iM)}\n'})
      +channels.. 0 cast. float,uchar y[-2,-1] x a[-2,-1] x
      o. raw:${filename$>},uchar
      rm.
    else error "Type "$2"not implemented!" fi
  endl done v +

#@cli pinkxipo : [b1],..[bn],name,pn+2, .. ,pm
#@cli : Pink wrapper pinkxipo[a] [b1,..bn,]name(pn+1)[,pn+2, .. ,pm] (requires the PINK library to be installed).
#@cli : Executables with 1, 2-n input image files (xi), pos. parameters (p), output file (o)
#@cli : (http://pinkhq.com/)
#@cli : prepares input, calls external "name inputa [inputb1 ... inputbn] [pn+2 ... pm] output" and reads output (/tmp)
#@cli : Add. images are located before the pink executable name. If images are replaced by a parameter, 
#@cli : e.g. null, than it has to be located after the executable name!
#@cli : $ sp 1 ir. 0,50% +pinkxipo. distc,3 +negate.. +pinkxipo... dist,3 pinkxipo[1] [0],bisector pinkxipo[3] [2],bisector k[0,1,3] a c 
#@cli : $ sp 2 +pinkxipo. dilatballnum,5 +-
#@cli : $ sp 1 ir. 0,50% +pinkxipo. dilatballnum,10 +pinkxipo.. .,distgeo,4
#@cli : $ sp 1 +pinkxipo. seuilauto,128,max,3
pinkxipo :  
  e[^0] "Pink cmd "$* v -
  $=var
  p=1
  na={n}
  for {$#>=$p&&${-is_image_arg\ ${var$p}}} pass${var$p} p+=1 done pl=$p-1
  exec=${var$p} p+=1
  if {$#==$p} pp=${var$p} 
  elif {$#>$p} repeat {$#-$p+1} if {$>==0} pp=${var$p} else pp=$pp" "${var$p} fi p+=1 done 
  else pp="" fi
  filename=${-file_rand}
  if {!${-is_windows}}
    prefix=pink.
    x "which "$prefix$exec" >/dev/null 2>&1"
    if {${}!=0} prefix="" x "which "$exec" >/dev/null 2>&1"
      if {${}!=0} error "executable (pink.)"$exec" not found in PATH, status = "${}"!! Returning!!\n" return fi
    fi
  else prefix="" fi
  ni=$!
  repeat $! 
    if {iM#$>>255} output_pink3d[$>] ${filename}$>.pnk,P8 else output_pink3d[$>] ${filename}$>.pnk fi
    if {$>==0} il=${filename}$>.pnk else il=$il","${filename}$>.pnk fi done
  ilk=${-karo_li2st\ $il} 
  cmd=$prefix$exec\ $ilk\ $pp\ ${filename}"_o.pnk >/dev/null 2>&1" e $cmd
  x $cmd
  status=${}
  repeat $ni file_rm ${-arg\ {$>+1},$il} done 
  if {$status!=0" && "['$exec']!='seuilauto'} v + error $exec" Status is "$status"." return
  elif ${filename}_o.pnk i ${filename}_o.pnk file_rm ${filename}_o.pnk k. nm $na~
  else error "exec Error!!" fi
  v +

#@cli pink
#@cli : Pink wrapper name,p1,...,pn (requires the PINK library to be installed).
#@cli : (http://pinkhq.com/)
#@cli : prepares input, calls external "name input p1...pn output" and reads output (/tmp)
#@cli : $ image.jpg +pink asfr,5 pink[0] asf,5
#@cli : $ image.jpg +blur 2 pink maxima,4
pink : v -
  if {$#>1} ({"'${2--1}'"}) replace. {','},{"' '"} p={t} rm. else p=" " fi
  v + e[^-1] "Call pink package on image$? with cmd: \"$1 [img] "$p" [img]\"." v -
  repeat $! l[$>] _xpinks $1,$p endl done v +

#@cli pink_grayskel : _connectivity={ 4 | 8 | 6 | 26 }, _lambda=0
#@cli : (http://pinkhq.com/doxygen/grayskel_8c.html)
#@cli : Grayscale homotopic skeleton (requires the PINK library to be installed).
#@cli : Default values: 'connectivity=4' and 'lambda=0'.
#@cli : $ image.jpg +pink_grayskel , +pink_grayskel[0] ,10 +pink_grayskel[0] ,100 append_tiles 2
pink_grayskel : skip ${1=4},${2=0}
  check "${1=4}==4 || $1==8 || $1==6 || $1==26"
  repeat $! l[$>] _xpinks "grayskel","null $1 $2" endl done

#@cli pink_heightmaxima : _connectivity={ 4 | 8 | 6 | 26 },_height=1
#@cli : (http://pinkhq.com/doxygen/heightmaxima_8c.html)
#@cli : Heightmaxima filtering (requires the PINK library to be installed).
#@cli : Default values: 'connectivity=4' and 'height=1'.
#@cli : $ image.jpg +blur 2 +pink_heightminima ,15 +pink_heightmaxima[0,1] ,15 -[-3,-1] -[-3,-1] keep[-1,-2]
pink_heightmaxima : check "${1=4}==4 || $1==8 || $1==6 || $1==26" skip ${2=1}
  e[^-1] "Filter by heightmaxima exec with connectivity $1 height $2."
  v - repeat $! l[$>]
    s={s} if {$s>1} s. c fi
    repeat $! l[$>] _xpink "heightmaxima","$1 $2" k. endl done
    if {$s>1} a[-$s--1] c fi
  endl done v +

#@cli pink_heightminima : _connectivity={ 4 | 8 | 6 | 26 },_height=1
#@cli : (http://pinkhq.com/doxygen/heightminima_8c.html)
#@cli : Heightminima filtering (requires the PINK library to be installed).
#@cli : Default values: 'connectivity=4' and 'height=1'.
#@cli : $ image.jpg +blur 2 +pink_heightminima ,15 +pink_heightmaxima[0,1] ,15 -[-3,-1] -[-3,-1] keep[-1,-2]
pink_heightminima : check "${1=4}==4 || $1==8 || $1==6 || $1==26" skip ${2=1}
  e[^-1] "Apply filter by heightminima exec with connectivity $1 height $2."
  v - repeat $! l[$>]
    s={s} if {$s>1} s. c fi
    repeat $! l[$>] _xpink "heightminima","$1 $2" k. endl done
    if {$s>1} a[-$s--1] c fi
  endl done v +

#@cli pink_htkern : _connectivity={ 4 | 8 | 6 | 26 }, _type={""|u}
#@cli : (http://pinkhq.com/doxygen/htkern_8c.html)
#@cli : (http://pinkhq.com/doxygen/htkernu_8c.html)
#@cli : Grayscale ultimate homotopic thinning/thickening without condition (requires the PINK library to be installed).
#@cli : Default values: 'connectivity=4' and 'type=""'.
#@cli : $ image.jpg +pink_htkern ,u +pink_htkern[0] , +-[-1,-2] remove[0]
pink_htkern : skip ${1=4},${2=""}
  repeat $! l[$>] _xpinks htkern$2,"null $1" endl done

#@cli pink_lvkern : _connectivity={ 4 | 8 | 6 | 26 }, _type={""|u}
#@cli : (http://pinkhq.com/doxygen/lvkern_8c.html)
#@cli : (http://pinkhq.com/doxygen/lvkernu_8c.html)
#@cli : Grayscale ultimate leveling thinning/thickening without condition (requires the PINK library to be installed).
#@cli : Default values: 'connectivity=4' and 'type=""'.
#@cli : $ image.jpg pink_lvkern ,u
pink_lvkern : skip ${1=4},${2=""}
  check "${1=4}==4 || $1==8 || $1==6 || $1==26"
  repeat $! l[$>] _xpinks lvkern${2},"null $1" endl done

#@cli pink_reg_minima : _connectivity={ 4 | 8 | 6 | 26 }
#@cli : (http://pinkhq.com/doxygen/minima_8c.html)
#@cli : Regional minima (requires the PINK library to be installed).
#@cli : Default values: 'connectivity=4'.
#@cli : $ image.jpg +blur 2 pink_reg_minima ,
pink_reg_minima : check "${1=4}==4 || $1==8 || $1==6 || $1==26"
  e[^-1] "Compute regional minima exec with connectivity $1."
  v - repeat $! l[$>]
    s={s} if {$s>1} s. c fi
    repeat $! l[$>]  _xpink "minima","$1" k. endl done
    if {$s>1} a[-$s--1] c fi
  endl done v +

#@cli pink_skelcurv : _prio={0|1|2|3|4|8|6|26},_connectivity={ 4 | 8 | 6 | 26 },_inhibit={""}
#@cli : (http://pinkhq.com/doxygen/skelcurv_8c.html)
#@cli : Curvilinear binary skeleton guided by a priority function or image (requires the PINK library to be installed).
#@cli : Default values: 'prio=0', 'connectivity=4' and 'inhibit=""'.
#@cli : $ image.jpg threshold 50% {w},{h} fill[-1] 'if(x>w/2,255,0)' tp=${-path_tmp} output[-1] ${tp}/inhibit.pgm remove[-1] +pink_skelcurv[0] , +pink_skelcurv[0] ,,${tp}/inhibit.pgm exec "rm "${tp}"/inhibit.pgm"
#@cli : $ image.jpg threshold 50% +pink_skelcurv , +pink_skelcurv[-2] ,8
pink_skelcurv : skip ${1=0},${2=4},${3=""}
  e[^-1] "Curvilinear binary skeleton guided by a priority function or image from image$?, prio=$1, connectivity=$2, inhibit=$3."
  repeat $! l[$>] _xpinks "skelcurv","$1 $2 $3" endl done

#@cli pink_skelend : _connectivity={ 4 | 8 | 6 | 26 },_n=0
#@cli : (http://pinkhq.com/doxygen/skelend_8c.html)
#@cli : Homotopic skeleton of a 2d or 3d binary image with dynamic detection of end points (requires the PINK library to be installed).
#@cli : Default values: 'connectivity=4' and 'n=0'.
#@cli : $ image.jpg threshold 50% +pink_skelend , +pink_skelend[-2] ,-1
pink_skelend : skip ${1=4},${2=0}
  repeat $! l[$>] _xpinks "skelend","$1 $2" endl done

#@cli pink_skeleton : _prio={0|1|2|3|4|8|6|26},_connectivity={ 4 | 8 | 6 | 26 },_inhibit={""}
#@cli : (http://pinkhq.com/doxygen/skeleton_8c.html)
#@cli : Ultimate binary skeleton guided by a priority image (requires the PINK library to be installed).
#@cli : Default values: 'prio=0', 'connectivity=4' and 'inhibit=""'.
#@cli : $ image.jpg threshold 50% +pink_skeleton[-1] ,
 pink_skeleton : skip ${1=0},${2=4},${3=""}
  repeat $! l[$>] _xpinks "skeleton","$1 $2 $3" endl done

#@cli pink_skelpar : _algorithm={0...29},_nsteps=_1,_inhibit=""
#@cli : (http://pinkhq.com/doxygen/skelpar_8c.html)
#@cli : Parallel binary skeleton (requires the PINK library to be installed).
#@cli : Default values: 'algorithm=4', 'nsteps=-1' and 'inhibit=""'.
#@cli : $ image.jpg threshold 50% +pink_skelpar[-1] 0 +pink_skelpar[-1] 2
pink_skelpar : skip ${1=4},${2=-1},${3=""}
  repeat $! l[$>] _xframe _xpinks "skelpar","$1 $2 $3" endl done

#@cli pink_wshed : _connectivity={ 4 | 8 | 6 | 26 },_inverse={ 0 | 1 },_height=0
#@cli : (http://pinkhq.com/doxygen/wshedtopo_8c.html)
#@cli : Watershed (requires the PINK library to be installed).
#@cli : Default values: 'connectivity=4', 'inverse=0' and 'height=0'.
#@cli : $ image.jpg +pink_wshed ,1,5 pink_wshed[0] ,,5
pink_wshed : check "${1=4}==4 || $1==8 || $1==6 || $1==26" skip ${2=0},${3=0}
  e[^-1] "Compute wshedtopo exec with connectivity $1 inversion $2 height $3."
  v - repeat $! l[$>]
    s={s} if {$s>1} s. c fi
    if {d==1}
      check "${1=4}==4 || $1==8"
      repeat $! l[$>]
        f max(min(i,255),0)
        if {$2!=0} negate 255 fi
        if {$3>=0} pink heightminima,$1,$3 fi
        pink wshedtopo,$1
        if {$2!=0} negate 255 fi
      endl done
    else
      check "$1==6 || $1==26"
      repeat $! l[$>]
        f max(min(i,255),0)
        if {$2!=0} negate 255 fi
        if {$3>=0}
          pink heightminima,$1,$3
        fi
        pink wshedtopo,$1
        if {$2!=0} negate 255 fi
      endl done
    fi
    if {$s>1} a[-$s--1] c fi
  endl done v +

#@cli :: KaRo's Tests

#@cli gwyddionread : _filename
#@cli : Read gwyddion ASCII file and produce image
#@cli : Data beginning after "Start of Data:" are imported
#@cli : [x-length, y-length, x-offset, y-offset, header lines] are returned in ${}
#@cli : gwyddion Example header
#@cli : |# File Format = ASCII
#@cli : |# Created by Gwyddion 2.48
#@cli : |# Original file: gwyddion_Example.asc
#@cli : |# x-pixels = 640
#@cli : |# y-pixels = 480
#@cli : |# x-length = 313789.96127244376
#@cli : |# y-length = 235219.70492879587
#@cli : |# x-offset = 0
#@cli : |# y-offset = 0
#@cli : |# Bit2nm = 1.0
#@cli : |# Start of Data:
gwyddionread : skip "${1=gwyddion_Example.asc}"
  e[^-1] "Read gwyddion ASCII text data: "$1
  v -
  l[]
    i raw:"$1",uchar nm={b}
    # Retrieve header information.
    s +,10
    size_x=-1 size_y=-1
    len_x=-1 len_y=-1
    offs_x=-1 offs_y=-1
    bit2nm=-1
    hend=-1
    repeat $!
      if   {same(['{$>,t}'],'"# x-pixels ="',12)} rows[$>] 12,100% size_x={{$>,t}}
      elif {same(['{$>,t}'],'"# y-pixels ="',12)} rows[$>] 12,100% size_y={{$>,t}}
      elif {same(['{$>,t}'],'"# x-length ="',12)} rows[$>] 12,100% len_x={{$>,t}}
      elif {same(['{$>,t}'],'"# y-length ="',12)} rows[$>] 12,100% len_y={{$>,t}}
      elif {same(['{$>,t}'],'"# x-offset ="',12)} rows[$>] 12,100% offs_x={{$>,t}}
      elif {same(['{$>,t}'],'"# y-offset ="',12)} rows[$>] 12,100% offs_y={{$>,t}}
      elif {same(['{$>,t}'],'"# Bit2nm ="',10)}   rows[$>] 10,100% bit2nm={{$>,t}}
      elif {same(['{$>,t}'],'"# Start of Data:"',16)} hend=$> break
      fi
    done
    if {$hend>0}
      rm[0-{$hend+1}] a y
       #e "Size = ("$size_x,$size_y,$len_x,$len_y,$hend")"
       # Save remaining data as a pure ascii file.
      discard 13
      file_tmp=${-file_rand}
      if {$!>1} o.. raw:$file_tmp,uchar rm.. i dlm:$file_tmp nm. $nm
        o.. raw:${file_tmp}_,uchar rm.. i dlm:${file_tmp}_ nm. ${nm}_ file_rm ${file_tmp}_
      else o raw:$file_tmp,uchar rm i dlm:$file_tmp nm. $nm
      fi
      file_rm $file_tmp
    else
      rm
    fi
    u [$len_x,$len_y,$offs_x,$offs_y,$bit2nm]
  endl
  v +

#@cli wykoread : _filename
#@cli : Read Wyko/Bruker/Vision ASCII file and produce image(s)
#@cli : Data preceded by "RAW_DATA" and/or "Intensity" are imported
#@cli : Wyko Example header
#@cli : |Wyko ASCII Data File Format 0	1	1
#@cli : |X Size	640
#@cli : |Y Size	480
#@cli : |Block Name	Type	Length	Value
#@cli : |Wavelength	7	4	71.992500
#@cli : |Aspect	7	4	1.000000
#@cli : |Pixel_size	7	4	0.000985
#@cli : |Magnification	8	8	10.050000
#@cli : |ScannerSpeed	7	4	2.315832
#@cli : |RAW_DATA	3	1228800
wykoread : skip "${1=Wyko_Example.ASC}"
  e[^-1] "Read Vision surface profilometry OPD text data: "$1
  v - l[]
    i raw:"$1",uchar nm={b}
    # Retrieve header information.
    s +,10
    size_x=-1 size_y=-1 hend=-1 rend=-1
    repeat $!
      if   {same(['{$>,t}'],'"X Size"',6)} rows[$>] 6,100% size_x={{$>,t}}
      elif {same(['{$>,t}'],'"Y Size"',6)} rows[$>] 6,100% size_y={{$>,t}}
      elif {same(['{$>,t}'],'"RAW_DATA"',8)} hend=$>
      elif {same(['{$>,t}'],'"Intensity"',9)} rend=$> break
      fi
    done
    if {$hend>0}
      rm[0-{$hend+1}]
      if {$rend>$hend} a[0-{$rend-$hend-3}] y rm[1,2] a[1--1] y else a y fi
      #-e "Size = ("$size_x,$size_y,$hend,$rend")"
      # Save remaining data as a pure ascii file.
      replace_str "Bad","nan"
      discard 13
      file_tmp=${-file_rand}
      if {$!>1} o.. raw:$file_tmp,uchar rm.. i dlm:$file_tmp nm. $nm
        o.. raw:${file_tmp}_,uchar rm.. i dlm:${file_tmp}_ nm. ${nm}_ file_rm ${file_tmp}_
      else o raw:$file_tmp,uchar rm i dlm:$file_tmp nm. $nm
      fi
      file_rm $file_tmp
      rotate -90,0
    else
      rm
    fi
  endl v +

#@cli pseudo_c : Pseudo coloring of greyscale image
pseudo_c : v - if {s!=1} to_gray. fi {iM},1,1,3,u(255) round. map.. . rm.  v +

#@cli sincos : _w(512), _h(512), _new(0)
#@cli : testimage
#@cli : $ sincos , +shift. 50%,0,0,0,2 +shift.. 0,50%,0,0,2 a c
sincos :
  skip "${1=512},${2=$1},${3=0}" v - l[]
  if {!!$3&&$_version>=216} $1,$2,1,1,'init(a=pi*w;b=pi*h);i=sin(a/(x+1))*cos(b/(y+1));if(i<=0,i+=1,i);i*255'
  else
    $1,$2,1,1,'init(a=pi*w;b=pi*h);sin(a/(x+1))*cos(b/(y+1))'
    +f. 'sign(i)' eq. 1 +neq. 1 *[1] ... *. ... n[-1,-2] 0,255
    f[-1,-2] 'if(i==255,0,i)' +[-1,-2] rm..
  fi
  nm. sincos endl v +

#@cli karo_luminance : _type = [itur1990 | itur1990-2 | gmic | gmic-2]
#@cli : Compute luminance of selected RGB images according
#@cli :   itur1990 | itur1990-2 sqr/sqrt | gmic luminance | sqr/sqrt gmic luminance.
#@cli : sRGB RGB and back only with gmic!
#@cli : Default _type=itur1990
#@cli : $ image.jpg +karo_luminance ,
karo_luminance : skip ${1=itur1990}
  e[^-1] "Compute luminance $1 of image$?."
  v - remove_opacity if {['"$1"']=='gmic'" || "['"$1"']=='gmic-2'} srgb2rgb fi
  repeat $! l[$>]
  if {s==3} sh 0,0 sh[0] 1,1 sh[0] 2,2
   if   {['"$1"']=='gmic'} *[1] 0.299 *[2] 0.587 *[3] 0.114 +[1-3] rm[1]
   elif {['"$1"']=='gmic-2'} sqr *[1] 0.299 *[2] 0.587 *[3] 0.114 +[1-3] sqrt rm[1]
   elif {['"$1"']=='itur1990-2'} sqr *[1] 0.212655 *[2] 0.715158 *[3] 0.072187 +[1-3] sqrt rm[1]
   else *[1] 0.212655 *[2] 0.715158 *[3] 0.072187 +[1-3] rm[1] fi
  elif {s!=1} norm n 0,255
  fi endl done
  channels 0
  if {['"$1"']=='gmic'" || "['"$1"']=='gmic-2'} rgb2srgb fi
  v +

#@cli karo_close : '_size>0','_shape=0|1|2' (square|octagon|circle),'_invert=0|1','_scale=0|1',
#@cli : '_channel=0..33' ("All","RGBA [all]","RGB [all]","RGB [red]","RGB [green]","RGB [blue]","RGBA [alpha]","Linear RGB [all]","Linear RGB [red]","Linear RGB [green]","Linear RGB [blue]","YCbCr [luminance]","YCbCr [blue-red chrominances]","YCbCr [blue chrominance]","YCbCr [red chrominance]","YCbCr [green chrominance]","Lab [lightness]","Lab [ab-chrominances]","Lab [a-chrominance]","Lab [b-chrominance]","Lch [ch-chrominances]","Lch [c-chrominance]","Lch [h-chrominance]","HSV [hue]","HSV [saturation]","HSV [value]","HSI [intensity]","HSL [lightness]","CMYK [cyan]","CMYK [magenta]","CMYK [yellow]","CMYK [key]","YIQ [luma]","YIQ [chromas]")
#@cli : Morphological closing (dilate and erode) of given size (only 2d)
#@cli :  with fx_morpho_v2 and implicitly apply_channels!
#@cli : $ image.jpg  +karo_close 15 +karo_close[0] 15,1 +karo_close[0] 15,2 rm[0]
karo_close :
  e "Compute closing image$?, with size $1 (only 2d)."
  skip ${1=5},${2=0},${3=0},${4=0},${5=0} check $2<3 v -
  if {$_version<175} fx_morpho 3,$1,$3,$2,$5,$4
  else fx_morpho_v2 3,$2,$1,"1,0,1; 0,1,0; 1,0,1",$3,1,$5,$4
  fi v +

#@cli karo_open : '_size>0', '_shape=0|1|2' (square|octagon|circle), '_invert=0|1', '_scale=0|1',
#@cli : '_channel=0..33 ("All","RGBA [all]","RGB [all]","RGB [red]","RGB [green]","RGB [blue]","RGBA [alpha]","Linear RGB [all]","Linear RGB [red]","Linear RGB [green]","Linear RGB [blue]","YCbCr [luminance]","YCbCr [blue-red chrominances]","YCbCr [blue chrominance]","YCbCr [red chrominance]","YCbCr [green chrominance]","Lab [lightness]","Lab [ab-chrominances]","Lab [a-chrominance]","Lab [b-chrominance]","Lch [ch-chrominances]","Lch [c-chrominance]","Lch [h-chrominance]","HSV [hue]","HSV [saturation]","HSV [value]","HSI [intensity]","HSL [lightness]","CMYK [cyan]","CMYK [magenta]","CMYK [yellow]","CMYK [key]","YIQ [luma]","YIQ [chromas]")
#@cli : Morphological opening (erode and dilate) of given size (only 2d)
#@cli :  with fx_morpho_v2 and implicitly apply_channels!
#@cli : $ image.jpg  +karo_open 15 +karo_open[0] 15,1 +karo_open[0] 15,2 rm[0]
karo_open :
  e "Compute opening image$?, with size $1 (only 2d)."
  skip ${1=5},${2=0},${3=0},${4=0},${5=0} check $2<3 v -
  if {$_version<175} fx_morpho 2,$1,$3,$2,$5,$4
  else fx_morpho_v2 2,$2,$1,"1,0,1; 0,1,0; 1,0,1",$3,1,$5,$4
  fi v +

#@cli karo_doc : '_size>0','_shape=0|1|2' (square|octagonal|circular),
#@cli : '_channel=0..33' ("All","RGBA [all]","RGB [all]","RGB [red]","RGB [green]","RGB [blue]","RGBA [alpha]","Linear RGB [all]","Linear RGB [red]","Linear RGB [green]","Linear RGB [blue]","YCbCr [luminance]","YCbCr [blue-red chrominances]","YCbCr [blue chrominance]","YCbCr [red chrominance]","YCbCr [green chrominance]","Lab [lightness]","Lab [ab-chrominances]","Lab [a-chrominance]","Lab [b-chrominance]","Lch [ch-chrominances]","Lch [c-chrominance]","Lch [h-chrominance]","HSV [hue]","HSV [saturation]","HSV [value]","HSI [intensity]","HSL [lightness]","CMYK [cyan]","CMYK [magenta]","CMYK [yellow]","CMYK [key]","YIQ [luma]","YIQ [chromas]")
#@cli : compute difference of open+close and original (only 2d)
#@cli : $ image.jpg +karo_doc 15,2,5
karo_doc :
  e "Compute difference of open/close and original image$?, with window size $1 (only 2d)." v -
  skip ${1=5},${2=1},${3=0}
  repeat $! l[$<]
    +karo_open[0] $1,$2,0,0,$3 +karo_close[0] $1,$2,0,0,$3
    +[-2,-1] /. 2 -
  endl done v +


#@cli karo_doo : _size1>0,_size2>0,_type=0..3 (ero/dil/open/close),_shape=0|1|2 (sqaure|octagon|circle),'_scale=0|1',
#@cli : '_channel=0..33' ("All","RGBA [all]","RGB [all]","RGB [red]","RGB [green]","RGB [blue]","RGBA [alpha]","Linear RGB [all]","Linear RGB [red]","Linear RGB [green]","Linear RGB [blue]","YCbCr [luminance]","YCbCr [blue-red chrominances]","YCbCr [blue chrominance]","YCbCr [red chrominance]","YCbCr [green chrominance]","Lab [lightness]","Lab [ab-chrominances]","Lab [a-chrominance]","Lab [b-chrominance]","Lch [ch-chrominances]","Lch [c-chrominance]","Lch [h-chrominance]","HSV [hue]","HSV [saturation]","HSV [value]","HSI [intensity]","HSL [lightness]","CMYK [cyan]","CMYK [magenta]","CMYK [yellow]","CMYK [key]","YIQ [luma]","YIQ [chromas]")
#@cli : Compute difference of math. morph operation on selected images (only 2d).
#@cli : $ image.jpg +karo_doo 10,15,2,2,0,3
karo_doo : skip ${1=5},${2=7},${3=2},${4=1},${5=0},${6=0}
  e[^-1] "Compute difference of mm op on image$?, with sizes $1 and $2 (only 2d)." v -
  repeat $! l[$<]
    +fx_morpho. $3,$1,0,$4,$6,0
     fx_morpho.. $3,$2,0,$4,$6,0
    if {{${3}&1}==0} rv[-2,-1] fi
    -[-2,-1]
    if {$5==1} n. 0,255 fi
  endl done v +

#@cli karo_label_sort :
#@cli : Rearrange a label image (the selected image) according to the region size
#@cli : $ 400,400 rand 0,1 b 3 ge 50% label 0,1 karo_label_sort threshold 50%
#@cli : Author : <i>KaRo and David Tsch.</i>. Latest update : <i>2013/04/07</i>.
karo_label_sort :
  e[^-1] "Sort labelled image$? by region size."
  v - repeat $! l[$>]
   nb={1+iM} mn={im} +histogram. $nb,0,{$nb-1}
   100%,1,1,1,x a[-2,-1] y sort. -,x rows. 1
   100%,1,1,1,x a[-2,-1] y sort. +,x rows. 1
   map.. . rm.
  endl done v +

#@cli karo_label : tolerance>=0,is_high_connectivity={ 0 | 1 },sort={ 0 | 1} : (+)
#@cli : Label connected components in selected images and possibly sort by region size.
#@cli : Default values: 'tolerance=0', 'is_high_connectivity=0' and 'sort=0'.
#@cli : $ image.jpg luminance threshold 60% label 0 normalize 0,255 map 0
#@cli : $ 400,400 set 1,50%,50% distance 1 mod 16 threshold 8 karo_label 0,,1 mod 255 map 2
#@cli : Author : <i>KaRo and David Tsch.</i>. Latest update : <i>2013/04/07</i>.
karo_label : check "$1>=0" skip ${2=0} skip ${3=0}
  e[^-1] "Label connected components on image$?, with tolerance $1, "${-arg\ 1+!$2,high,low}" connectivity and "${-arg\ 1+!$3,sorted,unsorted}
  v - repeat $! l[$>]
    label. $1,$2
    if {$3}
      nb={1+iM} +histogram. $nb,0,{iM}
      100%,1,1,1,x a[-2,-1] y sort. -,x rows. 1
      100%,1,1,1,x a[-2,-1] y sort. +,x rows. 1
      map.. . rm.
    fi
  endl done v +

#@cli karo_zerleg : Partition of binary image zero areas
#@cli : using pink watershed (https://pinkhq.com/hg/pink/file/tip/src/com/wshedtopo.c)
#@cli : $ sp 6 to_gray +threshold 140 +karo_zerleg. negate. label_fg. 0
#@cli : Author : <i>KaRo</i>. Latest update : <i>2017/11/30</i>.
karo_zerleg :
  e[^1] "Partition of binary image$? with pink watershed" v -
  repeat $! l[$>]
    +distance. 1 pink_wshed. 8,1 f. j(0,0)!=j(1,1)||j(1,0)!=j(0,1) skeleton. , or[0,-1]
  endl done v +

#@cli karo_threshold : _method={ triangle | yen | otsu | _otsu | bgt | intermeans | intera | rats | fixnnn | huang | huang2 | li },_delclass>0,_smooth>0
#@cli : Calculate threshold (from ImageJ) in range [0,255], evtl. normalization necessary.
#@cli : For each method user function _karo_"_method" is called!
#@cli : If {_delclass > 0} delete cluster {_delclass-1}.
#@cli : If {_smooth > 0} blur_x histogram with amplitude _smooth.
#@cli : No histogram processing for otsu, rats and intera!
#@cli : $ image.jpg luminance. karo_threshold. otsu
karo_threshold : skip ${1="triangle"} skip ${2=0} skip ${3=0}
  e[^-1] "Calculate "$1" thresholded mask from images$? with histogram in range [0,255] and binsize 1."
  v -
  if ${-strcontains\ $1,fix} meth=fix
  else meth=$1 fi
  if {['$meth']=='otsu'} otsu 256
  elif {['$meth']=='rats'} karo_rats ,
  elif {['$meth']=='intera'} threshold
  else repeat $!
    l[$>]
      if {['$meth']=='fix'} _karo_fix ,,$1
      else +histogram. 256,0,255
        if {$2>0} =. 0,{$2-1} fi
        if {$3!=0} tot={is} /. $tot blur_x. $3 /. {is} *. $tot round. fi
        +_karo_$meth. 0,1 rm.
      fi
      th=${}
      threshold[0] $th
# Concatenate results for image list
      if {$>==0} sres=$th else sres=$sres,$th fi
    endl done u $sres fi
  v +

#@cli _karo_fix : 0,1,fixnnn
#@cli : fix threshold nnn returned in status
_karo_fix :
  skip "${1=0} ${2=1} ${3=fix005}"
  u ${-strreplace\ $3,fix,\ }

#@cli _karo_triangle : _minval,_bins
#@cli : Calculate triangle threshold (from ImageJ auto thresholder)
#@cli : tested only with 256 classes from 0 to 255
#@cli : $ image.jpg luminance +histogram 256,0,255 _karo_triangle. , +threshold[0] ${}
_karo_triangle : skip "${1=0} ${2=1}"
  e[^-1] "Calculate triangle threshold from 1d histogram$? in range ["$1","{$1+(w-1)*$2}"]."
  v -
  repeat $! l[$>]
    ac=${-autocrop_coords.} wd={w}
    min={${-arg\ 1,$ac}} if {$min==1&&{@0}!=0} min=0 fi # corr autocrop_coords
    if {$min>0} min={$min-1} fi
    min2={${-arg\ 4,$ac}} if {$min2<{$wd-1}} min2={$min2+1} fi
    dmax={iM} max={xM}
    if {($max-$min)<($min2-$max)}
      inverted=1 mirror[0] x min={$wd-1-$min2} max={$wd-1-$max}
    else inverted=0 fi
    if {$min==$max} split=$min else
      nx={i($max)} ny={$min-$max}
      d={sqrt($nx*$nx+$ny*$ny)}
      nx={$nx/$d} ny={$ny/$d}
      d={$nx*$min+$ny*i($min)}
      +f. x *. $nx *.. $ny +[-1,-2] -. $d
      crop. {$min+1},$max
      if {$inverted} split={$wd-(xM+$min)} else split={xM+$min+1} fi
    fi
    res={$1+$split*$2}
# Concatenate results for image list
    if {$>==0} sres=$res else sres=$sres\,$res fi
    rm[0]
  endl done u $sres v +

#@cli _karo_yen : _minval,_bins
#@cli : Calculate yen threshold (from ImageJ auto thresholder)
_karo_yen :  skip "${1=0} ${2=1}" v -
  repeat $! l[$>]
    if $> r_yen=${} fi
    autocrop_coords. 0 range=${} mn=${-arg\ 1,$range} mx=${-arg\ 4,$range}
    /. {is}
    +cumulate.
    +sqr.. cumulate.
    +mirror... x sqr. cumulate. mirror[-1,-4] x
    *[-1,-2] log. replace_inf. {iM} *. -1
    +*.. -1.0 +. 1.0 *[-1,-3] log.. replace_inf.. {iM} *.. 2.0
    +[-1,-2] k.
    if {$mn>0} repeat $mn =. 0,$> done fi
    if {$mx<(w-1)} repeat {w-$mx} =. 0,{$mx+$>} done fi
    res={xM*$2+$1}
    rm.
    if $> u $r_yen,$res else u $res fi
  endl done v +

#@cli _karo__otsu : _minval(0) _bins(1)
#@cli : Calculate otsu threshold from a histogram
#@cli : with class o = _minval and bin size = _bins
#@cli : Threshold is stored in status
#@cli : $ image.jpg to_gray +histogram 256,0,255 _karo__otsu , threshold ${}
_karo__otsu : skip "${1=0} ${2=1}" v -
  l.
  /. {is}	#p
  +cumulate. x	#q_L
  ++. -1. negate.	#q_h
  +f. "x" +*[0] . rm.. cumulate. x
  ++. {-iM} negate.
  /.. [-4]	#miu_L
  /. ...	#miu_H
  -[-2,-1] sqr.
  *[-1--3] replace_nan. 0.0
  u {xM*$2+$1}
  rm
  endl
  v +

#@cli _karo_bgt : _minval,_bins
#@cli : Autothreshold using SD from whole image starting from the mode of the histogram (image range 0,255)
_karo_bgt: skip "${1=0} ${2=1}" v - fact=1.5
  l.
    hft=${-hist_feature\ -2} mn=${-arg\ 5,$hft} mx=${-arg\ 6,$hft} sd=${-arg\ 4,$hft} md=${-arg\ 1,$hft}
    if {($mx-$md)<=($md-$mn)} res={$md-$fact*$sd}
    else res={$md+$fact*$sd} fi
    u {$res*$2+$1} rm
  endl v +

#@cli _karo_intermeans : _minval,_bins
#@cli : Calculate intermeans threshold (from ImageJ autothreshold IsoData)
#@cli : from last selected data and store it in status
_karo_intermeans : skip "${1=0} ${2=1}"
  e[^-1] "Calculate intermeans threshold from last selected (1d) histogram$? in range ["$1","{$1+(w-1)*$2}"]." v -
  l. if {h>1||d>1||s>1} u "?" else
    split={"
      min=0; whiledo(i(min)==0,min++);
      max=w; whiledo(i(max)==0,max--);
      if(min>=max,res=w/2,
        mvI=min;
        dowhile(sum1=sum2=sum3=sum4=0.0;
        for(id=min,id<=mvI,id++,sum1+=id*i(id);sum2+=i(id));
        for(id=mvI+1,id<=max,id++,sum3+=id*i(id);sum4+=i(id));
        res=(sum1/sum2+sum3/sum4)/2.0;mvI++,
        (mvI+1)<=res&&mvI<(max-1)));
      round(res)"} rm
    u {$1+$split*$2} fi
  endl v +

#@cli karo_rats : _pow(0.5)
#@cli : Robust automatic threshold selection (Kittler et al. 1985)
#@cli : Input image (not histogram similar otsu!)
karo_rats :
  check ${1=0.5}>0
  e[^-1] "Calculate rats from image$? with power "$1"." v -
  repeat $! l[$>]
    +gradient_norm. pow. $1 gr={is} *. .. gri={is} res={$gri/$gr} rm.
    threshold. $res
# Concatenate results for image list
    if {$>==0} sres=$res else sres=$sres\,$res fi
  endl done
  u $sres v +

_karo_huang : skip "${1=0} ${2=1}"
# public static int Huang(int [] data ) {
# 	// Implements Huang's fuzzy thresholding method
# 	// Uses Shannon's entropy function (one can also use Yager's entropy function)
# 	// Huang L.-K. and Wang M.-J.J. (1995) "Image Thresholding by Minimizing
# 	// the Measures of Fuzziness" Pattern Recognition, 28(1): 41-51
# 	// M. Emre Celebi  06.15.2007
# 	// Ported to ImageJ plugin by G. Landini from E Celebi's fourier_0.8 routines
  huang={"
           threshold=-1;
           first_bin=0;
           for(ih=0,ih<w,if(i(ih)!=0,first_bin=ih;break());ih++);
           last_bin=w-1;
           for(ih=w-1,ih>=first_bin,if(i(ih)!=0,last_bin=ih;break());ih--);
           term = 1.0 / ( last_bin - first_bin );
           mu_0=["{^}"];
           sum_pix = num_pix = 0;
           for ( ih = first_bin, ih < w, sum_pix += ih * i(ih); num_pix += i(ih);
             mu_0[ih] = sum_pix / num_pix; ih++ );
           mu_1 = mu_0;
           sum_pix = num_pix = 0;
           for (ih = last_bin, ih > 0, sum_pix+=ih*i(ih);
             num_pix += i(ih);
             mu_1[ih-1] = sum_pix / num_pix; ih-- );
           min_ent = 1e31;
           for (it = 0, it < w,
             ent = 0.0;
             for (ih = 0,ih<=it,
               mu_x = 1.0 / ( 1.0 + term * abs(ih - mu_0[it]));
               if (!((mu_x  < 1e-06)||(mu_x > 0.999999)),
                 ent += i(ih) * ( -mu_x * log ( mu_x ) - ( 1.0 - mu_x ) * log ( 1.0 - mu_x )));
               ih++);
             for (ih = it + 1, ih < w,
               mu_x = 1.0 / ( 1.0 + term * abs (ih - mu_1[it]));
               if (!((mu_x  < 1e-06)||(mu_x > 0.999999)),
                 ent += i(ih) * ( -mu_x * log ( mu_x ) - ( 1.0 - mu_x ) * log ( 1.0 - mu_x )));
               ih++);
             if (ent < min_ent, min_ent = ent; threshold = it; _(print(min_ent,threshold)));
             it++ );
           threshold"}
  u {$huang*$2+$1} rm

_karo_huang2 : skip "${1=0} ${2=1}"
  huang2={"
#	// Implements Huang's fuzzy thresholding method
#	// Uses Shannon's entropy function (one can also use Yager's entropy function)
#	// Huang L.-K. and Wang M.-J.J. (1995) "Image Thresholding by Minimizing
#	// the Measures of Fuzziness" Pattern Recognition, 28(1): 41-51
#	// Reimplemented (to handle 16-bit efficiently) by Johannes Schindelin Jan 31, 2011
           for(first=0,first<w&&i(first)==0,first++);
           for(last=w-1,last>first&&i(last)==0,last--);
           if(first==last,break());
           S=["{^}"]; W=S;
           S[0]=i(0);
           for(ii=max(1,first),ii<=last,S[ii]=S[ii-1]+i(ii);W[ii]=W[ii-1]+ii*i(ii);ii++);
           C=last-first;
           Smu=S;
           for(ii=1,ii<(C+1),mu=1/(1+ii/C);Smu[ii]=-mu*log(mu)-(1-mu)*log(1-mu);ii++);
           bestThreshold = 0;
           bestEntropy = 1e31;
           for(threshold=first,threshold<=last,
             entropy=0; mu=round(W[threshold]/S[threshold]);
             for(ii=first,ii<=threshold,entropy+=Smu[abs(ii-mu)]*i(ii);ii++);
             mu=round((W[last] - W[threshold]) / (S[last] - S[threshold]));
             for(ii=threshold+1,ii<=last,entropy+=Smu[abs(ii-mu)]*i(ii);ii++);
             if(bestEntropy>entropy,bestEntropy=entropy;bestThreshold=threshold);
             threshold++);
           bestThreshold"}
           u {$huang2*$2+$1} rm

_karo_li : skip "${1=0} ${2=1}"
  li={"
#public static int Li(int [] data ) {
#// Implements Li's Minimum Cross Entropy thresholding method
#// This implementation is based on the iterative version (Ref. 2) of the algorithm.
#// 1) Li C.H. and Lee C.K. (1993) "Minimum Cross Entropy Thresholding"
#//    Pattern Recognition, 26(4): 617-625
#// 2) Li C.H. and Tam P.K.S. (1998) "An Iterative Algorithm for Minimum
#//    Cross Entropy Thresholding"Pattern Recognition Letters, 18(8): 771-776
#// 3) Sezgin M. and Sankur B. (2004) "Survey over Image Thresholding
#//    Techniques and Quantitative Performance Evaluation" Journal of
#//    Electronic Imaging, 13(1): 146-165
#//    http://citeseer.ist.psu.edu/sezgin04survey.html
#// Ported to ImageJ plugin by G.Landini from E Celebi's fourier_0.8 routines
      tolerance=0.5;
      num_pixels=0;
      mean = 0.0;
      for (ih = 0, ih < w, ih++, num_pixels += i(ih);mean += ih * i(ih));
      mean /= num_pixels;
      new_thresh = mean;
      dowhile(
        old_thresh = new_thresh;
        threshold = (old_thresh+0.5);
        sum_back = 0;
        num_back = 0;
        for ( ih = 0, ih<=threshold, ih++,
          sum_back += ih * i(ih);
          num_back += i(ih));
        if(num_back == 0,mean_back=0.0,mean_back=(sum_back/num_back));
        sum_obj = 0;
        num_obj = 0;
        for ( ih = threshold + 1, ih < w, ih++,
          sum_obj += ih * i(ih);
          num_obj += i(ih));
        if(num_obj == 0,mean_obj=0.0,mean_obj=(sum_obj/num_obj));
        temp = ( mean_back - mean_obj ) / ( log ( mean_back ) - log ( mean_obj ) );
        if (temp < -2.220446049250313e-16, new_thresh=floor(temp - 0.5),new_thresh=floor(temp + 0.5)),
        abs(new_thresh-old_thresh)>tolerance);
      threshold"}
  u {$li*$2+$1} rm

#@cli _kr_histogram : _nb_levels>0[%],_value0[%],_value1[%]
#@cli : Computes the histogram and returns in status the value of first class and the bin size
#@cli : _nb_levels
#@cli : _value0
#@cli : _value1
#@cli : Default values: 'nb_levels=256', '_value0=0%', '_value1=100%'
#@cli : $ sp barbara /. 2 +. 32 _kr_histogram , e ${}
_kr_histogram : skip "${1=256} ${2=0%} ${3=100%}" v -
  if ${-is_percent\ $2} mn={im+(iM-im)*$2} else mn=$2 fi
  if ${-is_percent\ $3} mx={im+(iM-im)*$3} else mx=$3 fi
  u {$mn},{($mx-$mn)/($1-1)}
  histogram. ${1-3} v +

#@cli _kr_histogram8 : _nb_levels>0[%],_value0[%],_value1[%]
#@cli : same as _kr_histogram, still defaults to byte data (256,0,255) instead of (256,0%,100%)
#@cli : $ sp dog _kr_histogram8 {iM-im+1},{im},{iM} e ${}
_kr_histogram8 : skip "${1=256} ${2=0} ${3=255}" v - _kr_histogram. ${1-3} v +

#@cli hist_percentile : _nth[%],_zero={0|1},_min0,_stepw
#@cli : Estimation of _nth percentiles (lower & upper) from histogram and returning value(s) in status (${})
#@cli : _zero Class 0 is zeroed if !=0
#@cli : _min0 value of class 0
#@cli : _stepw value of class width (bin size)
#@cli : Default values: 'nth=25%', '_zero=0', '_min0=0', '_stepw=1'
#@cli : $ image.jpg luminance +dh ,,256,0,255 histogram.. 256,0,255 hist_percentile.. , rm.. t=${} text $t,40,5,23,1,128
hist_percentile :
  check "${1=25%}>=0"
  skip ${2=0},${3=0},${4=1}
  e[^-1] "Calculate $1 percentile from 1d histogram$?."
  v - repeat $!
    l[$>]
      if {h>1||d>1||s>1} v + e[^-1] "Image "$>" seemingly not 1d!" v - continue fi
  # Delete class zero
      if {$2!=0} set. 0,0 fi
  # Calculate features
      m0={is}
      N={if(${"-is_percent $1"},$m0*$1,$1)}
      if {{$m0*$1}==0} N=1 O=$m0 else O={$m0-$N} fi
  #-echo_stdout $m0,$N
  # Percentile
      +cumulate.
      +ge. $N mn={${-arg\ 1,{[xM,yM,zM,cM]}}*$4+$3} rm.
      +ge. $O mx={${-arg\ 1,{[xM,yM,zM,cM]}}*$4+$3} rm[-1,-2]
  # Prepare result for one image
      res=$mn\,$mx
  # Concatenate results for image list
      if {$>==0} sres=$res else sres=$sres\,$res fi
    endl
  done u $sres v +

#@cli hist_feature : _nofeature>=-2,_nth>0,_zero={0|1},_min0,_stepw,_percent[%]>0
#@cli : Estimation from histogram (frequency dist, 1d image) the features
#@cli :  'mode','sum' (m0),'mean' (m1),'SD' (m2),'min','max','median','iqr' (hiq-loq+1),'loq','hiq' returned in status (${}).
#@cli : nofeature=-2 mode,m0,m1,m2,min,max,med,iqr,loq,hiq,
#@cli :   -1 mode,0 sum,1 mean,2 SD,3 min,4 max,5 median,
#@cli :    6 iqr (interquantile range),7 loq (lower quantile),8 hiq (higer qunatile)
#@cli : nth extreme value (nth+1 occurence!)
#@cli : zero Class 0 is zeroed if !=0
#@cli : min0 value of class 0
#@cli : stepw value of class width (bin size)
#@cli : percent quantile
#@cli : Default valalues: '_nofeature=-2', '_nth=1', '_zero=0', '_min0=0', '_stepw=1', '_percent=25%'
#@cli : Updated 140314 (smoothing replaced by nth selection)
#@cli : Updated 100817 (percent parameter and iqr,loq,hiq feature added)
#@cli : $ image.jpg luminance +histogram 256,0,255 dh.. ,,256,0,255 hist_feature , repeat 8 t={_arg($>+1${})} text $t,40,{$>*25+5},23,1,128 done rm.
hist_feature :
  check "${1=-2}>=-2&&$1<=8&&isint($1)&&isint(${2=1})&&$2>0"
  skip ${3=0},${4=0},${5=1},${6=25%}
  e[^-1] "Calculate md,m0,m1,m2,$2.min,$2.max,med,iqr,loq,hiq from 1d histogram$?."
  v -
  repeat $!
    l[$>]
      if {h>1||d>1||s>1} v + e[^-1] "Data["$>"] seemingly not 1d!" v - continue fi
  # Delete class zero
      if {$3!=0} =. 0,0 fi
  # Calculate features
      md={xM*$5+$4}
      m0={is}
      +*. 'x*$5+$4' m1={is/$m0} rm.
      +*. '(x*$5+$4)^2' m2={sqrt(is/$m0-$m1^2)} rm.
  # nth-min, nth-max, Median
      mn={"l=0; su=i(0); whiledo(su<"$2"&&l<w, l++; su+=i(l)); l*"$5"+"$4}
      mx={"l=w; su=0; whiledo(su<"$2"&&l>=0,l--; su+=i(l)); l*"$5"+"$4}
      med1={"l=0; su=0; whiledo(su<=(is/2)&&l<w, su+=i(l); l++); l"}
      med2={"l=w; su=0; whiledo(su<=(is/2)&&l>=0, l--; su+=i(l)); l"}
      med={($med1+$med2)/2*$5+$4}
  # iqr
      hist_percentile. $6,$3,$4,$5 qu=${}
      hiq=${-arg\ 2,$qu}
      loq=${-arg\ 1,$qu}
      iqr={${-arg\ 2,$qu}-${-arg\ 1,$qu}+1}
      if {$iqr<-1} iqr-=2 fi
  # Prepare result for one image
      res=$md\,$m0\,$m1\,$m2\,$mn\,$mx\,$med\,$iqr\,$loq\,$hiq
      if {$1>-2} res=${-arg\ {$1+2},$res} fi
  # Concatenate results for image list
     if {$>==0} sres=$res else sres=$sres\,$res fi
    endl
  done u $sres v +

#@cli hist_feature_demo : Parameters like in hist_feature
#@cli : Plot of features in blue into the histogram with Gaussian in green
#@cli : $ sp 0 luminance +threshold 40 * histogram 256,0,255 = 0,0 hist_feature_demo ,
hist_feature_demo :
  check "${1=-2}>=-2&&$1<=8&&isint($1)&&isint(${2=1})&&$2>0"
  skip ${3=0},${4=0},${5=1},${6=25%}
  e[^-1] "Plot features from hist_feature into 1d histogram$?." v -
  l.
  hist_feature. -2,${2-6} vv=${}
  md=${-arg\ 1,$vv} m0=${-arg\ 2,$vv} m1=${-arg\ 3,$vv} m2=${-arg\ 4,$vv}
  mn=${-arg\ 5,$vv} mx=${-arg\ 6,$vv} med=${-arg\ 7,$vv}
  lo=${-arg\ 9,$vv} hi=${-arg\ 10,$vv}
  +gaussian. $m2,0,0 shift. {-w/2+$m1} *. {$m0/is} round. 1
  v={iM#-2}
  +*. 0
  =. $v,$md =. $v,$m1 =. {$v*0.25},$mn =. {$v*0.25},$mx =. $v,$med
  =. {$v*(1-$6)},$lo =. {$v*(1-$6)},$hi
  a c plot. 3
  u $vv
  endl v +

#@cli karo_nth_max : _n(1),_ind(=0)
#@cli : Return in the status the _n-th max or the index of the n-th max of an image
#@cli : Possibility to fetch the index instead of the value (_ind=1)
karo_nth_max : check "isint(${1=1}) && $1>0" skip ${2=0}
  e[^-1] "Return in the status the $1-th max of image$?."
  v - repeat $! l[$>]
#     [0] repeat {$1-1} set. {im},{[xM,yM,zM,cM]} done
#     if $2 mx={xM} else mx={iM} fi rm.
     if {$2} eval argkth(-$1,{^}) u {${}-1} else eval kth(-$1,{^}) fi mx=${}
     if {$>==0} mx1=$mx else mx1=$mx1,$mx fi
  endl done u $mx1 v +

#@cli karo_nth_min : _n(1),_ind(=0)
#@cli : Return in the status the _n-th min of an image or the index of the _n-th min of an image
#@cli : Possibility to fetch the index instead of the value (_ind!=1)
karo_nth_min : check "isint(${1=1}) && $1>0" skip ${2=0}
  e[^-1] "Return in the status the $1-th min of image$?."
  v - repeat $! l[$>]
#     [0] repeat {$1-1} set. {iM},{[xm,ym,zm,cm]} done
#     if $2 mn={xm} else mn={-im} fi rm.
     if {$2} eval argkth($1,{^}) u {${}-1} else eval kth($1,{^}) fi mn=${}
     if {$>==0} mn1=$mn else mn1=$mn1,$mn fi
  endl done u $mn1 v +

#@cli karo_xcimg : programname ,parameterlist :
#@cli : Call external CImg Example 'programname'
#@cli : which has to be found in PATH by external call by
#@cli : 'programname' image_in 'parameterlist' image_out
#@cli : with writing image_in and reading after execution image_out
karo_xcimg :
  filename=${-file_rand}
  if {!${-is_windows}}
    x "which "$1" >/dev/null 2>&1"
    if ${} v + e "executable "$1" not found in PATH, status = "${}"!! Returning!!\n" v -
    {w},{h} fx_logo "exec Error !!" return fi
  fi
  o ${filename}.cimg
  x "$1 -i "${filename}".cimg $2 -o "${filename}".cimg"
  if ${} v + e "Status is "${}"." v - {w},{h} fx_logo "exec Error !!"
  else i ${filename}.cimg fi
  file_rm ${filename}.cimg

#@cli karo_li2st : p1,p2,...,pn
#@cli : Convert comma separated list to space separated string.
karo_li2st :
  v - u "" if {$#>=1} ({"'${1--1}'"}) replace. {','},{"' '"} u {t} rm. fi v +

#@cli karo_skeleton : _p1,..,p2n : (-median,0,-inv,0|1,-t,-0.3,-curve,0|1,-corr,0|1,-dlt,1)
#@cli : Execute use_skeleton (CImg demo) external.
karo_skeleton : v - if {$#>0} karo_li2st ${1--1} p=${} else p="" fi v +
  e "Compute use_skeleton exec with options "$p" on$?" v -
  repeat $! l[$>]
   s={s} if {$s>1} s. c fi
   repeat $! l[$>] karo_xcimg use_skeleton,${p}" -visu 0" mv. 0 k[0] endl done
   if {$s>1} a[-$s--1] c fi
  endl done v +

#@cli karo_nlmeans : _p1,..,pn=-zoom,1,-ng,0|1,-nu,0|1,-ns,0|1,-p,1,-lambda,-1,-sigma,-1,-alpha,3,-sampling,1
#@cli : Execute use_nlmeans  (CImg demo) external. (see also q-nlmeans p=4,lambda=4,sigma=10)
karo_nlmeans : v - if {$#>0} karo_li2st ${1--1} p=${} else p="" fi v +
  e "Compute use_nlmeans exec with options "${p}" on$?" v -
  repeat $! l[$>]
   s={s} if {$s>1} s. c fi
   repeat $! l[$>] karo_xcimg use_nlmeans,${p}" -visu 0" mv. 0 k[0] endl done
   if {$s>1} a[-$s--1] c fi
  endl done v +

#@cli karo_VST : _inverse(=0)
#@cli : Variance Stabilizing Transformation
#@cli : following http://hal.archives-ouvertes.fr/docs/00/51/08/66/PDF/Burst_Hal.pdf
#@cli : $ image.jpg e ${-std_noise} karo_VST 0 e ${-std_noise} +karo_VST 1
karo_VST :
  v - skip ${1=0} if $1 inv=" (inverse)." else inv="." fi v +
  e[^-1] "Variance Stabilizing Transformation"$inv v -
  repeat $! l[$>]
    if $1 /[0] 2 sqr[0] -[0] {3/8} else +[0] {3/8} sqrt[0] *[0] 2 fi
  endl done v +

#@cli pearson_correlation
#@cli : Compute pearson-correlation using two-by-two selected images.
#@cli : $ image.jpg +shift -30,-20 pearson_correlation e ${}
pearson_correlation :
  e[^-1] "Compute pearson-correlation using two-by-two image$?."
  v - repeat {int($!/2)} l[{$>*2},{$>*2+1}]
    +-[0] {0,ia} +-[1] {1,ia} +*[2,3]
    sqr[2,3] #-*[2,3]
    r={ia/sqrt({2,ia}*{3,ia})}
    if {$>==0} u $r else u ${},$r fi
    rm[2-4]
  endl done v +

#@cli karo_extinction : _whitevalue[%]
#@cli : Convert (integer) transmission image into extinction with _whitevalue.
#@cli : Def. val.: '_whitevalue=100%'
karo_extinction : check "${1=100%}>0"
  e[^-1] "Convert transmission image$? into extinction with white value $1." v -
  repeat $! l[$>]
    if ${-is_percent\ $1} WW={iM*$1} else WW=$1 fi
    c. 1,{iM} /. $WW log10. *. -1
  endl done v +

#@cli karo_rndbit0 :
#@cli : Randomize in [0..255] (byte) image$? bit level 0. wow randomize numbers to even and odd"
karo_rndbit0 :
  e[^-1] "Randomize in [0..255] (byte) image$? bit level 0." v -
  repeat $! l[$>] and 254 +rand 0,1 round. or endl done v +

#@cli karo_dtpread : filename,_bit0
#@cli : Read dtp image file format
#@cli :   (512 byte header, col[22-24] x row[25-27] byte image)
#@cli : with _bit0 != 0 bit level 1 is extracted as binary mask
#@cli :   and bit level 1 in the gray image is randomized with karo_rndbit0
#@cli : Ex.: karo_dtpread Images/Beispiele/tra005.cel,1
karo_dtpread : check $1 check "${2=0}>=0"
  e[^-1] "Read dtp image file from $1." v -
  i raw:$1,uchar
  ({@22-24}) x={t} rm.
  ({@25-27}) y={t} rm.
  ({@0-79}) _dtph={t} rm.
  crop. 0,512,0,{h}
  resize. $x,$y,1,1,-1
  if $2
    +and. 1 karo_rndbit0..
  fi
  v +

#@cli _kr_ch2ch : number
#@cli : return alpha channel mode string from number in status
#@cli : Ex. v - repeat 51 _kr_ch2ach $> echo_stdout $>,${} done v +
_kr_ch2ch :
  if {isval("$1")} if {isint("$1")}
  u ${-arg\ 1+$1,all,rgba,rgba_r,rgba_g,rgba_b,rgba_a,rgb,rgb_r,rgb_g,rgb_b,\
  lrgb,lrgb_r,lrgb_g,lrgb_b,ycbcr,ycbcr_y,ycbcr_cbcr,ycbcr_cb,ycbcr_cr,ycbcr_cg,\
  lab,lab_l,lab_ab,lab_a,lab_b,lch,lch_l,lch_ch,lch_c,lch_h,\
  hsv,hsv_h,hsv_s,hsv_v,hsi,hsi_h,hsi_s,hsi_i,hsl,hsl_h,hsl_s,hsl_l,\
  cmy,cmy_c,cmy_m,cmy_y,cmyk,cmyk_c,cmyk_m,cmyk_y,cmyk_k}
  else u "$1" fi else u "$1" fi

#@cli descriptive_feature :
#@cli : Estimation of features number(sum,m0),mean(m1),SD(m2),skewness(m3),kurtosis(m4),min,max,median
#@cli : from skalar images
#@cli : Ex.: image.jpg to_gray descriptive_feature e ${}
descriptive_feature :
  e[^-1] "Calculate m0,m1,m2,m3,m4,min,max,med from data$?."
  v -
  repeat $! l[$>]
    if {s>1} v + e[^-1] "Data ["$>"] seemingly not skalar! Break!" v - continue fi
# Calculate features
    if {$_version>=216} res={"
      ff=stats(); ff[3]=sqrt(ff[3]); _(print(ff));
      m3=0;m4=0;for(ip=0,ip<whds,ip++,m3+=(i[ip]-ff[2])^3;m4+=(i[ip]-ff[2])^4);
      res=[whds,ff[2,2],m3/(whds*(ff[3])^3),m4/(whds*(ff[3])^4)-3,ff[0,2],ic()];
      _(print(res)); res"}
    else
      m0={whds} m1={ia} m2={sqrt(iv)} med={ic} mx={iM} mn={im}
      +- $m1 pow. 3 m3={is/($m0*$m2^3)} rm.
      +- $m1 pow. 4 m4={is/($m0*$m2^4)-3} rm.
      res=$m0\,$m1\,$m2\,$m3\,$m4\,$mn\,$mx\,$med
    fi
# Concatenate results for image list
      if {$>==0} sres=$res else sres=$sres\,$res fi
  endl done u $sres v +

#@cli mmorpho : action, _kernel(0), _size(5), _ckernel("1,0,1; 0,1,0; 1,0,1")
#@cli : Mathematical morphology filter
#@cli : action={0=Ero | 1=Dil | 2=Open | 3=Close | 4=Ori-Ero | 5=Dil-Ori | 6=Ori-Open | 7=Close-Ori | 8=(Ori*2-(Open+Close))*0.5 | 9=Close-Open}
#@cli : _kernel={0=Square | 1=Octogon | 2=Circle | 3=Custom}
#@cli : _size>=2(5)
#@cli : _ckernel (custom kernel only if _kernel==3)
#@cli : Derived from D Tschumperle's fx_morpho_v2 (gmic_stdlib.gmic)
mmorpho :
  skip "${2=0} ${3=5} ${4=1,0,1; 0,1,0; 1,0,1}"
  v - ac=Ero,Dil,Open,Close,"Ori-Ero","Dil-Ori","Ori-Open","Close-Ori","(Ori*2-(Open+Close))*0.5","Close-Open"
  ke=Square,Octagon,Circle,Custom v +
  e[^-1] "Math. morph. filter "${-arg\ {$1+1},$ac}" with kernel "${-arg\ {$2+1},$ke}" and size "$3 v -
  ({'"$4"'}) f. "(i>=_'0' && i<=_'9') || i==_',' || i==_';'?i:-1" discard. -1 ckernel={t} rm.
  if {$2==0} m "my_erode: erode $""1" m "my_dilate: dilate $""1"
  elif {$2==1} m "my_erode: erode_oct $""1" m "my_dilate: dilate_oct $""1"
  elif {$2==2} m "my_erode: erode_circ $""1" m "my_dilate: dilate_circ $""1"
  else
  m "my_erode : ("$ckernel") erode[^-1] . skip $""1"" rm."
  m "my_dilate : ("$ckernel") dilate[^-1] . skip $""1"" rm."
  fi
  if {$1==0} m "my_action : my_erode $3"
  elif {$1==1} m "my_action : my_dilate $3"
  elif {$1==2} m "my_action : my_erode $3 my_dilate $3"
  elif {$1==3} m "my_action : my_dilate $3 my_erode $3"
  elif {$1==4} m "my_action : +my_erode $3 -"
  elif {$1==5} m "my_action : +my_dilate $3 rv -"
  elif {$1==6} m "my_action : +my_erode $3 my_dilate. $3 -"
  elif {$1==7} m "my_action : +my_dilate $3 my_erode. $3 rv -"
  elif {$1==8} m "my_action : +my_erode $3 my_dilate. $3 +- rm.. +my_dilate.. $3 my_erode. $3 rv[-1,-3] -[-1,-3] rv - / 2"
  elif {$1==9} m "my_action : +my_erode $3 my_dilate. $3 my_dilate.. $3 my_erode.. $3 -"
  else m "my_action : +my_dilate $3 my_erode. $3 rv -"
  fi
  repeat $! l[$>]
  my_action[0]
  endl done
  uncommand my_erode,my_dilate,my_action
  v +

#@gui CImg Skeleton : fx_karo_cimg_skel, fx_karo_cimg_skel_preview(0)
#@gui : Auto-threshold = bool(1)
#@gui : Threshold \% = float(50,0,100)
#@gui : Size Median = int(0,0,15)
#@gui : Invert = bool(false)
#@gui : Threshold on flux = float(-0.3,-5,5)
#@gui : Medial curve = bool(false)
#@gui : Torsello correction =bool(false)
#@gui : Discrete step = int(1,1,15)
#@gui : sep = separator(), Preview type = choice(1,"Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gui : sep = separator(), note = note(Skeleton using CImg example plugin use_skeleton.)
#@gui : note = note{"CImg Skeleton: <i>use_skeleton</i> in search PATH"}
#@gui : sep = separator(), note = note("<small>Author : <i>KaRo</i>. Latest update : <i>2012/10/26</i>.</small>")
#@cli fx_karo_cimg_skel : auto_thresh(1),thresh(50\%),median(0),invert(0),thresh_flux(-0.3),medial_curve(0),Torsello corr(0),steps(1)
#@cli : Execute use_skeleton (CImg demo) external.
fx_karo_cimg_skel :
  skip "${1=1}","${2=50}","${3=0}","${4=0}","${5=-0.3}","${6=0}","${7=0}","${8=1}"
  if $1 otsu 256 else threshold ${2}% fi
  karo_skeleton median,$3,-inv,$4,-t,$5,-curve,$6,-corr,$7,-dlt,$8 n 0,255

fx_karo_cimg_skel_preview :
  gui_split_preview "-fx_karo_cimg_skel ${1-8}",$9

#@gui CImg nlmeans : fx_karo_cimg_nlmeans, fx_karo_cimg_nlmeans_preview(0)
#@gui : Add Gauss noise = float(0.0,0.0,30.0)
#@gui : Add uniform noise = float(0.0,0.0,30.0)
#@gui : Add Salt &amp; Pepper noise = float(0.0,0.0,30.0)
#@gui : Half size of patch = int(1,1,15)
#@gui : Band width lambda = float(-1,-1,25)
#@gui : Noise SD sigma = float(-1,-1,25)
#@gui : Neighborhood size alpha = int(3,1,15)
#@gui : Sampling step size = int(2,1,5)
#@gui : sep = separator(), Preview type = choice(1,"Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gui : sep = separator(), note = note(Smoothing using CImg example plugin use_nlmeans.)
#@gui : note = note{"CImg nlmeans: <i>use_nlmeans</i> in search PATH"}
#@gui : sep = separator(), note = note("<small>Author : <i>KaRo</i>. Latest update : <i>2012/10/26</i>.</small>")
#@cli fx_karo_cimg_nlmeans : add_Gauss_noise(0),add_uniform_noise(0),add_salt_pepper(0),patch_size(0),lambda(-1),noise_sd(-1),alpha(3),steps(2)
#@cli : Execute use_nlmeans (CImg demo) external.
fx_karo_cimg_nlmeans :
  skip "${1=0}","${2=0}","${3=0}","${4=1}","${5=-1}","${6=-1}","${7=3}","${8=2}"
  karo_nlmeans -ng,$1,-nu,$2,-ns,$3,-p,$4,-lambda,$5,-sigma,$6,-alpha,$7,-sampling,$8

fx_karo_cimg_nlmeans_preview :
  gui_split_preview "-fx_karo_cimg_nlmeans ${1-8}",$9

#@gui mM Differences : fx_karo_mm_diff, fx_karo_mm_diff_preview(0)
#@gui : Size = int(5,1,25)
#@gui : Size2 = int(7,1,25)
#@gui : Operation = choice(2,"Erosion","Dilation","Open","Close")
#@gui : Shape = choice(1,"Square","Octagon","Circle")
#all,rgba,rgba_r,rgba_g,rgba_b,rgba_a,rgb,rgb_r,rgb_g,rgb_b,\
#lrgb,lrgb_r,lrgb_g,lrgb_b,ycbcr,ycbcr_y,ycbcr_cbcr,ycbcr_cb,ycbcr_cr,ycbcr_cg,\
#lab,lab_l,lab_ab,lab_a,lab_b,lch,lch_l,lch_ch,lch_c,lch_h,\
#hsv,hsv_h,hsv_s,hsv_v,hsi,hsi_h,hsi_s,hsi_i,hsl,hsl_h,hsl_s,hsl_l,\
#cmy,cmy_c,cmy_m,cmy_y,cmyk,cmyk_c,cmyk_m,cmyk_y,cmyk_k
#@gui : Channel(s) = choice(0,"all","rgba","rgba_r","rgba_g","rgba_b","rgba_a","rgb","rgb_r","rgb_g","rgb_b","lrgb","lrgb_r","lrgb_g","lrgb_b","ycbcr","ycbcr_y","ycbcr_cbcr","ycbcr_cb","ycbcr_cr","ycbcr_cg","lab","lab_l","lab_ab","lab_a","lab_b","lch","lch_l","lch_ch","lch_c","lch_h","hsv","hsv_h","hsv_s","hsv_v","hsi","hsi_h","hsi_s","hsi_i","hsl","hsl_h","hsl_s","hsl_l","cmy","cmy_c","cmy_m","cmy_y","cmyk","cmyk_c","cmyk_m","cmyk_y","cmyk_k")
#@gui : Scale = bool(true)
#@gui : sep = separator(), Preview type = choice(1,"Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
##@gui : Best with odd sizes!
#@gui : sep = separator(), note = note("Arithmetical difference of a morphological operation of <i>size</i> and <i>size2</i>.")
#@gui : sep = separator(), note = note("<small>Author : <i>KaRo</i>. Latest update : <i>2012/10/26</i>.</small>")
#@cli fx_karo_mm_diff : _size,_size2,_operation,_shape,_channel,_scale
#@cli : Compute difference of math. morph. operation with two sizes on selected images.
#@cli : _size = int(5,1,25)
#@cli : _size2 = int(7,1,25)
#@cli : _operation = choice(2,"Erosion","Dilation","Open","Close")
#@cli : _shape = choice(1,"Square","Octagon","Circle")
#@cli : _channel = choice(0,"All","RGBA","RGB","Luminance","Blue/red chrominances","Blue chrominance","Red chrominance","Lightness","ab-components","a-component","b-component","Hue","Saturation","Value","Key","Green chrominance","ch-components","c-component","h-component","Red","Green","Blue","Alpha")
#@cli : _scale = bool(true)
##@cli : Best with odd sizes!
#@cli : Arithmetical difference of a morphological operation of <i>size</i> and <i>size2</i>.
#@cli : Author : <i>KaRo</i>. Latest update : <i>2013/07/09</i>.
fx_karo_mm_diff :
  skip "${1=5}","${2=7}","${3=2}","${4=1}","${5=0}","${6=1}"
  if {$2<=$1} s2={$1+2} else s2=$2 fi
  karo_doo $1,${s2},$3,$4,$6,$5
  to_rgb

fx_karo_mm_diff_preview :
  gui_split_preview "-fx_karo_mm_diff ${1-6}",$7

#@gui oC Differences : fx_karo_oc_diff, fx_karo_oc_diff_preview
#@gui : Size = int(5,2,25)
#@gui : Shape = choice(1,"Square","Octagon","Circle")
#@gui : Channel(s) = choice(0,"All","RGBA","RGB","Luminance","Blue/red chrominances","Blue chrominance","Red chrominance","Lightness","ab-components","a-component","b-component","Hue","Saturation","Value","Key","Green chrominance","ch-components","c-component","h-component","Red","Green","Blue","Alpha")
#@gui : Scale =bool(true)
#@gui : sep = separator(), Preview type = choice(1,"Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
##@gui : Best with odd sizes!
#@gui : sep = separator(), note = note("Difference of mean of morphological opening and closing with original.")
#@gui : sep = separator(), note = note("<small>Author : <i>KaRo</i>.           Latest update : <i>2013/07/04</i>.</small>")
#@cli fx_karo_oc_diff : _size,_shape,_channel,_scale
#@cli : Compute difference of math. morph opening and closing on selected images.
#@cli : _size = int(5,1,25)
#@cli : _shape = choice(1,"Square","Octagon","Circle")
#@cli : _channel = choice(0,"All","RGBA","RGB","Luminance","Blue/red chrominances","Blue chrominance","Red chrominance","Lightness","ab-components","a-component","b-component","Hue","Saturation","Value","Key","Green chrominance","ch-components","c-component","h-component","Red","Green","Blue","Alpha")
#@cli : _scale = bool(true)
##@cli : Best with odd sizes!
#@cli : Arithmetical difference of a morphological operation of <i>size</i> and <i>size2</i>.
#@cli : Author : <i>KaRo</i>. Latest update : <i>2013/07/09</i>.
fx_karo_oc_diff :
  skip "${1=5}","${2=1}","${3=0}","${4=1}"
  apply_channels "-karo_doc $1,$2,0",$3,$4
  to_rgb

fx_karo_oc_diff_preview :
  gui_split_preview "-fx_karo_oc_diff ${1-4}",$5


#@cli fx_pink : Pink example, _operator(=11), _connect(=0), _smooth(=0), _param(=5), _channel(=0)
#@cli : _operator = 0..19 ("wshedtopo","wshedtopo inv","minima","maxima","heightminima","heightmaxima","grayskel","htkern","htkernu","lvkern","lvkernu","asf","asflin","asfr","asft","asftmed","asftndg","dilatballnum","erosballnum","lintophat")
#@cli : _connect = 0..1 ("Four/x","Eight/y")
#@cli : _smooth = 0..
#@cli : _param = 0..25
#@cli : _channel = 0..22 ("All","RGBA","RGB","Luminance","Blue/red chrominances","Blue chrominance","Red chrominance","Lightness","ab-components","a-component","b-component","Hue","Saturation","Value","Key","Green chrominance","ch-components","c-component","h-component","Red","Green","Blue","Alpha")
#@cli : $ image.jpg +fx_pink , +-
#@cli : $ image.jpg +fx_pink. 12,1,0.582524,10,0,0 +fx_pink.. 12,0,0.582524,10,0,0 +[-1,-2] # asflin in x and y
#@gui Pink operator : fx_pink, fx_pink_preview(1)
#@gui : Pink operator = choice("wshedtopo","wshedtopo inv","minima","maxima","heightminima","heightmaxima","grayskel","htkern","htkernu","lvkern","lvkernu","asf","asflin","asfr","asft","asftmed","asftndg","dilatballnum","erosballnum","lintophat")
#@gui : Connectivity / Dir = choice("Four/x","Eight/y")
#@gui : Smoothness = float(0,0,5)
#@gui : Height/Rep = int(5,0,25)
#@gui : Channel(s) = choice(0,"All","RGBA","RGB","Luminance","Blue/red chrominances","Blue chrominance","Red chrominance","Lightness","ab-components","a-component","b-component","Hue","Saturation","Value","Key","Green chrominance","ch-components","c-component","h-component","Red","Green","Blue","Alpha")
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right")
#@gui : note = link("https://pinkhq.com/hg/pink/file/tip/src/com")
fx_pink :
  skip ${1=11},${2=0},${3=0},${4=5},${5=0} v -
  if   {$1==0}  apply_channels "b $3 pink heightminima,{($2+1)*4},$4 pink wshedtopo,{($2+1)*4}",$5,0
  elif {$1==1}  apply_channels "b $3 pink heightmaxima,{($2+1)*4},$4 pink wshedtopo,{($2+1)*4},i",$5,0
  elif {$1==2}  apply_channels "b $3 pink minima,{($2+1)*4}",$5,0
  elif {$1==3}  apply_channels "b $3 pink maxima,{($2+1)*4}",$5,0
  elif {$1==4}  apply_channels "b $3 pink heightminima,{($2+1)*4},$4",$5,0
  elif {$1==5}  apply_channels "b $3 pink heightmaxima,{($2+1)*4},$4",$5,0
  elif {$1==6}  apply_channels "b $3 pink grayskel,null,4,$4",$5,0
  elif {$1==7}  apply_channels "b $3 pink htkern,null,{($2+1)*4}",$5,0
  elif {$1==8}  apply_channels "b $3 pink htkernu,null,{($2+1)*4}",$5,0
  elif {$1==9}  apply_channels "b $3 pink lvkern,null,{($2+1)*4}",$5,0
  elif {$1==10} apply_channels "b $3 pink lvkernu,null,{($2+1)*4}",$5,0
  elif {$1==11} apply_channels "b $3 pink asf,$4",$5,0
  elif {$1==12}
     if {$2==0} apply_channels "b $3 [0]x2 a z pink asflin,x,$4 s z k.",$5,0
           else apply_channels "b $3 [0]x2 a z pink asflin,y,$4 s z k.",$5,0 fi
  elif {$1==13} apply_channels "b $3 pink asfr,$4",$5,0
  elif {$1==14} apply_channels "b $3 pink asft,null,null,{($2+1)*4},$4",$5,0
  elif {$1==15} apply_channels "b $3 pink asftmed,{($2+1)*4},$4",$5,0
  elif {$1==16} apply_channels "b $3 pink asftndg,null,null,{($2+1)*4},$4",$5,0
  elif {$1==17} apply_channels "b $3 pink dilatballnum,$4",$5,0
  elif {$1==18} apply_channels "b $3 pink erosballnum,$4",$5,0
  elif {$1==19} apply_channels "b $3 pink lintophat,$4",$5,0
  else          apply_channels "b $3 pink heightminima,{($2+1)*4},$4 pink wshedtopo,{($2+1)*4}",$5,0
  fi v +

fx_pink_preview :
  gui_split_preview "-fx_pink ${1-5}",$6

#@gui Pink operator binary: fx_karo_pink_bin, fx_karo_pink_bin_preview(1)
#@gui : Auto-threshold = bool(1)
#@gui : Threshold \% = int(50,0,100)
#@gui : Pink operator = choice(3,"skelpar","skelend","skelcurv","skeleton","barycentre","border","closeball","openball","convexhull","dist","distc","label pla","Lantuejoul")
#@gui : Connectivity / Dir = choice("Four/x","Eight/y")
#@gui : Height/Rep = int(5,-1,25)
#@gui : Algorithm = int(4,0,29)
#@gui : Channel(s) = choice(0,"All","RGBA","RGB","Luminance","Blue/red chrominances","Blue chrominance","Red chrominance","Lightness","ab-components","a-component","b-component","Hue","Saturation","Value","Key","Green chrominance","ch-components","c-component","h-component","Red","Green","Blue","Alpha")
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right")
#@gui : sep = separator(), note = note(Binary operations with Pink externals.)
#@gui : note = note{"Diverse Pink executables in search PATH"}
#@gui : sep = separator(), note = note("<small>Author : <i>KaRo</i>.           Latest update : <i>2014/02/05</i>.</small>")
#@gui : note = link("https://pinkhq.com/hg/pink/file/tip/src/com")
fx_karo_pink_bin :
  skip ${1=1},${2=50},${3=3},${4=0},${5=5},${6=4},${7=0} v -
  if   {$3==0}  apply_channels "if $1 otsu 256 else threshold ${2}% fi pink_skelpar $6,$5 n 0,255",$7,0
  elif {$3==1}  apply_channels "if $1 otsu 256 else threshold ${2}% fi pink_skelend {($4+1)*4},$5 n 0,255",$7,0
  elif {$3==2}  apply_channels "if $1 otsu 256 else threshold ${2}% fi pink_skelcurv $6,{($4+1)*4} n 0,255",$7,0
  elif {$3==3}  apply_channels "if $1 otsu 256 else threshold ${2}% fi pink_skeleton $6,{($4+1)*4} n 0,255",$7,0
  elif {$3==4}  apply_channels "if $1 otsu 256 else threshold ${2}% fi pink barycentre,{($4+1)*4} n 0,255",$7,0
  elif {$3==5}  apply_channels "if $1 otsu 256 else threshold ${2}% fi pink border,{($4+1)*4} n 0,255",$7,0
  elif {$3==6}  apply_channels "if $1 otsu 256 else threshold ${2}% fi pink closeball,$5,$6 n 0,255",$7,0
  elif {$3==7}  apply_channels "if $1 otsu 256 else threshold ${2}% fi pink openball,$5,$6 n 0,255",$7,0
  elif {$3==8}  apply_channels "if $1 otsu 256 else threshold ${2}% fi pink convexhull,3 n 0,255",$7,0
  elif {$3==9}  apply_channels "if $1 otsu 256 else threshold ${2}% fi pink dist,$6 n 0,255",$7,0
  elif {$3==10}  apply_channels "if $1 otsu 256 else threshold ${2}% fi pink distc,$6 n 0,255",$7,0
  elif {$3==11}  apply_channels "if $1 otsu 256 else threshold ${2}% fi pink label,{($4+1)*4},pla",$7,0
  elif {$3==12}  apply_channels "if $1 otsu 256 else threshold ${2}% fi pink lantuejoul,$6 n 0,255",$7,0
  else
  fi

fx_karo_pink_bin_preview :
  gui_split_preview "-fx_karo_pink_bin ${1-7}",$8

#@gui Pink test operator bianca: fx_karo_pink_bianca, fx_karo_pink_bianca_preview(0)
#@gui : ASF smooth size = int(5,1,10)
#@gui : Threshold \% = int(60,0,100)
#@gui : Watershed height min = int(5,0,20)
#@gui : Opening radius = int(1,0,10)
#@gui : Invert = bool(0)
#@gui : Use G instead of B = bool(0)
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right")
#@gui : sep = separator(), note = note(Pink test operator Bianca for RGB image; only B used.)
#@gui : note = note{"Pink executables in search PATH or C:\\Pink\\bin\\ for Windows"}
#@gui : sep = separator(), note = note("<small>Author : <i>KaRo</i>.           Latest update : <i>2012/10/26</i>.</small>")
#@gui : note = link("https://pinkhq.com/hg/pink/file/tip/src/com")
#@cli fx_karo_pink_bianca : Pink test operator bianca
#@cli : ASF smooth size = int(5,1,10)
#@cli : Threshold \% = int(60,0,100)
#@cli : Watershed height min = int(5,0,20)
#@cli : Opening radius = int(1,0,10)
#@cli : Invert = bool(0)
#@cli : Use G instead of B = bool(0)
#@cli : Pink test operator Bianca for RGB image; only B used.
#@cli : Pink executables in search PATH or C:\\Pink\\bin\\ for Windows
#@cli : Author : <i>KaRo</i>.           Latest update : <i>2012/11/18</i>
#@cli : note = link("https://pinkhq.com/hg/pink/file/tip/src/com")
fx_karo_pink_bianca :
  skip "${1=5}","${2=60}","${3=5}","${4=1}","${5=0}","${6=0}"
  if $5 negate fi
  if {!${-is_windows}} exe="label" else exe="C:\Pink\bin\label" fi
  s c if $6 k.. else k. fi
  +pink asf,$1 +- k[-1,-3] threshold. ${2}%
  +pink_wshed.. ,1,$3
  pink. $exe,4,max threshold. 1
  erode_oct.. {$4*2+1} dilate_oct.. {$4*2+1}
  +*[-1,-2] negate.. n[-1,-2] 0,255 a[-1,-2,-4] c k[0]

fx_karo_pink_bianca_preview :
  gui_split_preview "-fx_karo_pink_bianca ${1-6}",$7

#@gui _

# Local Variables:
# mode: sh
# End:
#
# (End of G'MIC custom commands)
