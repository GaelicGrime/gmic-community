#@gmic
### === Version 13 March 08 04:05 EDT 2015  ==================== ###
#@gui <b>Testing</b>
#@gui <i>Gmic Tutorials</i>
#@gui Blur by color : gtutor_blur_img, gtutor_blur_img_preview
#@gui : Range     = choice(3,"XL","VL","L","N","M","VM","XM")
#@gui : Amplitude = float(0.5,0,1)
#@gui : Sep  = separator(), note = note("<small>Author: <i>Garry R. Osgood.</i> Latest update: <i>2014/08/30</i>.</small>")
#@gui : Note = link("Blur by color instructions and tutorial.","http://gmic.eu/tutorial/blur-by-color-filter.shtml")
gtutor_blur_img :
-local[-2,-1]
  -if {s>3}
    -remove_opacity[-1]
  -endif
  range={700*$1+700}
  -rgb2hsl[-1]
  -split[-1] c #[-4]target [-3]H [-2]S [-1]L
  -mul[-1] $2
  -reverse[-2,-1]
  -negate[-1]
  -mul[-1] [-2]
  -reverse[-3,-1]
  -div[-1] 360
  -mul[-1] {2*pi}
  --sin[-1]
  -cos[-2]
  -append[-4,-3] c
  -append[-2,-1] c
  -eigen2tensor[-2,-1]
  -repeat 3
  -smooth[-2] [-1],$range
  -done
  -rm[-1]
-endlocal

gtutor_blur_img_preview :
  -gtutor_blur_img ${^0}

#@cli
#@cli colorwheel : _size>0,_cclock={ 0 | 1 },_angle
#@cli : Generates a square colorwheel in clockface orientation, with zero
#@cli : degrees on top, corresponding to red, and colors transitioning
#@cli : clockwise through green (120 degrees) and blue (240 degrees). size:
#@cli : colorwheel edges, in pixels.  cclock, boolean, if true generates a
#@cli : counterclockwise colorwheel, and angle, degrees, rotates the wheel
#@cli : clockwise (negative: counterclockwise) from its reference orientation.
#@cli : Default values: _size=512, _cclock=0, _angle=0

colorwheel : -check ${1=512}>=1 -skip ${2=0},${3=0}
-e[^-1] "Input colorwheel $1 pixels square; cclockwise=$2; oriented $3 degrees"
-v -
$1,$1,1,1,'x=x-w/2;y=y-h/2;((1-2*!!$2)*(atan2(y,x)*180/pi+90-$3))%360'
  100%,100%,1,2,1 -a[-2,-1] c -hsv2rgb[-1] -nm[-1] [colorwheel]
-v +
# =============================================================== ###
#@gui Hedcut (experimental) : hedcut, gtutor_hedcut_preview(0)
#@gui : note = note("<b>Photometric:</b>")
#@gui : Contrast = float(0.5,0,1)
#@gui : Luminance Level = float(0.5,0,1)
#@gui : sep = separator()
#@gui : note = note("<b>Pattern:</b>")
#@gui : Smoothing = float(0.5,0,1)
#@gui : Size  = float(0.0,0,1)
#@gui : Step = float(0.5,0,1)
#@gui : note = note("<b>Choice:</b>")
#@gui : Quality =  bool(0)
#@gui : Force Gray = bool(1)
#@gui : Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right")
#@gui : sep = separator(), note = note("<small>Author: <i>Garry R. Osgood</i>. Latest update: <i>2015/03/05</i>.</small>")
#@gui : url = link("Hedcut instructions and tutorial","http://gmic.eu/tutorial/hedcut-filter.shtml")
gtutor_hedcut_preview :
  -gui_split_preview "-hedcut ${^0}",$-1
# ---------------------------------------------------------------------------
#@cli hedcut : _contrast=0.5, _lumlevel=0.5, _patsmooth=0.5, _patsize=0.0, _patstep=0.5, _patquality=0 (low=0,high=1), _forcegray=1 (no=0,yes=1)
#@cli : Make a hedcut with a faux intaglio etch pattern. Unless noted, all
#@cli : arguments are floats that range from 0.0 to 1.0. contrast: larger
#@cli : values increase contrast. lumlevel: larger values increases
#@cli : brightness. patsmooth: larger values forces pattern to follow
#@cli : geometry; lower induces turbulence. patsize: larger values increases
#@cli : pattern size. patstep: values alter pattern geometry. Adjust to
#@cli : taste. patquality: Boolean flag. 1=True/On/Yes. Renders oversize for
#@cli : quality.  Longer rendering time and more memory will be required (2
#@cli : GiB minimum for 3000x3000).  forcegray: Boolean
#@cli : flag. 1=True/On/Yes. RGB input will be forced to single channel
#@cli : grayscale before processing and returned to RGB after. Output: image
#@cli : in 0-255 range. Channels match input.
hedcut : -check "${1=0.5}<=1 && $1>=0 && ${2=0.5}<=1 && $2>=0 && ${3=0.5}<=1 && $3>=0 && ${4=0.0}<=1 && $4>=0 && ${5=0.5}<=1 && $5>=0 && isbool(${6=0}) && isbool(${7=1})"
-echo[^-1] "Applying faux intaglio etch to selected images. Contrast: "{$1}". Lumenance Level: "$2". Pattern smoothing: "$3". Pattern size: "$4". Pattern stepping: "$5". Quality (low=0,1=high): "$6". Force gray (0=no,1=yes):"$7"."
-verbose -
con={(9.0^$1)}
llv={round(20000*(0.5-$2))/100}
smt={(round((100*(10^$3)/2))/100)+4*$4}
psz={0.0001*(1+99*(1-$4))}
del={$psz+round(1000*(10^(-$4-2)))/1000}
stp={round(2+10*$5)}
qfc={$6}
gry={$7}
tol=30
spn=0
-repeat $!
   -local[$>]
      -remove_opacity[-1]
      -if {$gry}
         -luminance[-1]
      -endif
      -split[-1] c
      -repeat $!
         -local[$>]
            -if $qfc
               --resize2dx[-1] 400%,5
            -else
               [-1]
            -endif
            spn={(iM-im)/2}
            -mv[-1] 0
            -_multigrad[-1] $stp,$tol,$smt
            -bandpass[-1] {$psz},{$del}
            -orientation[-1]
            -if $qfc
               -resize[-1] [-2],[-2],[-1],[-1],5,1
               -blur[-1] {$con},1,1
            -else
               -blur[-1] {$con/4},1,1
            -endif
            -normalize[-2,-1] {-$spn},{$spn}
            -add[-1] [-2]
            -normalize[-1] -{(iM-im)/2},{(iM-im)/2}
            -rm[-2]
            -threshold[-1] {$llv}
            -if $qfc
               -resize2dx[-1] 25%,5
            -endif
            -normalize[-1] 0,255
         -endlocal
      -done
      -append c
      -if {$gry}
         -to_rgb
      -endif
   -endlocal
-done
-verbose +
# ---------------------------------------------------------------------------
#@cli _multigrad : _stepsize=5 _tolerance=10 _smooth=5
_multigrad : -skip ${1=50},${2=10},${3=5}
smt={$3}
stp={$1}
tol={$2}
-repeat $!
   -local[$>]
      -blur {$smt}
      -normalize_local 3,32,4%,2%,1,0,255
      -gradient_norm[-1]
      ld={log(iM)}
      -add[-1] 1e-10
      -log[-1]
      -div[-1] {$ld}
      -cut[-1] 0,1
      --ge[-1] $tol%
      -if {round($smt)}
         -erode_circ[-1] {round(1.5*$smt)}
         -dilate_circ[-1] {round(1.5*$smt)}
      -endif
      -negate[-2]
      -normalize[-2] 0,1
      --distance[-1] 1,[-2],0
      -rm[-3]
      -round[-1] 2
      -mod[-1] {1+$stp}
      -threshold 90%
      -add[-2,-1]
      -mul[-1] -1
      -add[-1] 1
   -endlocal
-done
# =============================================================== ###
#@cli tiletex : _texscale=8 autoangle=-1 _keepimag=0
#@cli : Renders a tilable texture on selected images, taking polar formatted
#@cli : (magnitude, phase angle) seed values from pairs of selected,
#@cli : alternating "Magnitude" and "Angle" images or, if these are constant
#@cli : black, then from internally generated random values. Unless
#@cli : 'autoangle' is positive, input images must form "Magnitude" and
#@cli : "Angle" pairs and each pair must have an equal number of
#@cli : channels. Produces "real" and "imaginary" output images (But note
#@cli : _keepimag, below). 'texscale' sets the size of a square window around
#@cli : the spectral origin where random seeds are set. Larger 'texscales'
#@cli : settings admit higher frequency coefficients, giving rise to finer
#@cli : output details. 'texscale' ranges from 1 upward and defaults to 8. It
#@cli : is ignored if the user has preset coefficients within the input
#@cli : images. Setting 'autoangle' to a positive value in the range [0, 255]
#@cli : eliminates the need for providing "Angle" input images. The provided
#@cli : argument is applied as a default phase angle to all "Magnitude" data
#@cli : and input images are taken to be "Magnitude" data only. 'keepimag' is
#@cli : a trivalued flag: 0, 1 or 2. '0' requests both "Real" and "Imaginary"
#@cli : output pairs and is the default. '1' requests the "Real" output image
#@cli : only; '2' requests the "Imaginary" output image only.
#@cli : Output images are unnormalized and range from negative to positive
#@cli : values, Normalize data accordingly for use with bitmap editors.
tiletex : -check "${1=8}>0 && isval(${2=-1.0}) && ${3=0}>=0 && ${3}<3"
-verbose -
-if {$2>=0}
   addenda2="Common default angle: $2."
-else
   addenda2="Explicit angles from provided images."
-endif
addenda3="Real and imaginary"
-if {$3!=0}
   -if {$3==1}
      addenda3="Real"
   -else
      addenda3="Imaginary"
   -endif
-endif
-verbose +
-echo[^-1] "Rendering tilable texture on $? at window size $1 "$addenda2". "$addenda3" output to be provided."
-verbose -
rsz={$1}
impla={2*pi*$2/255.0}
all={$3}
iszed=1
ccc={0,s}
badccc="Selected images have different number of channels. Have you accidently included alpha channels in some (but not all) images?"
-repeat $!
  -if {$>,round(ia)!=0" || "round(iM-im)!=0}
    iszed=0
    -break
  -endif
-done
-if $iszed # Case 0: All images black. Generate random values
   -repeat $!
      -local[$<]
         -if {$<,$ccc!=s}
            -error $badccc
         -endif
         -input [-1]
         -append[-2,-1] c
         -input {2*$rsz+1},{2*$rsz+1},1,{s},(2*u-1)*{wh}
         -image[-2] [-1],{({-2,w}-w)/2},{({-2,h}-h)/2},0,0,1
         -remove[-1]
      -endlocal
   -done
-else # Case 1: Coefficients in polar format have been set in at least one selected image.
   -if {$impla<0} # Case 1.1: $impla not set (still negative guardian value). Images must be <radius>, <angle> image pairs.
      -if {$!%2!=0}
         -error "Selected images contain data, but selection count is odd. Cannot determine angles for some coefficients. Consider setting an implied angle or providing an even number of images."
      -endif
      -repeat {$!/2}
         -local[{2*$<},{2*$<+1}]
            -if {$ccc!={$<,s}" || "$ccc!={{$<+1},s}}
               -error $badccc
            -endif
            -split[-2,-1] c
            -repeat {$!/2}
                -local[{$>},{$!/2+$>}]
                   -div[0,1] 255
                   -mul[1] {2*pi}
                   -polar2complex[0,1]
                -endlocal
            -done
            -append[0--1] c
         -endlocal
      -done
   -else # Case 1.2: Odd numbered selection permitted when $impla is not negative. Furnishes constant angle field.
      -repeat $!
         -local[$<]
            -if {$ccc!={$<,s}}
               -error $badccc
            -endif
            -input [0]
            -split[-2,-1] c
            -repeat {$!/2}
               -local[{$>},{$!/2+$>}]
                  -div[0,1] 255
                  -mul[0] {cos($impla)}
                  -mul[1] {sin($impla)}
               -endlocal
            -done
            -append[0--1] c
         -endlocal
      -done
   -endif
-endif
-repeat $!
   -local[$<]
      -shift[-1] {-round(w/2)},{-round(h/2)},0,0,2
      -split[-1] c,2
      -ifft[-2,-1]
      -if {$all!=0}
         -if {$all==1}
            -remove[-1]
         -else
            -remove[-2]
         -endif
      -endif
   -endlocal
-done
-verbose +
#@gui __
# ========================================================== #
#@gui <b>Artistic</b>
#@gui Finger paint : gtutor_fpaint, gtutor_fpaint_preview(0)
#@gui : note = note("<b>Paint Detail</b>")
#@gui : Finger size = float(0.5,0,1)
#@gui : Keep detail = float(0.5,0,1)
#@gui : Bristle size = float(0.0,0,1)
#@gui : Edge detect includes chroma = bool(0)
#@gui : sep = separator()
#@gui : note = note("<b>Render Detail</b>")
#@gui : Light direction = float(45.0,0,360.0)
#@gui : Shadow = float(0.5,0,1)
#@gui : Highlight = float(0.5,0,1)
#@gui : Specular = float(0.5,0,1)
#@gui : Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right")
#@gui : sep = separator(), note = note("<small>Author: <i>Garry R. Osgood</i>. Latest update: <i>2015/02/26</i>.</small>")
#@gui : Note = link("Finger paint instructions and tutorial.","http://gmic.eu/tutorial/fingerpainting.shtml")
gtutor_fpaint :
  -repeat $!
    -local[$>]
      hasalpha={s>3}
      -if {$hasalpha}
        -split_opacity[-1]
        -reverse[-2,-1]
      -endif
      # Find Finger Strokes
      lh={h}
      --blur[-1] {$1/1.25}%
      -if $4
        --luminance[-1]
        -rgb2hsl[-2]
        -split[-2] c
        -rm[-4,-2]
        -quantize[-2,-1] {round(5+15*(1-$1))},1,1
        -gradient_norm[-2,-1]
        -normalize[-2,-1] 0,255
        -add[-2,-1]
      -else
        -quantize[-1] {round(5+15*(1-$1))},1,1
        -gradient_norm[-1]
        -normalize[-1] 0,255
      -endif
      -threshold[-1] {80-60*$2}%
      -dilate_circ[-1] 8
      -thinning[-1]
      -dilate_circ[-1] 3
      # Smoothing finger strokes
      --diffusiontensors[-1] 0.1,0.85,0.3,{4+8*$1}
      -if {$2<1}
        [-1]
        -resize2dy[-3,-1] {$lh*(0.25+0.75*$2)},5
        -repeat 2
          -smooth[-3] [-1],{400*(1-$2)}
        -done
        -rm[-1]
        -resize[-2] [-3],[-3],[-2],[-2],5,0
      -endif
      # Modify the diffusion tensor field
      -eigen[-1]
      -split[-2] c
      -fill_color[-3] {1-0.15*$3}
      -fill_color[-2] {0.15*$3}
      -append[-3,-2] c
      -eigen2tensor[-2,-1]
      # Emulating Paint
      98%,98%,1,1 -noise[-1] {20-10*$3},2 ==. 1
      -resize[-1] [-2],[-2],[-1],[-1],0,0,0.5,0.5,0.5,0.5
      -to_rgb[-1]
      -mul[-1] [-4]
      --ac[-4] "-mul 0.6","hsl_s"
      -ac[-1]  "-mul 0.85","hsl_l"
      # Smooth Over and Under Colors
      -repeat 2
        -smooth[-2,-1] [-3],{100*(6-5*$2)}
      -done
      # Lighting
      # Elevation Map
      --luminance[-2]
      -normalize[-1] 0,0.7
      --normalize[-5] 0,1
      -add[-2,-1]
      -normalize[-1] 0,1
      -blend[-3,-2] add
      # Generate Direction Field
      -gradient[-1]
      -append[-2,-1] c
      100%,100%,1,2
      -if $6
        # Shadow
        -fill_color[-1] {cos(2*((180+$5)%360)*pi/360)},{sin(2*((180+$5)%360)*pi/360)}
        --mul[-2,-1]
        -compose_channels[-1] add
        -cut[-1] {ia},{iM}
        -normalize[-1] 0,1
        -to_rgb[-1]
        -mul[-1] [-7]
        -negate[-1]
        -normalize[-1] 0,255
        -blend[-4,-1] multiply,$6
      -endif
      -if $7
        # Highlight
        -fill_color[-1] {cos(2*$5*pi/360)},{sin(2*$5*pi/360)}
        --mul[-2,-1]
        -compose_channels[-1] add
        -cut[-1] {ia},{iM}
        -normalize[-1] 0,1
        -to_rgb[-1]
        -mul[-1] [-7]
        -normalize[-1] 0,255
        -blend[-4,-1] screen,$7
      -endif
      -if $8
        # Specular
        -fill_color[-1] {cos(2*$5*pi/360)},{sin(2*$5*pi/360)}
        --mul[-2,-1]
        -compose_channels[-1] add
        -cut[-1] {ia},{iM}
        -to_rgb[-1]
        -normalize[-1] 0,255
        -blend[-4,-1] screen,$8
      -endif
      -rm[-1,-2,-4,-5,-6]
      -ac[-1] "-apply_curve 1,0,32,127,180,255,255","hsl_s"
      -apply_gamma[-1] 1.4
      -if {$hasalpha}
        -reverse[-2,-1]
        -append[-2,-1] c
      -endif
    -endlocal
  -done
gtutor_fpaint_preview :
  -gui_split_preview "-gtutor_fpaint ${^0}",$-1
#@gui _
# ========================================================== #
#@gui <b>Rendering</b>
#@gui Hair locks : gtutor_hairlock, gtutor_hairlock_preview(0)
#@gui : note = note("<b>Geometry</b>")
#@gui : Spread = float(0.5,0,1)
#@gui : Thickness = float(0.5,0,1)
#@gui : Length = float(0.5,0,1)
#@gui : sep = separator()
#@gui : note = note("<b>Color</b>")
#@gui : Color = color(255,255,0,255)
#@gui : Variance = float(0.5,0,1)
#@gui : sep = separator()
#@gui : note = note("<b>Lighting</b>")
#@gui : Azimuth = float(45,0,360)
#@gui : Highlight = float(0.5,0,1)
#@gui : Specular = float(0.5,0,1)
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right")
#@gui : sep = separator(), note = note("<small>Author: <i>Garry R. Osgood</i>. Latest update: <i>2014/12/11</i>.</small>")
#@gui : Note = link("Hairlock instructions and tutorial.","http://gmic.eu/tutorial/the-hairlock-filter.shtml")

gtutor_hairlock :
  # Harvest color choices from GUI & translate to HSL (Thank you, David T. !)
  ($4^$5^$6)
  -rgb2hsl[-1]
  hue={i[0]}
  sat={0.97*i[1]}
  light={i[2]}
  opac={$7/255}
  var={0.1*$8}
  -rm[-1]
  # Iterate over selections ....
  -repeat $!
    -local[$>]
      # Compose Hair Shape Mask and Tensor Field
      --diffusiontensors[-1] 1,0,0.1,{8*$1},0
      -diffusiontensors[-2] 0,1,0.1,{20*$1},0
      -eigen[-2,-1]
      -rm[-1]
      -split[-1] c
      -rm[-1]
      -mul[-1] -1
      -add[-1]
      -normalize[-1] 0,1
      -mv[-1] 0
      -split[-2] c
      -rm[-3]
      -mul[-2] -1
      -add[-2] 1
      --mul[-2] 0
      -reverse[-1,-2]
      -append[-3,-2] c
      -eigen2tensor[-2,-1]
      # Make Base Noise for Hair Strands
      -input 100%,100%,1,3
      -_hcolor[-1] $hue,$sat,$light,$var,{0.05+0.5*$2},0.98,1
      # Thicken Hair
      -dilate_circ[-1] {2+2*$2}
      --luminance[-1]
      -gt[-1] 0.01
      -mul[-4,-1]
      -normalize[-1] 0,255
      -replace_color[-1] 0,0,0,0,0,$4,$5,$6
      # Smoothing
      -reverse[-2,-1]
      -repeat 3
        -smooth[-3,-2] [-1],{5+595*$3}
      -done
      -rm[-1]
      #Hilight
      -reverse[-2,-1]
      -sharpen[-1] {1.2*(1-$2)}
      -normalize[-1] 0,1
      --_hlight[-1] $9,$10,1
      -mul[-1] [-3]
      -add[-3,-1]
      # Specular
      --_hlight[-1] $9,$10,$11
      -input [-3],[-3],[-3],[-3],255,255,255
      -image[-4] [-1],0,0,0,0,1,[-2]
      -keep[-4,-3]
      -normalize[-1] 0,{51*(1+4*$opac)}
      -append[-2,-1] c
      -normalize[-1] 0,255
    -endlocal
  -done

gtutor_hairlock_preview :
  -gui_split_preview "-gtutor_hairlock ${^0}",$-1

_hlight : -check "${1=45}<=360 && $1>=0 && ${2=0.5}>=0 && ${3=0.5}>=0"
  -if {$2>0}
    -resize2dx[-1] 400%,5
    -blur[-1] 2,1
    -gradient_orientation[-1] 2
    -append[-2,-1] c
    -input ({cos(2*$1*pi/360)}^{sin(2*$1*pi/360)})
    -resize[-1] [-2],[-2],[-1],[-1],1
    -mul[-2,-1]
    -compose_channels[-1] add
    -cut[-1] {ia},{iM}
    -normalize[-1] {195*$3-200},0
    -exp[-1]
    -resize2dx[-1] 25%,5
    -normalize[-1] 0,{$2}
  -else
    -fill_color[-1] 0
  -endif
  -to_rgb[-1]

#@cli _hcolor : h_mean,s_mean,l_mean,var,density,coverage,is_mod
#@cli : Plot in selected images impulses centered around h,s,l means +/- var
#@cli : at relative 0<=density<=1 wrt 1/2 image area: related to density=1
#@cli : coverage: wrt image area, relative coverage 0<=coverage<=1 smaller
#@cli : values give rise to unplotted regions around edges equal 1.0-coverage.
#@cli : is_mod, boolean, if true, wraps negative values around to one.
#@cli : Default values: mean=40,var=0,density=0.5,coverage=1,is_mod=True
_hcolor : -skip ${1=40},${2=0.5},${3=0.5},${4=0},${5=0.5},${6=1},${7=1}
-repeat $!
  -local[$>]
    pcnt={0.5*w*h*$5}
    {$pcnt},1,1,1,({0,w}*(1-$6)/2)+{0,w}*$6*u
    {$pcnt},1,1,1,({0,h}*(1-$6)/2)+{0,h}*$6*u
    {$pcnt},1,1,1
    ra={$1/360.0}
    -if $7
      {$pcnt},{s},1,1,360.0*($ra+$4*(2*g-1))%1
      {$pcnt},{s},1,1,($2+$4*(2*g-1))%1
      {$pcnt},{s},1,1,($3+$4*(2*g-1))%1
    -else
      {$pcnt},{s},1,1,360.0*($ra+$4*(2*g-1))
      {$pcnt},{s},1,1,$2+$4*(2*g-1)
      {$pcnt},{s},1,1,$3+$4*(2*g-1)
    -endif
    -append[^0] y
    -pointcloud[-1] 0,{-2,w},{-2,h},1,{-2,s}
    -rm[-2]
    -hsl2rgb[-1]
  -endlocal
-done
#@gui _

# Local Variables:
# mode: sh
# End:
#
# (End of G'MIC custom commands)
