#@gmic
#
#  File        : afre.gmic
#                ( G'MIC commands file )
#
#  Description : Personal G'MIC filters by afre.
#
#  Copyright   : Alan Kwan
#                ( https://discuss.pixls.us/u/afre )
#
#  License     : CeCILL v2.0
#                ( http://www.cecill.info/licences/Licence_CeCILL_V2-en.html )
#
#  This software is governed by the CeCILL  license under French law and
#  abiding by the rules of distribution of free software.  You can  use,
#  modify and/ or redistribute the software under the terms of the CeCILL
#  license as circulated by CEA, CNRS and INRIA at the following URL
#  "http://www.cecill.info".
#
#  As a counterpart to the access to the source code and  rights to copy,
#  modify and redistribute granted by the license, users are provided only
#  with a limited warranty  and the software's author,  the holder of the
#  economic rights,  and the successive licensors  have only  limited
#  liability.
#
#  In this respect, the user's attention is drawn to the risks associated
#  with loading,  using,  modifying and/or developing or reproducing the
#  software by the user in light of its specific status of free software,
#  that may mean  that it is complicated to manipulate,  and  that  also
#  therefore means  that it is reserved for developers  and  experienced
#  professionals having in-depth computer knowledge. Users are therefore
#  encouraged to load and test the software's suitability as regards their
#  requirements in conditions enabling the security of their systems and/or
#  data to be ensured and,  more generally, to use and operate it in the
#  same conditions as regards security.
#
#  The fact that you are presently reading this means that you have had
#  knowledge of the CeCILL license and that you accept its terms.
#

#@gui _<b>Colors</b>
#---------------------

#@gui Darken Sky : fx_darken_sky, fx_darken_sky_preview(1)
#@gui : Strength = float(.75,0,1)
#@gui : Contrast = float(5,0,5)
#@gui : Blend Mode = choice(0,"Overlay","Softlight")
#@gui : sep = separator(), Normalize = bool(1)
#@gui : Brighten = float(0,0,1)
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep = separator(), note = note("Based on <a href="https://discuss.pixls.us/t/deep-blue-sky-effect/4506"><i>Carmelo_DrRaw</i>'s tutorial</a>")
#@gui : sep = separator(), note = note("<small>Author: <i><a href="https://discuss.pixls.us/u/afre">afre</a></i>.      Latest update: <i>2017/01/07</i>.</small>")
fx_darken_sky :
  mode=${arg\ 1+$3,overlay,softlight}
  repeat $! l[$>] split_opacity l[0]
    if iM>255 -/ 257 bit=1 fi
    +l
      s c rm.. remove_hotpixels.. 5 guided.. .,1,{.01*255^2}
      - - {im} min 128 - 128 * {(5+$2)/10} + 128
    endl
    blend $mode,$1
    if $4 n 0,255 fi
    apply_curve 1,0,0,{ia},{ia+(sqrt(iv)*$5/2)},255,255
    if $bit * 257 fi
  endl a c endl done

fx_darken_sky_preview :
  gui_split_preview "fx_darken_sky $*",$-1


#@gui _<b>Testing</b>
#---------------------
#@gui afre

#@gui Vigrect : afre_vigrect, afre_vigrect_preview(0)
#@gui : note = note("<strong>Add rectangular vignette.\n</strong>* Negative strength will brighten periphery.\n\n<strong>Filter by <a href="https://discuss.pixls.us/u/afre">afre</a> 2017-2019.</strong>\n\n")
#@gui : Size = int(50,1,100)
#@gui : Strength = int(75,-500,500)
#@gui : Blur = int(10,1,50)
#@gui : Left-Right = int(50,0,100)
#@gui : Up-Down = int(50,0,100)
#@cli afre_vigrect : 1<=size<=100, -500<=_strength<=500, 1<=_blur<=50, 0<=_position_x<=100, 0<=_position_y<=100
#@cli : Add rectangular vignette of selected images. Negative strength will brighten periphery.
#@cli : Default values: 'size=50', 'strength=75', 'blur=10', 'position_x=50' and 'position_y=50'.
afre_vigrect : check "${1=50}>=1 && ${2=75}>=-500 && ${3=10}>=1 && ${4=50}>=0 && ${5=50}>=0 &&
    $1<=100 && $2<=500 && $3<=50 && $4<=100 && $5<=100"
  e[] "[afre]^_^) vigrect: Add rectangular vignette of image$? using size=$1, strength=$2, blur=$3, position_x=$4, position_y=$5."
  v - repeat $! l[$>] iM={iM} min={min(w,h)}
    s={$min/100*(50.5-$1/2)} tx={$min/100*($4-50)} ty={$min/100*($5-50)}
    +f x<$s+$tx||x>w-$s+$tx||y<$s+$ty||y>h-$s+$ty
    distance. 0 b. {$min/100*$3} -. {im} *. {$2/100} -
  c 0,$iM endl done v +

afre_vigrect_preview :
  afre_vigrect $*

#@gui Vigcirc : afre_vigcirc, afre_vigcirc_preview(0)
#@gui : note = note("<strong>Add circular vignette.\n</strong>* Negative strength will brighten periphery.\n\n<strong>Filter by <a href="https://discuss.pixls.us/u/afre">afre</a> 2019.</strong>\n\n")
#@gui : Size = int(90,50,150)
#@gui : Strength = int(75,-500,500)
#@gui : Left-Right = int(50,0,100)
#@gui : Up-Down = int(50,0,100)
#@cli afre_vigcirc : 50<=size<=150, -500<=_strength<=500, 0<=_position_x<=100, 0<=_position_y<=100
#@cli : Add circular vignette of selected images. Negative strength will brighten periphery.
#@cli : Default values: 'size=90', 'strength=75', 'position_x=50' and 'position_y=50'.
afre_vigcirc : check "${1=90}>=50 && ${2=75}>=-500 && ${3=50}>=0 && ${4=50}>=0 &&
    $1<=150 && $2<=500 && $3<=100 && $4<=100"
  e[] "[afre]^_^) vigcirc: Add circular vignette of image$? using size=$1, strength=$2, position_x=$3, position_y=$4."
  v - repeat $! l[$>] iM={iM} min={min(w,h)}
    +f 1 circle. $3%,$4%,{($min/2-2)/100*$1}
    distance. 0 b. 1 -. {im} *. {$2/100} -
  c 0,$iM endl done v +

afre_vigcirc_preview :
  afre_vigcirc $*

#@gui Gamify : fx_gamify, fx_gamify_preview(1)
#@gui : Lightness = int(50,50,60)
#@gui : Chroma = float(2,1.1,5)
#@gui : sep = separator(), Normalize = bool(1)
#@gui : Contrast = float(1,1,1.5)
#@gui : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left","Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep = separator(), note = note("Filter by <i>afre</i>. Latest update: <i>2017-01-05</i>.")
fx_gamify :
  if $3 n 0,255 fi
  rgb2lab lab2lch
  s c n... $1,100 *.. $2 a c
  lch2lab lab2rgb
  split_details 2
  l.. adjust_colors 0,{-$4/1.5*20} endl
  *. $4
  + c 0,255

fx_gamify_preview :
  gui_split_preview "fx_gamify $*",$-1

#@gui Edge : afre_edge, afre_edge_preview(0)
#@gui : note = note("<strong>Compute edges. &nbsp; Filter by <a href="https://discuss.pixls.us/u/afre">afre</a> 2019.</strong>\n\n")
#@gui : Thinning = int(1,1,5)
#@gui : Recovery = float(1,.5,2)
#@gui : Brightness = float(1,.5,2)
#@gui : Details = float(1,.5,2)
#@cli afre_edge : 5>=thinning>=1, 2>=_recovery>=.5, 2>=_brightness>=.5, 2>=_details>=.5
#@cli : Compute edge of selected images.
#@cli : Default values: 'thinning=1', 'recovery=1', 'brightness=1' and 'details=1'.
afre_edge : check "${1=1}>=1 && ${2=1}>=.5 && ${3=1}>=.5 && ${4=1}>=.5 &&
    $1<=5 && $2<=2 && $3<=2 && $4<=2"
  e[] "[afre]^_^) edge: Compute edge of image$?."
  v - repeat $! l[$>]
    afre_gnorm ic,iM={[ic,iM]} r={[im,iM]} ^ {1/$4} n $r
    repeat $1 +afre_box 1 afre_gnorm. r={[im,iM]} ^. $2 n. $r - done c $ic,$iM ^ {1/$3} n 0,$iM
  endl done v +

afre_edge_preview :
  afre_edge $*

#@gui Hessian Norm : fx_hnorm, fx_hnorm_preview(0)
#@gui : Strength = float(1,.5,1.5)
#@gui : Contrast = int(50,1,99)
#@gui : Invert = bool(0)
#@gui : sep = separator(), note = note("Filter by <i><a href="https://discuss.pixls.us/u/afre">afre</a></i>. Latest update: <i>2018-05-09</i>.")
fx_hnorm :
  afre_hnorm ^ $1
  c 0,$2%
  if $3 negate fi
  n 0,255

fx_hnorm_preview :
  fx_hnorm $*

#@gui Clean Text : afre_cleantext, afre_cleantext_preview(0)
#@gui : note = note("<strong>Clean scanned text. &nbsp; Filter by <a href="https://discuss.pixls.us/u/afre">afre</a> 2019.</strong>\n\n")
#@gui : Clean = int(8,0,10)
#@gui : Range = float(1,0.2,1)
#@gui : Black = int(80,0,100)
#@gui : White = int(95,0,100)
#@cli afre_cleantext : 0<=clean<=10, 0.2<=_range<=1, 0<=_black<=100, 0<=_white<=100
#@cli : Clean scanned text.
#@cli : Default values: 'clean=8', 'range=1', 'black=80' and 'white=95'.
afre_cleantext : check "${1=8}>=0 && ${2=1}>=0.2 && ${3=80}>=0 && ${4=95}>=0 &&
    $1<=10 && $2<=1 && $3<=100 && $4<=100"
  e[] "[afre]^_^) cleantext: Clean scanned text using clean=$1, range=$2, black=$3, white=$4."
  v - c={(11-$1)*2+1} +dilate $c erode. $c - n 0,255
  retinex , norm n 0,1 f 1-gauss(i,$2)
  if $3!=$4 c $3%,$4% else c $3%,{$4+.5}% fi n 0,255 round v +

afre_cleantext_preview :
  afre_cleantext $*


#@cli Core Commands
#---------------------

#@cli afre_gnorm :
#@cli : Compute gradient norm of selected images.
afre_gnorm :
  e[] "[afre]^_^) gnorm: Compute gradient norm of image$?."
  v - repeat $! l[$>] g sqr s c + sqrt endl done v +

#@cli afre_hnorm :
#@cli : Compute Hessian norm of selected images.
afre_hnorm :
  e[] "[afre]^_^) hnorm: Compute Hessian norm of image$?."
  v - repeat $! l[$>] hessian sqr s c + sqrt endl done v +

#@cli afre_y50 : colour_space={ 0=Rec.709 | 1=Rec.2020 }
#@cli : Compute D50 luminance of selected images.
#@cli : Default value: 'colour_space=1'.
afre_y50 : skip ${1=1}
  v - if !isbool($1) v + error[] " * (>_<) * $0: Parameter must be '0' (Rec.709) or '1' (Rec.2020)." fi
  if $1 Y="Rec.2020" else Y="Rec.709" fi
  v + e[] "[afre]^_^) y50: Compute luminance ("$Y") of image$?." v -
  repeat $! l[$>]
    if s==3 sh 0 sh[0] 1 sh[0] 2
      if $1 *[1] 0.27904 *[2] 0.67535 *[3] 0.04561  # Rec.2020
      else *[1] 0.22248840 *[2] 0.71690369 *[3] 0.06060791 fi # Rec.709
      +[1-3] rm[1] channels 0
    elif s!=1 r={[im,iM]} norm n $r fi
  endl done v +

#@cli afre_box : radius>=1, _gaussian={ 0 | 1 }, _boundary_conditions={ 0=dirichlet | 1=neumann }
#@cli : Blur selected images with a soft box filter.
#@cli : Default values: 'radius=1', 'gaussian=1' and 'boundary_conditions=1'.
afre_box : check "${1=1}>=1 && isbool(${2=1}) && isbool(${3=1})"
  v - if $2 g="soft box" else g="box" fi w={$1*2+1} v +
  e[] "[afre]^_^) box: Blur image$? with a "$w{`"120"`}$w" "$g" filter."
  v - repeat $! l[$>]
    . $w,$w f[^0] 1 if $2 gaussian. {100/3}% fi
    +convolve[1] [2],$3 convolve[0] [2],$3 k[0,3] /
  endl done v +


# Local Variables:
# mode: sh
# End:
#
# (End of G'MIC custom commands)
