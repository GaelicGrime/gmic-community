#@gmic

# Description: G'MIC custom command file
# Defines a set of image filters for use with the G'MIC program/plugin
#
# Author: garagecoder
# Date: 4th December 2012
# Contact: garagecoder@gmail.com
#
# This software is governed by the CeCILL  license under French law and
# abiding by the rules of distribution of free software.  You can  use,
# modify and/ or redistribute the software under the terms of the CeCILL
# license as circulated by CEA, CNRS and INRIA at the following URL
# "http://www.cecill.info".
#
# As a counterpart to the access to the source code and  rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty  and the software's author,  the holder of the
# economic rights,  and the successive licensors  have only  limited
# liability.
#
# In this respect, the user's attention is drawn to the risks associated
# with loading,  using,  modifying and/or developing or reproducing the
# software by the user in light of its specific status of free software,
# that may mean  that it is complicated to manipulate,  and  that  also
# therefore means  that it is reserved for developers  and  experienced
# professionals having in-depth computer knowledge. Users are therefore
# encouraged to load and test the software's suitability as regards their
# requirements in conditions enabling the security of their systems and/or
# data to be ensured and,  more generally, to use and operate it in the
# same conditions as regards security.
#
# The fact that you are presently reading this means that you have had
# knowledge of the CeCILL license and that you accept its terms.

#@gimp _<b>Artistic</b>

#@gimp Aurora : gcd_aurora, gcd_aurora(1)
#@gimp : note = note("<i>Simple aurora effect filter</i>"), sep = separator()
#@gimp : Vertical Amount = float(6,0,50)
#@gimp : Horizontal Amount = float(1,0,50)
#@gimp : Blend Mode = choice(0,"None","Average")
#@gimp : sep = separator(), note = note("<small>Author : <i>Garagecoder</i>.      Latest update : <i>2013/02/09</i>.</small>")
gcd_aurora : -skip ${1=6},${2=1},${3=0}
  -repeat $! -l[$>]
    -to_rgb --deriche $1%,2,y -deriche[-1] $2%,0,x
    -c[-1] 0,255 -n[-1] 0,255
    -if $3 -blend average -else -k[-1] -endif
  -endl -done

#@gimp _<b>Black &amp; white</b>

#@gimp Multi-Layer Etch : gimp_gcd_layeretch, gimp_gcd_layeretch(2)
#@gimp : note = note("<u>Etch with selectable number of layers</u>")
#@gimp : note = note("<b>Warning: With high number of layers this can be VERY slow!</b>")
#@gimp : sep = separator()
#@gimp : Total Layers = int(11,2,16)
#@gimp : White Layers = int(4,1,15)
#@gimp : Etch Tones = int(12,2,32)
#@gimp : Tone Blur = float(0.12,0,1)
#@gimp : Noise Level = int(100,5,200)
#@gimp : Dark Length = float(8.5,0,20)
#@gimp : Bright Length = float(5,0,20)
#@gimp : Start Angle = int(0,0,180)
#@gimp : Random Angle = int(0,0,45)
#@gimp : Max Curve = int(3,0,20)
#@gimp : Gamma = float(1,0.01,2)
#@gimp : Spread Angles = bool(1)
#@gimp : Fast Resize = bool(0)
#@gimp : sep = separator(), note = note("<small>Author : <i>Garagecoder</i>.      Latest update : <i>2012/12/21</i>.</small>")
gimp_gcd_layeretch : -skip ${1=16},${2=7},${3=14},${4=0.12},${5=100},${6=5},${7=4.65},${8=0},${9=0},${10=3},${11=1},${12=1},${13=0}
  -repeat $! -l[$>]
    w={w} h={h} sc=800 ml=$1 wl={min($2,$ml-1)}
    nwl={$ml-$wl} nwl={$nwl+($nwl%2==0)}
    -if {!$13} nw=$w nh=$h
    -elif {w>h} nw={min($sc,w)} nh={$nw/w*h}
    -else nh={min($sc,h)} nw={$nh/h*w} -endif
    -to_rgb[0] [0] -r[1] $nw,$nh
    -norm[1] -n[1] 0,255 --tones[1] $ml
    -repeat {$ml-1} -+[{-$<-1}] [{-$<-2}] -done
    -b[-$ml--1] $4%
    -repeat $ml
      pc={($>+1)/$ml} msk={2+$>} {w},{h},1,1,0
      -if $12 ang={$>/$nwl} -else ang=$pc -endif
      -if {$<>=$wl}
        -noise[-1] {(1-$pc)*$5},2
        -blur_linear[-1] {$6+$pc*($7-$6)}%,0,{$ang*360+u(-$9,$9)+$8}
        -quantize[-1] $3,0 -deform[-1] {u*$10+1}
      -endif
      -r[-1] $nw,$nh -n[-1] 0,255
      -mul[$msk,-1] -progress {$pc*100}
    -done
    -add[-$ml--1] -c[-1] 0,255
    -n[-1] 0,255 -negative[-1] -apply_gamma[-1] $11
    -if $13 -r[-1] $w,$h,1,3,5 -c[-1] 0,255 -endif
    -keep[-1]
  -endl -done

#@gimp Threshold Etch : gimp_gcd_etch, gimp_gcd_etch_preview(1)
#@gimp : note = note("<u>Replace tones with noise generated lines</u>")
#@gimp : note = note("\n<i>Input Image Settings</i>"), sep = separator()
#@gimp : Threshold Low = int(125,10,255)
#@gimp : Threshold Mid = int(153,10,255)
#@gimp : Threshold High = int(171,10,255)
#@gimp : Threshold Max = int(185,10,255)
#@gimp : Blur Amount = float(0.1,0,2)
#@gimp : note = note("\n<i>Output Etch Settings</i>"), sep = separator()
#@gimp : Horizontal Amount = int(50,0,100)
#@gimp : Cross-Hatch Amount = int(80,0,100)
#@gimp : Vertical 1 Amount = int(50,0,100)
#@gimp : Vertical 2 Amount = int(10,0,100)
#@gimp : sep = separator()
#@gimp : Horizontal Length = int(15,0,50)
#@gimp : Vertical 1 Length = int(12,0,50)
#@gimp : Vertical 2 Length = int(20,0,50)
#@gimp : Flip Cross-Hatch = bool(0)
#@gimp : sep = separator()
#@gimp : Curve Amount = int(1,0,20)
#@gimp : Gamma = float(0.3,0.01,1)
#@gimp : Fast Resize = bool(1)
#@gimp : Color Image = bool(0)
#@gimp : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gimp : sep = separator(), note = note("<small>Author : <i>Garagecoder</i>.      Latest update : <i>2013/02/09</i>.</small>")
gimp_gcd_etch :
-skip ${1=125},${2=153},${3=171},${4=185},${5=0.1} -skip ${6=50},${7=80},${8=50},${9=10}
-skip ${10=15},${11=12},${12=20},${13=0} -skip ${14=1},${15=0.3},${16=1},${17=0}
  -repeat $! -l[$>]
    #image resizing
    w={w} h={h} sc=800 ml=4
    -if {w>h} nw={min($sc,w)} nh={$nw/w*h} -else nh={min($sc,h)} nw={$nh/h*w} -endif
    -to_rgb[0] [0] -if $16 -r[1] $nw,$nh -endif
    #convert to b&w negative
    -b[1] $5% -norm[1] -negative[1] -n[1] 0,255
    #split into value ranges
    --c[1] 0,{255-$4} --c[1] {255-$3},128 --c[1] {255-$2},192 --c[1] {255-$1},255 -n[-3--1] 0,255
    #create etch layers
    {w},{h},1,1,0 -noise[-1] $6,2 -deriche[-1] $10,0,x,0
    {w},{h},1,1,0 -noise[-1] $7,2 {w},{h},1,3,0 -fc[-1] 0,-1,0 -smooth[-2] [-1],30,30,0 -rm[-1]
    -if $13 -mirror[-1] x -endif
    {w},{h},1,1,0 -noise[-1] $8,2 -deriche[-1] $11,0,y,0
    {w},{h},1,1,0 -noise[-1] $9,2 -deriche[-1] $12,0,y,0
    #reduce colour levels, add curve
    -quantize[-$ml--1] 2,0 -deform[-$ml--1] $14
    #combine image & etch layers
    -repeat $ml -mul[{2+$>},-1] -done
    #merge layers down, remove negative
    -add[-$ml--1] -n[-1] 0,255 -rm[1]
    -negative[-1] -apply_gamma[-1] $15
    #restore original size, combine colour
    -if $16 -r[-1] $w,$h,1,3,5 -c[-1] 0,255 -endif
    -if $17 -blend[0,1] shapeaverage -else -keep[-1] -endif
  -endl -done

gimp_gcd_etch_preview :
  -gimp_split_preview "-gimp_gcd_etch ${1--2}",$-1

#@gimp _<b>Colors</b>

#@gimp HSL Adjustment : gcd_hsl, gcd_hsl_preview(1)
#@gimp : note = note("\n<i>Input Saturation Settings</i>"), sep = separator()
#@gimp : Contrast = float(1,0,2)
#@gimp : Level = float(0,-1,1)
#@gimp : Auto Reduce Level (Level slider is disabled) = bool(0)
#@gimp : note = note("\n<i>Output Hue Settings</i>"), sep = separator()
#@gimp : Hue = float(180,0,360)
#@gimp : Amount = float(0.2,0,1)
#@gimp : Auto Set Hue Inverse (Hue slider is disabled) = bool(0)
#@gimp : note = note("\n<i>Output Luminance Settings</i>"), sep = separator()
#@gimp : Gamma = float(1,0,2)
#@gimp : Contrast = float(1,0,2)
#@gimp : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gimp : Sep = separator(), note = note("<small>Author : <i>Garagecoder</i>.      Latest update : <i>2015/05/15</i>.</small>")
gcd_hsl : -skip ${1=1},${2=0},${3=0},${4=180},${5=0.2},${6=0},${7=1},${8=1}
  -repeat $! -l[$>]
    -split_opacity -to_rgb[0] -rgb2hsv[0]
    -if $6
      --channels[0] 0
      -histogram[-1] 360,0,360
      hue={(xM+180)%360} -rm[-1]
    -else hue=$4 -endif

    -sh[0] 1,1
    -if $3 sat={-max(0,ia-0.5)} -else sat=$2 -endif
    --[-1] 0.5 -*[-1] $1 -+[-1] $sat
    -+[-1] 0.5 -c[-1] 0,1 -rm[-1]
    -hsv2rgb[0]

    --channels[0] 0 -*[-1] 66
    --channels[0] 1 -*[-1] 129 -+[-2,-1]
    --channels[0] 2 -*[-1] 25 -+[-2,-1]
    -+[-1] 128 -/[-1] 256 -+[-1] 16
    -apply_gamma[-1] {max(0.001,$7)}
    -if {$8!=1} --[-1] 128 -*[-1] $8 -+[-1] 128 -endif
    -c[-1] 0,255

    -sh[0] 0,0 -sh[0] 1,1 -sh[0] 2,2
    ($hue^1^1) -hsv2rgb[-1] -n[-1] {1-$5},1
    -*[-4] {[0]} -*[-3] {[1]} -*[-2] {[2]}
    -rm[-4--1] -rgb2ycbcr[0] -j[0] [-1] -rm[-1]
    -ycbcr2rgb[0] -a c
  -endl -done

gcd_hsl_preview :
  -gimp_split_preview "-gcd_hsl ${1--2}",$-1

#@gimp HSV Select: gcd_hsv_select, gcd_hsv_select(2)
#@gimp : note = note("<i>Color Selection</i>"), sep = separator()
#@gimp : Hue = int(0,0,360)
#@gimp : Saturation = float(0.5,0,1)
#@gimp : Value = float(1,0,1)
#@gimp : note = note("\n<i>Color Range</i>"), sep = separator()
#@gimp : Hue Range = int(180,0,180)
#@gimp : Sat Range = float(0.5,0,0.5)
#@gimp : Val Range = float(0.5,0,0.5)
#@gimp : note = note("\n<i>Output Options</i>"), sep = separator()
#@gimp : Grow Alpha = int(2,-20,20)
#@gimp : Blur Alpha = int(2,0,20)
#@gimp : note = note("\n<i>Advanced Options</i>"), sep = separator()
#@gimp : Patch Size = int(18,3,100)
#@gimp : Fill Holes % = int(0,0,50)
#@gimp : Min Area % = int(0,0,50)
#@gimp : Show Watershed = bool(0)
#@gimp : sep = separator(), note = note("<small>Author : <i>Garagecoder</i>.      Latest update : <i>2013/02/11</i>.</small>")
gcd_hsv_select :
-skip ${1=0},${2=0.5},${3=1} -skip ${4=180},${5=0.5},${6=0.5}
-skip ${7=2},${8=2} -skip ${9=18},${10=0},${11=0},${12=0}
  -repeat $! -l[$>]
    -to_rgba[0] -remove_opacity[0]
    -if {!$12} [0] -endif
    -l[-1]
      -gcd_shrink
      --rgb2hsv[0] -s[-1] c
      bh={$1-$4} th={$1+$4}
      --ge[1] {360+$bh} --le[1] {$th-360}
      -t2[1] {max($bh,0)},{min($th,360)}
      -or[-2,-1] -or[1,-1]
      -t2[2] {$2-$5},{$2+$5}
      -t2[3] {$3-$6},{$3+$6}
      -and[-2,-1] -and[-2,-1]
      -meancurvature_flow[0] 3 -median[0] 3
      -+[0] 1 --gradient_norm[0] --b[-1] 2,1,1 -min_patch[-1] $9
      -*[0,-1] -*[-1] -1 # dots, mask, gradient
      --*[0] [1] -gt[0] 0 -negative[1] -*[0,1] -*[0] 0.5 -max[0,-1]
      --watershed[0] [-1] -k[-1] --[-1] 1
      -gcd_unshrink
    -endl
    -if {!$12}
      -channels[-1] 0 -ge[-1] 0
      --area[-1] 0 --le[-1] {($10%*max(w,h))^2}
      --negative[-3] -*[-2,-1] -inpaint[-3] [-1] -rm[-1]
      -le[-1] {($11%*max(w,h))^2} -*[-1] [-2]
      -inpaint[-2] [-1] -rm[-1] -*[-1] 255
      -if {$7>0} -dilate[-1] $7
      -elif {$7<0} -erode[-1] {abs($7)} -endif
      -if $8 -b[-1] $8,1,1 -endif
      -a[-2,-1] c
    -endif
    -c[-1] 0,255
  -endl -done

#@gimp _<b>Degradations</b>

#@gimp CRT Sub-pixels : gimp_gcd_crt, gimp_gcd_crt(2)
#@gimp : note = note("<i>Cathode ray tube sub-pixel rendering filter</i>"), sep = separator()
#@gimp : Horizontal Blur = float(1.8,0,5)
#@gimp : Vertical Blur = float(1.8,0,5)
#@gimp : Screen Border = bool(0)
#@gimp : Equalize = bool(0)
#@gimp : sep = separator(), note = note("<small>Author : <i>Garagecoder</i>.      Latest update : <i>2014/12/11</i>.</small>")
gimp_gcd_crt : -skip ${1=1.8},${2=1.8},${3=0},${4=0}
  -repeat $! -l[$>]
    -to_rgb[0]
    -expand_xy 12,0 24,14,1,3,0
    -f[-1] "if((x-c*4)%12<4,255,0)"
    -f[-1] "if(x%4==0,0,i)"
    -f[-1] "if((y%14==0)&&(x%24<12),0,i)"
    -f[-1] "if(((y-7)%14==0)&&((x+12)%24<12),0,i)"
    -array[-1] {0,round(w/24)},{0,round(h/14)},2
    -z[-1] 0,0,{0,w-1},{0,h-1}
    -s c -repeat 3 -blend[-4,-1] shapeaverage0 -done -a c
    -n[-1] 0,255 -meancurvature_flow[-1] 4
    -if $3
      {w},{h},1,1,0
      -rectangle[-1] 5%,5%,95%,95%,1,1
      -b[-1] 10% -*[0,1]
    -endif
    -deriche[-1] $1,0,x -deriche[-1] $2,0,y
    -shrink_xy[-1] 12 -n[-1] 0,255
    -if $4 -equalize[-1] 256 -endif
  -endl -done

#@gimp _<b>Repair</b>

#@gimp Despeckle: gcd_despeckle, gcd_despeckle(3)
#@gimp : note = note("<i>Remove small dots and specks</i>"), sep = separator()
#@gimp : Tolerance = int(20,0,50)
#@gimp : Max Area = int(10,0,100)
#@gimp : sep = separator(), note = note("<small>Author : <i>Garagecoder</i>.   Latest update : <i>2013/02/01</i>.</small>")
#@gimp : note = note("\n<small><b><u>Notes</u></b></small>")
#@gimp : note = note("<small>Set max area to 0 for no area size limit.</small>")
gcd_despeckle : -skip ${1=15},${2=30}
  -repeat $! -l[$>]
    ma={if(!$2,w*h,$2)}
    --label[-1] $1,1 nb={1+iM}
    --histogram[-1] $nb,0,{$nb-1}
    -map[-2] [-1] -rm[-1]
    -le[-1] $ma -*[-1] 255
    -inpaint[-2] [-1] -rm[-1]
  -endl -done

#@gimp _<b>Stereoscopic 3d</b>

#@gimp Stereo Image : gcd_stereo_img, gcd_stereo_img(1)
#@gimp : note = note("<u>Create a 3D image from a flat one</u>")
#@gimp : note = note("\n<i>3D Options</i>"), sep = separator()
#@gimp : 3D Image Type = choice("Anaglyph: Red/Cyan","Side by Side","Depth Map","Inverse Depth Map")
#@gimp : Balance color = float(0.5,0,1)
#@gimp : Depth = float(1.2,0,3)
#@gimp : Distance = float(1,-2,2)
#@gimp : note = note("\n<i>Depth Map Options</i>"), sep = separator()
#@gimp : Blur Percentage = float(0.25,0,2)
#@gimp : Object Ratio = float(2,0,4)
#@gimp : Object Tolerance = int(4,0,5)
#@gimp : Despeckle = bool(1)
#@gimp : note = note("\n<i>Output Options</i>"), sep = separator()
#@gimp : Auto Crop = bool(0)
#@gimp : sep = separator(), note = note("<small>Author : <i>Garagecoder</i>.      Latest update : <i>2015/07/02</i>.</small>")
gcd_stereo_img : -skip ${1=0},${2=2},${3=1.2},${4=1},${5=0.25},${6=2},${7=4},${8=1},${9=0}
  -repeat $! -l[$>]
  -to_rgb[0] b={abs($3%*w*$4)}
  --gcd_depth[0] $5,$6,$7,$8
  -gcd_stereo[0,1] $1,$2,$3%,$4
  -if {!$1" && "$9} -z[-1] $b,{w-1-$b} -endif
  -endl -done

gcd_depth : -skip ${1=0.25},${2=2},${3=4},${4=1}
  -repeat $! -l[$>]
    -if {w>h} -if {w>700} --r[-1] 700,{h*700/w} -else [0] -endif
    -elif {0,h>700} --r[-1] {0,w*700/h},700 -else [0] -endif
    -median[-1] 7 -gcd_segment_ch0[-1] 1
    -if $4 -gcd_label[-1] $3 -else -label[-1] $3,1 -endif
    -c[-1] 0,255 -b[-1] 0.45% -n[-1] 0,$2 -r[-1] [0],[0]
    -norm[0] -n[0] 0,1 -+[-2,-1] -b[-1] $1% -n[-1] 0,255
  -endl -done

gcd_segment_ch0 : -check "${1=1}>=0"
  -repeat $! -l[$>]
    min={im} -+ {1+$min} --gradient_norm -channels[0] 0
    --f[-1] "if(i<$1 && i<j(1) && i<j(-1) && i<j(0,1) && i<j(0,-1),1,0)"
    -*[0,-1] -*[-1] -1 -watershed[-2] [-1] -rm[-1] -- {1+$min}
  -endl -done

gcd_stereo : -skip ${1=0},${2=1},${3=1.2%},${4=1}
  -l[-2,-1]
    -if {$1==2} -keep[-1] -return
    -elif {$1==3} -keep[-1] -negative -return -endif
    wfac={if(${"-is_percent $3"},$3*w,$3)} -n[-1] 0,$wfac
    -if {$1<2" && "$2>0} -gcd_balance_anaglyph[0] {2-$2} -endif
    -i[1] [0] -warp[0] [-1],1 -mul[-1] -1 -warp[1] [-1],1 -rm[-1]
    -if $1 -rv[0,1] -append[0,1] x -else -shift[0] {round(-$wfac*$4)} -shift[1] {round($wfac*$4)}
    -channels[0] 0 -channels[1] 1,2 -append[0,1] c
    -endif
  -endl

gcd_balance_anaglyph : -skip ${1=1},${2=0.43},${3=0.45}
  -l[-1] -sh 0,0 -sh[0] 1,1 -sh[0] 2,2 ---[2] [1] inv={255^(1-$1)*$2}
    -if {$1>1} --sign[-1] -abs[-2] -^[-2] $1 -*[-2] $inv -*[-2,-1] -else -*[-1] $2 -endif
    --[2,3] [-1] -*[-1] {1/$2-1} -+[1,-1] --*[3] 0.65 --[-1] [1] -max[-1] 0 -*[-1] $3
    --[3] [-1] -*[-1] {1/$3-1} -+[1,-1] -apply_gamma[1] 1.15 -rm[1-3] -c 0,255
  -endl

#@gimp Undo Anaglyph : gcd_unstereo, gcd_unstereo_preview(1)
#@gimp : note = note("<u>Attempt to revert red/cyan anaglyph to 2D</u>")
#@gimp : note = note("<b>Warning: with high precision or large image this can be VERY slow!</b>")
#@gimp : note = note("\n<i>Displacement Settings</i>"), sep = separator()
#@gimp : Precision = float(5,1,6)
#@gimp : Smoothness = float(0.1,0,1)
#@gimp : Horizontal Warp Only = bool(1)
#@gimp : Fast (Low Precision) Preview = bool(1)
#@gimp : note = note("\n<i>Tile Settings</i>"), sep = separator()
#@gimp : Horizontal Tiles = int(1,1,8)
#@gimp : Vertical Tiles = int(1,1,8)
#@gimp : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gimp : sep = separator(), note = note("<small>Author : <i>Garagecoder</i>.      Latest update : <i>2013/10/26</i>.</small>")
gcd_unstereo : -skip ${1=5},${2=0.1},${3=0},${4=1},${5=1},${6=1},${7=0},${8=0}
  -repeat $! -l[$>]
    -if {$4" && "$8} pr=1 -else pr=$1 -endif # set precision to low for fast preview
    -to_rgb[0] -split_tiles[0] $5,$6
    -repeat $! -l[$>]
      -s[0] c --equalize[0,1] 256 # split red/green channels to new images
      --displacement[-2] [-1],$2,$pr # create displacement map from red/green comparison
      -if $3 -sh[-1] 1,1 -f[-1] 0 -rm[-1] -endif # remove vertical displacement if selected
      -/[-1] 2 -warp[1,2] [-1],1 -*[-1] -1 -warp[0] [-1],1 # warp channels
      -keep[0-2] -a c -c[0] 0,255 # merge channels back to RGB image
    -endl -done
    -append_tiles $5,$6
  -endl -done

gcd_unstereo_preview :
  -gimp_split_preview "-gcd_unstereo ${1--1},1",$-1

#@gimp _<b>Testing</b>
#@gimp <i>Garagecoder</i>

#@gimp Blend [feather]: gcd_blend_feather, gcd_blend_feather(1)
#@gimp : note = note("<u>Overlay layers seamlessly by feathering edges</u>")
#@gimp : note = note("<small>1. Set Input layers to <b>Active &amp; below</b> for two layers</small>")
#@gimp : note = note("<small>2. For best results ensure layers are the same size</small>")
#@gimp : note = note("\n<i>Output Options</i>"), sep = separator()
#@gimp : Max delta = int(100,0,200)
#@gimp : Color transfer = float(0.5,0,1)
#@gimp : Hue extent = float(2,0,6)
#@gimp : Remove BG = int(0,0,20)
#@gimp : Keep layers = bool(0)
#@gimp : sep = separator(), note = note("<small>Author : <i>Garagecoder</i>.      Latest update : <i>2014/05/05</i>.</small>")
#@gimp : note = note("\n<small><b><u>Notes</u></b></small>")
#@gimp : note = note("<small>Remove BG can help mask off unwanted areas, which works</small>")
#@gimp : note = note("<small>best on objects surrounded by simple backgrounds.</small>")
#@gimp : note = note("<small>Overlaying a larger area can sometimes improve the output.</small>")
gcd_blend_feather : -skip ${1=100},${2=0.5},${3=2},${4=0},${5=0}
  -r[^-1] [-1],[-1],1,100%,0,0,0.5,0.5
  -if $5
    --gcd_blend_maxdelta ${1-4}
    -to_a[0] -split_opacity[0] -rv[1,-1] -a[1,-1] c -rm[0]
  -else -gcd_blend_maxdelta ${1-4} -endif

gcd_blend_maxdelta : -skip ${1=100},${2=0.5},${3=2},${4=0}
  -if {$!>1} -repeat {$!-1} -l[0,1]
    -to_a -split_opacity -/[1,3] 255
    -nm[0] upper -nm[1] alpha -nm[2] lower -nm[3] mask

    # transfer colours
    --r[lower] 1,1,1,100%,2
      --+[upper] 0.1 -*[-1] [alpha]
      -s[-1] c -discard[-3--1] 0 -a[-3--1] c
      -r[-1] 1,1,1,100%,2 -r[-2,-1] [upper]
    -*[-2,-1] $2 -sub[upper,-1] -add[upper,-1] -c[upper] 0,255

    # get distance, full blending for lower layer transparency
    --distance[alpha] 0 -nm[-1] dist
    -eq[mask] 0 -*[mask] {dist,iM} -max[dist] [mask]

    # get foreground mask
    -if {$4>0}
      [upper] [alpha] -a[-2,-1] c
      -gcd_fgmask[-1] {20-$4} -b[-1] 3 -*[alpha,-1]
    -endif

    # hue extent
    --n[dist] 0,$3 -c[-1] 0,1 -*[-1] [alpha]
    -gcd_srgb2jpeg[upper,lower] -sh[upper,lower] 1,2
    -j[-1] [-2],0,0,0,0,1,[-3] -rm[-3--1]
    -gcd_jpeg2srgb[upper,lower]

    # blend using distance as maximum difference
    -n[dist] 0,{255*$1%}
    --sub[upper] [lower] -*[-1] [alpha]
    --sign[-1] -abs[-2] -min[dist,-2] -*[dist,-1]
    -+[lower] [dist] -k[lower] -c 0,255
  -endl -done -endif

gcd_fgmask : -skip ${1=0}
# fast foreground select based on central positioning
# within an alpha selected region, pre-processing with
# -median can improve selections. output range 0 -> 1
  -repeat $! -l[$>]
    -to_a -expand_xy 20,0 -split_opacity -gt[-1] 0
    --distance[-1] 0 -max_patch[-1] 3 -*[-1] 2
    --erode[1] 20 -*[-2,-1] -dilate[-1] $1
    --gradient_norm[-2] -gt[-1] 0
    -gradient_norm[0] --eq[-1] 0 -*[0,-1]
    -max[-2,-1] -*[0,1] -*[0] -1
    -watershed[-1] [-2] -rm[-2]
    -shrink_xy 20 -- 1
  -endl -done

#@gimp DCCI 2x Resize: gcd_dcci_upscale, gcd_dcci_upscale(0)
#@gimp : note = note("<i>Directional Cubic Convolution Interpolation</i>"), sep = separator()
#@gimp : Threshold = float(1.15,1,1.5)
#@gimp : sep = separator(), note = note("<small>Author : <i>Garagecoder</i>.      Latest update : <i>2015/11/01</i>.</small>")
#@gimp : note = note{"\n<small><b>Note: </b>
#@gimp : This filter re-implements the scaling algorithm described at :
#@gimp : </small>"}
#@gimp : note = link("wikipedia.org","https://en.wikipedia.org/wiki/Directional_Cubic_Convolution_Interpolation")
#@gimp : note = note("<small>The algorithm is intended for enlarging images while avoiding</small>")
#@gimp : note = note("<small>artifacts, e.g. staircase artifacts.</small>")
#@gimp : note = note("\n<small>Increasing the threshold reduces smoothing.</small>")
#@gimp : note = note("<small>Warning: highly experimental...</small>")
gcd_dcci_upscale : -skip ${1=1.15}
  -repeat $! -l[$>]
    a={-1/16} b={9/16}
    # d1, d2 (sum of diagonal absolute gradients)
    (0,-1;1,0) --convolve[0] [1] -mirror[1] x --convolve[0] [1] -rm[1] -abs[^0]
    3,3,1,1,1 -convolve[-3,-2] [-1] -rm.

    # calc all possible interpolated output [diagonal]
    ($a,$b,$b,$a) -diagonal. --convolve[0] [-1] -mirror[-2] x --convolve[0] [-2] -rm[-3]
    --+[1,2] 1 -/[-2,-1] # edge comparison mask (1 + d1) / (1 + d2)
    -_gcd_dcci_smooth[-5,-4] [-3],[-2] -_gcd_dcci_mask[-4--1] $1

    # d1, d2 (sum of h/v absolute gradients)
    --g[0,1] xy,-1 -abs[-4--1]
    (1,1;1,1) -convolve[-5] [-1] -rm.
    (0,1,0;1,1,1;0,1,0) -convolve[-3] [-1] -rm.
    (0,1,0;1,1,1;0,1,0;0,0,0) -convolve[-4] [-1] -rm.
    (0,1,1;0,1,1;0,0,0) -convolve[-2] [-1] -rm.
    -+[-3,-1] -+[-3,-1]

    # calc all possible interpolated output [h/v]
    ($a;$b;$b;$a) --convolve[0] [-1] -rm[-2] (0,$a,$b,$b,$a) --convolve[1] [-1] -rm[-2]
    --+[2,3] 1 -/[-2,-1] # edge comparison mask (1 + d1) / (1 + d2)
    -_gcd_dcci_smooth[-5,-4] [-3],[-2] -_gcd_dcci_mask[-4--1] $1

    # d1, d2 (sum of h/v absolute gradients)
    --g[0,1] xy,-1 -abs[-4--1]
    (0,1,0,0;1,1,1,0;0,1,0,0) -convolve[-5] [-1] -rm.
    (0,0,0;1,1,0;1,1,0) -convolve[-3] [-1] -rm.
    (1,1;1,1;0,0) -convolve[-4] [-1] -rm.
    (0,1,0;1,1,1;0,1,0) -convolve[-2] [-1] -rm.
    -+[-3,-1] -+[-3,-1]

    # calc all possible interpolated output [h/v]
    (0;$a;$b;$b;$a) --convolve[1] [-1] -rm[-2] ($a,$b,$b,$a) --convolve[0] [-1] -rm[-2]
    --+[3,4] 1 -/[-2,-1] # edge comparison mask (1 + d1) / (1 + d2)
    -_gcd_dcci_smooth[-5,-4] [-3],[-2] -_gcd_dcci_mask[-4--1] $1

    # resize and distribute pixels
    -r2dx 200%,4 -shift[1] 1,1 -shift[2] 0,1 -shift[3] 1 -+ -c 0,255
  -endl -done

_gcd_dcci_smooth :
  # calculate interpolated output for smooth areas
  -^[0,1] 5 -+[0,1] 1 -^[0,1] -1 --+[0,1] -/[0,1] [-1] -rm. # weights
  -pass$1 -pass$2 -*[0,-2] -*[1,-1] -+[0,1] # smooth

_gcd_dcci_mask : -skip ${1=1.15}
  # combine edge mask with interp outputs
  --lt[-1] {1/$1} -gt[-2] $1 -*[-4] [-2] -*[-3] [-1]
  -or[-2,-1] -not[-1] -*[-4,-1] -+[-3--1]

#@gimp Depth Blur : gcd_depth_blur, gcd_depth_blur(1)
#@gimp : note = note("<u>Selectively blur based on estimated depth</u>")
#@gimp : note = note("<small>Amount of blur applied is relative to luminance of the depth map</small>")
#@gimp : note = note("\n<i>Focus Options</i>"), sep = separator()
#@gimp : Distance Threshold = int(0,0,100)
#@gimp : Blur Amount = int(15,0,100)
#@gimp : note = note("\n<i>Depth Map Options</i>"), sep = separator()
#@gimp : Blur Percentage = float(0.25,0,2)
#@gimp : Object Ratio = float(2,0,4)
#@gimp : Object Tolerance = int(4,0,5)
#@gimp : Create/View Depth Map = bool(0)
#@gimp : Reverse Map = bool(1)
#@gimp : sep = separator(), note = note("<small>Author : <i>Garagecoder</i>.      Latest update : <i>2013/02/24</i>.</small>")
gcd_depth_blur : -skip ${1=0},${2=15},${3=0.25},${4=2},${5=4},${6=0},${7=1}
  -repeat $! -l[$>]
  sa={$2*max(w,h)/1000}
  -to_rgb[0]
  --gcd_depth[0] $3,$4,$5
  -if $7 -negative[-1] -endif
  -threshold[-1] $1%,1 -n[-1] 0,255
  -if $6 -keep[-1] -else
    {w},{h},1,1,0 [-2] -a[-3--1] c
    -smooth[-2] [-1],$sa,30,0 -rm[-1]
    -c[-1] 0,255
  -endif
  -endl -done

#@gimp Emboss: gcd_emboss, gcd_emboss(1)
#@gimp : note = note("<i>Make an image look embossed</i>"), sep = separator()
#@gimp : Midpoint = int(128,0,255)
#@gimp : sep = separator(), note = note("<small>Author : <i>Garagecoder</i>.      Latest update : <i>2014/11/11</i>.</small>")
gcd_emboss : -skip ${1=128}
  -repeat $! -l[$>]
    --norm --bilateral[0] 2%,30 -norm[-1] --[-2,-1]
    --n[0] 0,255 -median[-1] 3 -bilateral[-1] 2%,30
    -gcd_srgb2luma[-1] --[-1] $1
    --abs[-1] -negative[-1]
    --max[-2] 0 -min[-3] 0 -abs[-3]
    -pde_flow[1] 20,7,iee
    --n[-3] 0,2 -*[-1] [1] -+[0,-1]
    --n[-1] 0,2 -*[-1] [1] -+[0,-1]
    --n[-2] 0,2 -*[-1] [1] -+[0,-1]
    -+[0,2] --[0,3] -k[0]
    -gcd_srgb2luminance -c 0,255
  -endl -done

#@gimp Image InfoMap: gcd_infomap, gcd_infomap(1)
#@gimp : note = note("<i>View images in various informational ways</i>"), sep = separator()
#@gimp : Output = choice("Spectral tones","Detail map","JPEG CbCr detail")
#@gimp : sep = separator(), note = note("<small>Author : <i>Garagecoder</i>.      Latest update : <i>2015/10/24</i>.</small>")
gcd_infomap :
  -repeat $! -l[$>] -to_rgb
    -if {$1>1} -gcd_srgb2jpeg -channels 1,2 -equalize 256 -gcd_detail
    -elif {$1} -gcd_detail -else -gcd_spectral -endif
  -endl -done

gcd_detail :
  -repeat $! -l[$>] --bilateral 2%,30 -norm -- -n 0,255 -endl -done

gcd_spectral :
  -repeat $! -l[$>]
    -to_rgb -gcd_srgb2luma -- 128
    --max 0 --min[0] 0 -abs[^-2] -negative[0] -a c -n 0,255
  -endl -done

#@gimp Recolor : gcd_recol, gcd_recol(1)
#@gimp : note = note("<i>Apply colors to a black and white image</i>"), sep = separator()
#@gimp : Min Hue drift = int(-14,-45,0)
#@gimp : Max Hue drift = int(14,0,45)
#@gimp : sep = separator(), note = note("<b>Note :</b> This filter needs two layers to work properly.")
#@gimp : note = note("<small>Original Author : <i>David Tschumperl&#233;</i></small>")
#@gimp : note = note("<small>Adapted by : <i>Garagecoder</i>.   Latest update: <i>2013/01/16</i>.</small>")
gcd_recol :
  -repeat {int($!/2)} -l[$>,{$>+1}]
    -rv[-2,-1]
    -channels[-2] 0 -to_rgb[-2] # -2=b&w -1=cols\RGBA
    -to_rgba[-1] -split_opacity[-1] -neq[-1] 0  # -3=b&w\RGB -2=cols\RGB -1=mask\L
    -srgb2rgb[-3,-2] -rgb2lab8[-3,-2] -channels[-3] 0 -channels[-2] 1,2 # -3=b&w\L -2=cols\AB -1=mask\L
    -+[-2] 1 -*[-2] [-1]
    --meancurvature_flow[-3] 3 -median[-1] 3
    -gradient_norm[-1] -*[-1] -1 -watershed[-3] [-1] -rm[-1] --[-2] 1
    # cols=(cols+1)*mask, wshed with b&w-gnorm*-1 -3=b&w\L -2=wshedcols\AB -1=mask\L
    -rm[-1] -a[-2,-1] c -lab82rgb[-1] -rgb2srgb[-1]
    -rgb2hsv[-1] -s c --equalize[2] 512 -n[-1] $1,$2 -+[0,-1] -%[0] 360 -a c -hsv2rgb[-1] #stretch hues
  -endl -done

#@gimp Sharpen [gradient]: gcd_sharpen_gradient, gcd_sharpen_gradient(1)
#@gimp : note = note("<i>Sharpen areas with low detail</i>"), sep = separator()
#@gimp : Amount = float(0.5,0,2)
#@gimp : Scale = float(2,0.1,2)
#@gimp : Values = choice("cut","normalize luma")
#@gimp : sep = separator(), note = note("<small>Author : <i>Garagecoder</i>.      Latest update : <i>2015/09/28</i>.</small>")
gcd_sharpen_gradient : -skip ${1=0.5},${2=2},${3=0}
  -repeat $! -l[$>]
    -split_opacity
    --norm[0] --bilateral[0] $2%,30 -norm[-1] --[-2,-1]
    --gradient_norm[0] -negative[-1] -n[-1] 0,$1 -*[-2,-1] -+[0,-1]
    -if {$3} -ac[0] "-n 0,255",ycbcr_y -else -c[0] 0,255 -endif
    -a c
  -endl -done

#@gimp Sharpen [tones]: gcd_sharpen_tones, gcd_sharpen_tones(1)
#@gimp : note = note("<i>Sharpen shadows and highlights</i>"), sep = separator()
#@gimp : Amount = float(1,0,4)
#@gimp : Centre = int(128,0,255)
#@gimp : Values = choice("cut","normalize luma")
#@gimp : sep = separator(), note = note("<small>Author : <i>Garagecoder</i>.      Latest update : <i>2015/09/28</i>.</small>")
gcd_sharpen_tones : -skip ${1=1},${2=128},${3=0}
  -repeat $! -l[$>]
    -split_opacity
    --norm[0] --bilateral[0] 2%,30 -norm[-1] --[-2,-1]
    --gradient_norm[0] -n[-1] 0,1 -oneminus[-1] -*[-2,-1]
    --n[0] 0,255 -median[-1] 3 -bilateral[-1] 2%,30
    -gcd_srgb2luma[-1] --[-1] $2
    --max[-1] 0 -min[-2] 0 -abs[-2]
    -n[-2,-1] 0,$1 -*[-2,-1] [-3] -rm[-3] -+[0,-2,-1]
    -if {$3} -ac[0] "-n 0,255",ycbcr_y -else -c[0] 0,255 -endif
    -a c
  -endl -done

#@gimp Smart rotate : gcd_srotate, gcd_srotate(1)
#@gimp : Note = note("<u>Rotate an image and extrapolate the corners</u>")
#@gimp : Note = note("\n<i>Rotation Options</i>"), sep = separator()
#@gimp : Angle = int(0,-90,90)
#@gimp : Centrex = int(50,0,100)
#@gimp : Centrey = int(50,0,100)
#@gimp : Note = note("\n<i>Quality Options</i>"), sep = separator()
#@gimp : Interpolation = choice(1,"Linear","Bicubic")
#@gimp : Inpainting = choice(1,"Low","Normal","High","Ultra")
#@gimp : Lookup scale = int(6,1,16)
#@gimp : Lookup factor = float(0.6,0.2,2)
#@gimp : Seamless = bool(0)
#@gimp : Sep = separator(), note = note("<small>Author : <i>Garagecoder</i>.      Latest update : <i>2014/12/05</i>.</small>")
#@gimp : Note = note("\n<small><b><u>Notes</u></b></small>")
#@gimp : Note = note("<small>* Dimensions are not altered</small>")
#@gimp : Note = note("<small>* Quality settings affect speed!</small>")
#@gimp : Note = note("<small>The preview is a rough guide only.  Images with simple edges tend to work best.</small>")
#@gimp : Note = note("<small>Results can be improved by selecting a higher inpainting quality, but processing will take longer.</small>")
#@gimp : Note = note("<small>Select seamless to reduce visible seams at the corners.</small>")
gcd_srotate : -skip ${1=0},${2=50},${3=50},${4=1},${5=1},${6=6},${7=0.6},${8=0}
  -repeat $! -l[$>]
    -rotate $1,{$4+1},1,$2%,$3%,1 -c 0,255 -split_opacity
    -l[0]
      {w},{h},1,1,1 -rotate[-1] $1,0,0,$2%,$3%,1
      -eq[-1] 0 --area[-1] 0 -*[-1] [-2]
      ps={max(round(iM^0.5/6),4)} -rm[-1]
      -if $8
        --inpaint[0] [-1],$ps,{$ps*$6},$7,{9-$5*2},{$ps*1.2},0,0.08
        -rv[-2,-1] -a[-2,-1] c -blend_seamless 0,0,25%
      -else
        -inpaint[0] [-1],$ps,{$ps*$6},$7,{9-$5*2},{$ps*1.2},0,0.08 -rm[-1]
      -endif
    -endl -a c
  -endl -done

#@gimp Split Objects : gcd_splitobj, gcd_splitobj_preview(1)
#@gimp : note = note("<u>Extract objects from an image to a new layer</u>")
#@gimp : note = note("<small>1. Create a new transparent layer, mark background red and objects green</small>")
#@gimp : note = note("<small>2. Set Input layers to <b>Active &amp; below</b>, objects will be split to two layers</small>")
#@gimp : note = note("\n<i>Edge Detection Options</i>"), sep = separator()
#@gimp : Alpha Min = int(50,0,100)
#@gimp : Edge Flow = int(3,0,20)
#@gimp : Median = int(3,0,7)
#@gimp : note = note("\n<i>Output Options</i>"), sep = separator()
#@gimp : Swap Layers = bool(0)
#@gimp : Grow Alpha = int(0,-20,20)
#@gimp : Blur Alpha = int(0,0,20)
#@gimp : Opacity = int(40,0,100)
#@gimp : Inpainting = choice(0,"Off","Low","Normal","High","Ultra")
#@gimp : is_preview = const(0)
#@gimp : sep = separator(), note = note("<b>Note :</b> This filter needs two layers to work properly.")
#@gimp : note = note("<small>Author : <i>Garagecoder</i>.   Latest update: <i>2015/09/28</i>.</small>")
gcd_splitobj : -skip ${1=50},${2=3},${3=3},${4=0},${5=0},${6=0},${7=40},${8=0},${9=0}
  -repeat {int($!/2)} -l[$>,{$>+1}]
    -to_rgba [-1]
    -s[1] c,-3 -ge[2] $1% -luminance[1]
    -meancurvature_flow[1] $2 -median[1] $3 -*[1,2]
    -channels[0] 0,1 -s[0] c -gt[0,1] 50% -*[{$4!=0}] 2 -+[0,1]
    -gradient_norm[1] -*[1] -1 -watershed[0] [1] --[0] 1 -rm[1]
    -if {$5>0} -erode[0] $5 -elif {$5<0} -dilate[0] {abs($5)} -endif
    -if $6 -b[0] $6,1,1 -c[0] 0,1 -endif
    [1] -sh[-1] 3,3 -*[-1] [0] -rm[-1] -oneminus[0]
    -if {$8>0}
      -le[0] 80% --area[0] 0 -*[-1] [0]
      ps={max(round(iM^0.5/6),4)} -rm[-1] -n[0] 0,255
      -inpaint[1] [0],$ps,{$ps*6},1,{9-$8*2},{$ps*1.2},0,0.08,10,1
    -else -sh[1] 3,3 -*[-1] [0] -rm[-1] -endif
    -rm[0] -gcd_fix_gimp_alpha -nm[1] opacity($7)
    -if {$9} -blend alpha,{$7/100} -endif
  -endl -done

gcd_splitobj_preview :
  -gcd_splitobj ${1--2},1

#@gimp Stereo Video : gcd_stereo_vid, gcd_stereo_vid_preview(1)
#@gimp : note = note("<u>Convert a series of image files to 3D</u>")
#@gimp : note = note("\n<i>File Options</i>"), sep = separator()
#@gimp : Start Image = file()
#@gimp : End Image = file()
#@gimp : Output Folder = _folder()
#@gimp : note = note("\n<i>3D Options</i>"), sep = separator()
#@gimp : 3D Image Type = choice("Anaglyph: Red/Cyan","Side by Side","Depth Map","Inverse Depth Map")
#@gimp : Balance color = float(0.5,0,1)
#@gimp : Depth = float(1.2,0,2)
#@gimp : note = note("\n<i>Depth Map Options</i>"), sep = separator()
#@gimp : Blur Percentage = float(0.25,0,2)
#@gimp : Object Ratio = float(2,0,4)
#@gimp : Object Tolerance = int(4,0,5)
#@gimp : Despeckle = bool(1)
#@gimp : note = note("\n<i>Video Options</i>"), sep = separator()
#@gimp : Frame Buffer = _int(5,1,10)
#@gimp : Scene Detection = bool(1)
#@gimp : sep = separator(), note = note("<small>Author : <i>Garagecoder</i>.      Latest update : <i>2015/07/02</i>.</small>")
gcd_stereo_vid :
  1 -l[-1]

  -i "$1" st_folder={f} st_file={b} st_ext={x} ({'$st_file'}) cpx={w}
  -do cpx={$cpx-1} dgt={i($cpx)} isnum={($dgt>47)&&($dgt<58)} -while {($isnum)&&($cpx>0)}
  -if {$cpx>0} --z[-1] 0,$cpx fsname={t} -rm[-1] -else fsname="" -endif
  -z[-1] {$cpx+{!$isnum}},100% dgts={w} fsnum={{t}} -rm[-1]

  1 -nm[-1] "$2" en_file={b} ({'$en_file'}) cpx={w}
  -do cpx={$cpx-1} dgt={i($cpx)} isnum={($dgt>47)&&($dgt<58)} -while {($isnum)&&($cpx>0)}
  -z[-1] {$cpx+{!$isnum}},100% fenum={{t}} -rm[-2,-1]

  bufsz=$11 ttlbuf={$bufsz*2} ttlimg={$fenum-$fsnum+1}
  scene=1 scframe=0 ov={iv} oa={ia}

  -repeat {$ttlimg}
    -if {$scene" && "$>==$scframe}
      -k[-1] scene=0
      -repeat {min($ttlbuf,$ttlimg-$scframe-1)}
        curnum={$fsnum+$scframe+$>+1} curnum=${-gcd_add0\ $curnum,$dgts}
        -i ""${st_folder}${fsname}${curnum}.${st_ext}""
        vr={iv} av={ia} pvr={abs($vr-$ov)/$vr} pav={abs($av-$oa)/$av}
        ov=$vr oa=$av
        -if {$12&&($pvr>0.1" || "$pav>0.1)} scene=1 scframe={$scframe+$>+1} -break
        -endif
      -done
      #sum of depths in [0], depths in [1], images in [2]
      --l[0--{1+$scene}] -ap "-gcd_depth $7,$8,$9,$10" --add[0--1] -a[0--2] z -endl
      -mv[-1] 0 -mv[-1] 1 -a[2--{1+$scene}] z
    -endif

    --slices[2] 0 --div[0] {1,d} -gcd_stereo[-2,-1] $4,$5,$6%

    curnum={$fsnum+$>} curnum=${-gcd_add0\ $curnum,$dgts}
    -if ${-is_windows} -o[-1] "$3"""{`92`}${fsname}${curnum}.${st_ext}""
    -else -o[-1] "$3"""{`47`}${fsname}${curnum}.${st_ext}"" -endif
    -progress {($>+1)/$ttlimg*100}

    -rm[-1] -slices[2] 1,100%

    -if {!$scene" && "($>>=($scframe+$bufsz))" && "($><($ttlimg-$bufsz-1))}
      curnum={$fsnum+$>+$bufsz+1} curnum=${-gcd_add0\ $curnum,$dgts}
      -i ""${st_folder}${fsname}${curnum}.${st_ext}""
      vr={iv} av={ia} pvr={abs($vr-$ov)/$vr} pav={abs($av-$oa)/$av}
      ov=$vr oa=$av
      -if {$12&&($pvr>0.1" || "$pav>0.1)} scene=1 scframe={$>+$bufsz+1}
      -else
        --gcd_depth[-1] $7,$8,$9,$10 -add[0] [-1] -a[1,-1] z -a[2,-1] z
        --slices[1] 0 -sub[0,-1] -slices[1] 1,100%
      -endif
    -endif
  -done
  -rm
  -endl

gcd_stereo_vid_preview : -skip "${1=}","${2=}"
  -l -i "$1" -onfail 100,100,1,3,0 -text[-1] "Select\nStart\nImage   ",0,0,32,1,255 -endl
  -l -i "$2" -onfail 100,100,1,3,0 -text[-1] "Select\nEnd\nImage   ",0,0,32,1,255 -endl
  -k[-2,-1] -a[0,1] x -to_rgb[0] --gcd_depth[-1] $7,$8,$9,$10 -gcd_stereo $4,$5,$6%

gcd_add0 :
  ({'"$1"'}) -if {w<$2} {$2-w},1,1,1,48 -rv[-2,-1] -a[-2,-1] x -endif -u {t} -rm[-1]

#@gimp Tone enhance : gcd_tone_enhance, gcd_tone_enhance(1)
#@gimp : Note = note("<u>Sharpen or adjust shadows and highlights</u>")
#@gimp : Note = note("\n<i>Shadows</i>"), sep = separator()
#@gimp : Detail = float(1,0,2)
#@gimp : Bright = float(0,-1,1)
#@gimp : Contrast = float(0,0,2)
#@gimp : Note = note("\n<i>Highlights</i>"), sep = separator()
#@gimp : Detail = float(1,0,2)
#@gimp : Bright = float(0,-1,1)
#@gimp : Note = note("\n<i>Mid Point</i>"), sep = separator()
#@gimp : Centre = int(128,0,255)
#@gimp : Detail = float(0,0,2)
#@gimp : Bright = float(0,-1,1)
#@gimp : Note = note("\n<i>Detail Mask</i>"), sep = separator()
#@gimp : Smooth = int(0,0,20)
#@gimp : Sep = separator()
#@gimp : Values = choice("cut","normalize luma")
#@gimp : Sep = separator()
#@gimp : Note = note("<small>Author : <i>Garagecoder</i>.      Latest update : <i>2015/09/28</i>.</small>")
gcd_tone_enhance : -skip ${1=1},${2=0},${3=0},${4=1},${5=0},${6=128},${7=0},${8=0},${9=0},${10=0}
  -repeat $! -l[$>]
    -split_opacity
    --norm[0] --bilateral[0] 2%,30 -norm[-1] --[-2,-1]
    --gradient_norm[0] -n[-1] 0,1 -oneminus[-1] -*[-2,-1]
    --n[0] 0,255 -median[-1] 3 -bilateral[-1] 2%,30
    -gcd_srgb2luma[-1] --[-1] $6
    --abs[-1] -negative[-1]
    --max[-2] 0 -min[-3] 0 -abs[-3]
    -if $9 -pde_flow[-4] $9,7,iee -endif
    --n[-3] 0,$1 -*[-1] [-5] -+[0,-1]
    --n[-1] 0,$4 -*[-1] [-5] -+[0,-1]
    --n[-2] 0,$7 -*[-1] [-5] -+[0,-1] -rm[-4]
    --apply_gamma[-3] 0.3 -n[-1] 0,$3 -+[-1] 1 -*[0,-1]
    -*[-3] $2 -*[-2] $8 -*[-1] $5 -+[0,-3--1]
    -if {$10} -ac[0] "-n 0,255",ycbcr_y -else -c[0] 0,255 -endif
    -a c
  -endl -done

#@gimp Unquantize [jpeg smooth]: gcd_unquantize, gcd_unquantize(0)
#@gimp : note = note("<u>Remove quantization artifacts</u>")
#@gimp : note = note("<small>1. Preview will <b>not</b> show the final result accurately.</small>")
#@gimp : note = note("<small>2. Be sure to apply <b>before</b> any image resizing.</small>")
#@gimp : note = note("\n<i>Block Smoothing Options</i>"), sep = separator()
#@gimp : Iterations = int(6,0,8)
#@gimp : Preserve Edges = float(1,0,1)
#@gimp : Color Channels = bool(1)
#@gimp : note = note("\n<i>Anti-Aliasing Options</i>"), sep = separator()
#@gimp : Iterations = int(5,0,30)
#@gimp : Threshold = int(15,1,200)
#@gimp : sep = separator(), note = note("<small>Author : <i>Garagecoder</i>.      Latest update : <i>2014/04/29</i>.</small>")
#@gimp : note = note("\n<small><b><u>Notes</u></b></small>")
#@gimp : note = note("<small>Useful for removal of common compression and rescaling artifacts.</small>")
#@gimp : note = note("<small>* If a specific glitch remains, try reducing edge preservation.</small>")
#@gimp : note = note("<small>* For AA only set Block Iterations to 0.</small>")
gcd_unquantize : -skip ${1=6},${2=1},${3=1},${4=5},${5=15}
  -repeat $! -l[$>]
    -gcd_srgb2jpeg -s c
    -if {$1>0}
      --edges[0] 14.5% -n[-1] {1-$2},1
      -if {$3" && "$!>2}
        -a[1,2] c --apply_parallel_overlap[1] "-median 5",3
        -j[1] [-1],0,0,0,0,1,[-2] -rm[-1]
      -endif
      {w},{h},1,1,0 -grid[-1] 8,8,0,0,1,1 -grid[-1] 8,8,-1,-1,1,1
      -b[-1] 1,0 -*[-2,-1] -n[-1] 0,1 --pde_flow[0] $1,30,iee,0
      -j[0] [-1],0,0,0,0,1,[-2] -rm[-2,-1]
    -endif
    -if {$4>0}
      --median[0] 3 -sub[-1] [0]
      -abs[-1] -ge[-1] $5
      -dilate[-1] 3 -n[-1] 0,1
      --apply_parallel_overlap[0] "-pde_flow "$4",7,iee,0",8
      -j[0] [-1],0,0,0,0,1,[-2] -rm[-2,-1]
    -endif
    -a c -gcd_jpeg2srgb -c 0,255
  -endl -done

#@gimp Warp Map: gcd_warpmap, gcd_warpmap(1)
#@gimp : note = note("<i>Warp an image using another as a surface</i>"), sep = separator()
#@gimp : Depth = float(5,0,20)
#@gimp : Detail = float(0,0,10)
#@gimp : Smoothness = float(0,0,10)
#@gimp : Blend Mode = choice("Warp","Multiply","Softlight","None")
#@gimp : Swap Layers = bool(0)
#@gimp : sep = separator(), note = note("<small>Author : <i>Garagecoder</i>.      Latest update : <i>2013/02/09</i>.</small>")
#@gimp : note = note("\n<small><b><u>Notes</u></b></small>")
#@gimp : note = note("<small>The top layer will be warped using the bottom layer as a surface.</small>")
#@gimp : note = note("<small>\nDepth: Set the apparent depth of the surface.</small>")
#@gimp : note = note("<small>Detail: Perform second warp with no smooth for fine detail.</small>")
#@gimp : note = note("<small>Smooth: Set low for emboss, high to wrap around large objects.</small>")
gcd_warpmap : -skip ${1=5},${2=0},${3=0},${4=0},${5=0}
  -repeat {int($!/2)} -l[$>,{$>+1}]
    -if $5 -rv -endif
    -if {$4==3} bm=0 -i[0] [-1] -else bm=$4 -endif
    -if $2 --gcd_warp[-2,-1] $1,$3 -rm[-3] -rv[-2,-1] -gcd_warp[-2,-1] $2,0,$bm
    -else -gcd_warp[-2,-1] $1,$3,$bm -endif
    -if {$4==3} -rv -endif
  -endl -done

gcd_warp : -skip ${1=5},${2=0},${3=0} # params: max_warp, smooth, blend_type (currently warp/mult/softlight)
  -repeat {int($!/2)} -l[$>,{$>+1}]
    wfac={$1%*w} -to_rgba[-2,-1] --norm[-1]  # 0=img to warp 1=surface 2=b&w of surface
    -blur_xy[-1] $2%,$2% -n[-1] 0,255 -g[-1] xy -a[-2,-1] c # change 2 into warp field using gradient
    -*[-1] -1 -n[-1] -$wfac,$wfac -warp[0] [-1],1 -rm[-1] # set warp range, warp image 0
    -if {$3==0} -rm[-1] -break -endif # discard surface and exit if blend mode=warp
    -if {$3==1} -blend multiply,1,1 -else -blend softlight,1,1 -endif
  -endl -done

#@gimp xbr2x: gcd_xbr2x, gcd_xbr2x(1)
#@gimp : note = note("Implementation of the xBR 2x [noblend] algorithm by Hyllian.")
##@gimp : note = note("For more info visit: "), note = link("http://board.byuu.org/viewtopic.php?f=10&t=2248")
#@gimp : note = link("http://code.google.com/p/2dimagefilter/wiki/ImageResizer")
#@gimp : sep = separator(), note = note("<small>Author : <i>Garagecoder</i>.  Latest update : <i>2013/05/29</i>.</small>")
#@gimp : note = note("<small>Disclaimer : This is a near complete recode based on C# source from ImageResizer</small>")
#@gimp : note = note("<small>The results may not fully represent the original routine!</small>")
gcd_xbr2x :
-repeat $! -l[$>] -to_rgb[0]
  (-1,-1;0,-1;1,-1;-1,0;0,0;1,0;-1,1;0,1;1,1;\
  -1,-2;0,-2;1,-2;-2,-1;-2,0;-2,1;2,-1;2,0;2,1;-1,2;0,2;1,2)
  pa_=0 pb_=1 pc_=2  pd_=3 pe_=4 pf_=5  pg_=6 ph_=7 pi_=8
  a1_=9 b1_=10 c1_=11  a0_=12 d0_=13 g0_=14
  c4_=15 f4_=16 i4_=17  g5_=18 h5_=19 i5_=20
  e0=21 e1=22 e2=23 e3=24
  ($pe_,$pi_,$ph_,$pf_,$pg_,$pc_,$pd_,$pb_,$f4_,$i4_,$h5_,$i5_,$e1,$e2,$e3;\
  $pe_,$pc_,$pf_,$pb_,$pi_,$pa_,$ph_,$pd_,$b1_,$c1_,$f4_,$c4_,$e0,$e3,$e1;\
  $pe_,$pa_,$pb_,$pd_,$pc_,$pg_,$pf_,$ph_,$d0_,$a0_,$b1_,$a1_,$e2,$e1,$e0;\
  $pe_,$pg_,$pd_,$ph_,$pa_,$pi_,$pb_,$pf_,$h5_,$g5_,$d0_,$g0_,$e3,$e0,$e2)
  -*[1] -1
  -repeat 21 --shift[0] {1,round(i(0,$>))},{1,round(i(1,$>))},0,0,1 -done
  [0] [0] [0] [0]
  -nm[0] orig -mv[0] $! -rm[0] -nm[0] kern -mv[0] $!
  -repeat 4
    pe={kern,i(0,$>)}  pi={kern,i(1,$>)}  ph={kern,i(2,$>)}
    pf={kern,i(3,$>)}  pg={kern,i(4,$>)}  pc={kern,i(5,$>)}
    pd={kern,i(6,$>)}  pb={kern,i(7,$>)}  f4={kern,i(8,$>)}
    i4={kern,i(9,$>)}  h5={kern,i(10,$>)} i5={kern,i(11,$>)}
    n1={kern,i(12,$>)} n2={kern,i(13,$>)} n3={kern,i(14,$>)}
    #compare centre pixel to right/below, create lvl1 mask
    --gcd_eq[$pe,$pf] --gcd_eq[$pe,$ph] -or[-2,-1] -eq[-1] 0 -nm[-1] lvl1
    #get red/blue distances
    --gcd_yuv[$pe,$pc] --gcd_yuv[$pe,$pg] -+[-2,-1]
    --gcd_yuv[$pi,$h5] -+[-2,-1] --gcd_yuv[$pi,$f4] -+[-2,-1]
    --gcd_yuv[$ph,$pf] -*[-1] 4 -+[-2,-1]
    -nm[-1] red
    --gcd_yuv[$ph,$pd] --gcd_yuv[$ph,$i5] -+[-2,-1]
    --gcd_yuv[$pf,$i4] -+[-2,-1] --gcd_yuv[$pf,$pb] -+[-2,-1]
    --gcd_yuv[$pe,$pi] -*[-1] 4 -+[-2,-1]
    -nm[-1] blue
    #take colour from closest match between centre and right/below
    --gcd_yuv[$pe,$pf] --gcd_yuv[$pe,$ph] -le[-2,-1]
    --image[$ph] [$pf],0,0,0,0,1,[-1] -nm[-1] px -rm[-2]
    #If (red<blue)&&((pf!=i4)&&(ph!=i5)&&(pe==pi)||(pf!=pb)&&(ph!=pd)||(pe==pg)||(pe==pc))
    --lt[red,blue]
    --gcd_neq[$pf,$i4] --gcd_neq[$ph,$i5] -and[-2,-1] --gcd_eq[$pe,$pi] -and[-2,-1]
    --gcd_neq[$pf,$pb] --gcd_neq[$ph,$pd] -and[-2,-1] -or[-2,-1]
    --gcd_eq[$pe,$pg] -or[-2,-1] --gcd_eq[$pe,$pc] -or[-2,-1]
    -and[-2,-1] -nm[-1] lvl2
    #level 2 interp
      --gcd_yuv[$pf,$pg] -nm[-1] lver # left vertice dist
      --gcd_yuv[$ph,$pc] -nm[-1] uver # upper vertice dist
      #If 2lv<=uv AND pe,pd != pg THEN Left2X(n3,n2,px)
      --*[lver] 2 -le[-1] [uver]
      --gcd_neq[$pg,$pe] --gcd_neq[$pg,$pd] -and[-2,-1]
      -and[-2,-1] -and[-1] [lvl2] -image[$n3] [px],0,0,0,0,1,[-1]
      #If 2uv<lv AND pe,pb != pc THEN Up2X(n3,n1,px)
      --*[uver] 2 -lt[-1] [lver]
      --gcd_neq[$pc,$pe] --gcd_neq[$pc,$pb] -and[-2,-1]
      -and[-2,-1] -and[-1] [lvl2] -image[$n3] [px],0,0,0,0,1,[-1]
      #ELSE Dia2X(n3,px) - not relevant for noblend
      #-or[-2,-1] -eq[-1] 0
      -rm[-2,-1,lver,uver]
    #else if red<=blue blend - not relevant for noblend
    #-eq[lvl2] 0 -and[lvl1,lvl2] --le[red,blue] -and[lvl1,-1]
    #blend pixel using lvl1 mask
    #-image[$n3] [px],0,0,0,0,0,[lvl1]
    -rm[red,blue,lvl1,lvl2,px] #cleanup
  -done
  #render scaled image
  {orig,w},{orig,h},1,1,1 -r2dx[-1] {orig,w*2},4 -nm[-1] msk
  -r2dx[orig,$e0,$e1,$e2,$e3] {orig,w*2},1
  -image[orig] [$e0],0,0,0,0,1,[msk] -shift[msk] 1
  -image[orig] [$e1],0,0,0,0,1,[msk] -shift[msk] -1,1
  -image[orig] [$e2],0,0,0,0,1,[msk] -shift[msk] 1
  -image[orig] [$e3],0,0,0,0,1,[msk]
  -k[orig]
-endl -done

gcd_eq : -l[-2,-1] --[-2,-1] -norm[-1] -eq[-1] 0 -endl
gcd_neq : -l[-2,-1] --[-2,-1] -norm[-1] -neq[-1] 0 -endl
gcd_yuv : -l[-2,-1] --[-2,-1] -abs[-1] -rgb2yuv[-1] -abs[-1] -s[-1] c -*[-3] 48 -*[-2] 7 -*[-1] 6 -+[-3--1] -endl

#@gimp JPEG Smooth : gcd_jpeg_smooth, gcd_jpeg_smooth_preview(0)
#@gimp : note = note("<i>Quick JPEG cleanup for moderate compression glitches</i>")
#@gimp : sep = separator()
#@gimp : Compression Filter = bool(1)
#@gimp : Anti Alias = bool(1)
#@gimp : Quick Enlarge = bool(0)
#@gimp : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gimp : sep = separator(), note = note("<small>Author : <i>Garagecoder</i>.      Latest update : <i>2013/02/09</i>.</small>")
gcd_jpeg_smooth : -skip ${1=1},${2=1},${3=0}
  -repeat $! -l[$>]
    -if $1 -gcd_comp_blur[-1] 2,3,1,100,1 -endif
    -if $3 -r[-1] 140%,140%,1,3,5 -c[-1] 0,255 -endif
    -if $2 -gcd_anti_alias[-1] 10,0.3,10 -endif
  -endl -done

gcd_jpeg_smooth_preview :
  -gimp_split_preview "-gcd_jpeg_smooth ${1--2}",$-1

#@gimp Compression Blur : gcd_comp_blur, gcd_comp_blur_preview(0)
#@gimp : note = note("<i>For subtle smoothing of compression artifacts</i>")
#@gimp : sep = separator(), note = note("<small>1. Preview will <b>not</b> show the final result accurately.</small>")
#@gimp : note = note("<small>2. Be sure to apply <b>before</b> any image resizing.</small>")
#@gimp : note = note("<small>3. Reduce grid width when increasing divisions to avoid over-smoothing.</small>")
#@gimp : note = note("<small>4. Set grid divisions to zero for 100% smoothing.\n</small>")
#@gimp : sep = separator()
#@gimp : Grid Divisions = int(2,0,3)
#@gimp : Grid Width = int(3,1,3)
#@gimp : Grid Smoothing = float(1,0,1)
#@gimp : Preserve Edges = int(100,0,100)
#@gimp : Colour Channels = bool(1)
#@gimp : Boost Smooth = bool(0)
#@gimp : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gimp : sep = separator(), note = note("<small>Author : <i>Garagecoder</i>.      Latest update : <i>2015/05/15</i>.</small>")
gcd_comp_blur : -skip ${1=2},${2=3},${3=1},${4=100},${5=1},${6=0}
  gsz={2^(5-$1)}
  -repeat $! -l[$>]
    -remove_opacity[-1]
    --to_gray[0] -edges[-1] 14.5% -n[-1] {100-$4}%,100%
    -if {0,s>1" && "$5}
      --ac[0] "-median 5",ycbcr_cbcr
      -image[0] [-1],0,0,0,0,1,[-2] -rm[-1]
    -endif
    -if {$1==0} {w},{h},1,1,255 -mul[-2,-1] -else
      {w},{h},1,1,0
      -grid[-1] $gsz,$gsz,0,0,1,255
      -if {$2>=2} -grid[-1] $gsz,$gsz,1,1,1,255 -endif
      -if {$2==3} -grid[-1] $gsz,$gsz,-1,-1,1,255 -endif
      -blur[-1] $3,0 -mul[-2,-1]
    -endif
    -i[-2] [0] -append[-2,-1] c
    -smooth[1] {100*$6+100},0.6,0.3
    -blend[0,1] alpha
    -if {!$6} -sharpen[-1] 20 -endif
  -endl -done

gcd_comp_blur_preview :
  -gimp_split_preview "-gcd_comp_blur ${1--2}",$-1

#@gimp Anti Alias : gcd_anti_alias, gcd_anti_alias_preview(0)
#@gimp : note = note("<i>Selectively smooth resizing pixelation</i>"), sep = separator()
#@gimp : Smooth Amount = int(60,0,200)
#@gimp : Edge Exponent = float(0.3,0,10)
#@gimp : Lighten Edges = int(50,0,255)
#@gimp : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gimp : sep = separator(), note = note("<small>Author : <i>Garagecoder</i>.      Latest update : <i>2013/02/09</i>.</small>")
gcd_anti_alias : -skip ${1=10},${2=0.3},${3=10}
  -repeat $! -l[$>]
    -remove_opacity[-1]
    --smooth[0] $1,0,1,1.6,1.1,0.8,30,0.6
    --gradient_norm[0] --n[-1] 0,$3 -add[0,-1]
    -pow[-1] $2 -n[-1] 0,255
    --gradient_norm[-1] -pow[-1] $2 -n[-1] 0,255
    -blend[-2,-1] overlay -append[-2,-1] c
    -blend[0,1] alpha -c 0,255
  -endl -done

gcd_anti_alias_preview :
  -gimp_split_preview "-gcd_anti_alias ${1--2}",$-1

gcd_srgb2jpeg :
  -repeat $! -l[$>]
    -if {s<3} -continue -endif
    -if {s==4} -split_opacity -endif
    -mix_rgb[0] 0.299,0.587,0.114,-0.1687,-0.3313,0.5,0.5,-0.4187,-0.0813
    -sh[0] 1,2 -+[-1] 128 -rm[-1] -a c
  -endl -done

gcd_jpeg2srgb :
  -repeat $! -l[$>]
    -if {s<3} -continue -endif
    -if {s==4} -split_opacity -endif
    -sh[0] 1,2 --[-1] 128 -rm[-1]
    -mix_rgb[0] 1,0,1.402,1,-0.34414,-0.71414,1,1.772,0 -a c
  -endl -done

gcd_srgb2luma :
  -repeat $! -l[$>]
    -remove_opacity
    -if {s!=3} -continue -endif
    -sh[0] 0,0 -sh[0] 1,1 -sh[0] 2,2
    -*[1] 0.299 -*[2] 0.587 -*[3] 0.114
    -+[1-3] -rm[1] -channels[0] 0
  -endl -done

gcd_srgb2luminance :
  -repeat $! -l[$>]
    -remove_opacity
    -if {s!=3} -continue -endif
    -srgb2rgb[0] -sh[0] 0,0 -sh[0] 1,1 -sh[0] 2,2
    -*[1] 0.2126 -*[2] 0.7152 -*[3] 0.0722
    -+[1-3] -rm[1] -channels[0] 0
  -endl -done

gcd_label : -skip ${1=4},${2=0.067}
#***** CUSTOM LABEL, INPAINT SMALL AREAS *****
# -gcd_label <tolerance=4>,<size=0.2>
  -repeat $! -l[$>]
    -label[-1] $1,1 nb={1+iM}
    --histogram[-1] $nb,0,{$nb-1}
    --map[-2] [-1] -rm[-2]
    -le[-1] {$2%*w*h} -*[-1] 255
    -inpaint[-2] [-1] -rm[-1]
  -endl -done

gcd_shrink :
#***** SHRINK AN IMAGE TO 700px FOR SPEED *****
  _gcd_w={0,w} _gcd_h={0,h}
  -repeat $! -l[$>] -if {max(w,h)>700} -rr2d[-1] 700,700,0,1 -endif -endl -done

gcd_unshrink :
  -repeat $! -l[$>] -r $_gcd_w,$_gcd_h -endl -done

gcd_fix_gimp_alpha :
#***** Force gimp to set transparent region pixels black *****
  -repeat $! -l[$>] -if {s==2||s==4}
    -sh 0,{s-2} -sh[0] 100%,100% -max[-1] 1 --neq[-1] 1 -*[-3,-1] -k[0]
  -endif -endl -done

#@gimp _

# Local Variables:
# mode: sh
# End:
#
# (End of G'MIC custom commands)
