#@gmic
#
#  File        : compatibility.gmic
#                ( G'MIC commands file )
#
#  Description : The commands below are only defined for backward compatibility.
#                They should actually *not* be used in your .gmic filter files.
#
#  Copyright   : David Tschumperle
#                ( http://tschumperle.users.greyc.fr/ )
#
#  License     : CeCILL v2.0
#                ( http://www.cecill.info/licences/Licence_CeCILL_V2-en.html )
#
#  This software is governed by the CeCILL  license under French law and
#  abiding by the rules of distribution of free software.  You can  use,
#  modify and/ or redistribute the software under the terms of the CeCILL
#  license as circulated by CEA, CNRS and INRIA at the following URL
#  "http://www.cecill.info".
#
#  As a counterpart to the access to the source code and  rights to copy,
#  modify and redistribute granted by the license, users are provided only
#  with a limited warranty  and the software's author,  the holder of the
#  economic rights,  and the successive licensors  have only  limited
#  liability.
#
#  In this respect, the user's attention is drawn to the risks associated
#  with loading,  using,  modifying and/or developing or reproducing the
#  software by the user in light of its specific status of free software,
#  that may mean  that it is complicated to manipulate,  and  that  also
#  therefore means  that it is reserved for developers  and  experienced
#  professionals having in-depth computer knowledge. Users are therefore
#  encouraged to load and test the software's suitability as regards their
#  requirements in conditions enabling the security of their systems and/or
#  data to be ensured and,  more generally, to use and operate it in the
#  same conditions as regards security.
#
#  The fact that you are presently reading this means that you have had
#  knowledge of the CeCILL license and that you accept its terms.
#

at : -skip ${1=0},${2=0},${3=0}
  -v - --z. ${1-3},${1-3} -u {^} -rm. -v +

file_slash :
  -v - -if ${-is_windows} -u "\\" -else -u "/" -endif -v +

variance_noise :
  -u {${-std_noise}^2}

guided : -skip ${3=""}  # Non-native implementation for < 1.6.0.2.
  -if {!${-is_image_arg\ $1}} -check "$1>=0 && $2>=0" # Without specified guide.
    -e[0--3] "Blur image$? using fast guided-filtering, with radius $1 and regularization $2."
    -v - -repeat $! -guided[$>] [$>],$1,$2 -done
  -else -check "$2>=0 && $3>=0" # With specified guide.
    -e[0--3] "Blur image$? using fast guided-filtering, with guide $1, radius $2 and regularization $3."
    -v - R={1+2*round($2)}
    -repeat $! -pass$1 -l[$>,-1]
      -i[0] [1] -i[1] 100%,100%,1,1,1 --*[2,3] --sqr[3]
      -apply_parallel[1-5] "-_guided "$R,$R",1,0" -/[2-5] [1]
      --*[2,3] --[4,-1] --sqr[3] --[5,-1] -+[-1] $3 -/[-2,-1]
      --*[-1] [-2] --[2,-1] -rm[-2]
      -_guided[2,3] $R,$R,1,0 -/[2,3] [1] -rm[1]
      -*[2] [0] -+[1,2] -k[-1]
    -endl -done
  -endif -v +

_guided : -check "$1>=1 && ${2=$1}>=1 && ${3=1}>=1" -skip ${4=1}
  -e[^-1] "Convolve image$? by a box filter of size $1x$2x$3, with "${-arg\ 1+!$4,neumann,dirichlet}" boundary conditions."
  -v - p1={int($1/2)} p2={$1-$p1} q1={int($2/2)} q2={$2-$q1} r1={int($3/2)} r2={$3-$r1}
  -repeat $! -l[$>]
    -if {d!=1}
      -if $4 -expand_z $r2,1 -endif
      -f '>i+j(0,0,-1)' --shift 0,0,$r2,0,1 -shift[-2] 0,0,-$r1,0,1 --
      -if $4 -shrink_z $r2 -endif
    -endif
    -if {h!=1}
      -if $4 -expand_y $q2,1 -endif
      -f '>i+j(0,-1)' --shift 0,$q2,0,0,1 -shift[-2] 0,-$q1,0,0,1 --
      -if $4 -shrink_y $q2 -endif
    -endif
    -if {w!=1}
      -if $4 -expand_x $p2,1 -endif
      -f '>i+j(-1)' --shift $p2,0,0,0,1 -shift[-2] -$p1,0,0,0,1 --
      -if $4 -shrink_x $p2 -endif
    -endif
  -endl -done -v +

cumul : -cumulate -skip 1

cumulate :
  -e[^-1] "Cumulate values in image$? [compatibility function]."
  -v -
  ({'"$1"'}) axes={^} -f[-1] if((i>={'x'}&&i<={'z'})||i=={'c'},1,0) is_axis_argument={im} -rm[-1]
  -if $is_axis_argument
    -repeat {narg($axes)}
      axis={arg(1+$>,$axes)}
      -if {$axis=={'x'}} -f '>i+j(-1)'
      -elif {$axis=={'y'}} -f '>i+j(0,-1)'
      -elif {$axis=={'z'}} -f '>i+j(0,0,-1)'
      -elif {$axis=={'c'}} -f '>i+j(0,0,0,-1)'
      -endif
    -done
  -else -noarg -repeat $! -l[$>] whds={w},{h},{d},{s} -y x -f '>i+j(-1)' -r $whds,-1 -endl -done
  -endif
  -v +

threshold2 : -ir $*
t2 : -ir $*

gimp_split_freq :
  -repeat $!
    --b[-1] $1 --[-2] [-1] -/[-2] 2 -+[-2] 128 -rv[-2,-1]
  -mv[-2,-1] 0 -done

gimp_compose_freq :
  -repeat {int($!/2)}
    --[-1] 128 -*[-1] 2 -+[-2,-1] -c[-1] 0,255
  -mv[-1] 0 -done

blend_shapeaverage : -blend shapeaverage0

compose_alpha :
  -e[^-1] "Compose image$? two-by-two, using alpha blending."
  -v - -repeat {int($!/2)} -l[$>,{$>+1}]
    -r[-1] [-2],[-2],[-2],100%,0,0,0.5,0.5
    -to_colormode[-2] {a1=!({-2,s}%2);a2=!(s%2);max({-2,s}-a1,s-a2)+a1}
    -to_colormode[-1] {a=max({-2,s},s);a+(a%2)}
    -if {-2,s==2" || "s==4} # Background has alpha.
      -_compose_alpha[-2] -_compose_alpha[-1]
      -sh[-1] {s-1},{s-1} --*[-3,-1] -rm[-2] -+[-3,-2] --[-2,-1]
      -sh[-1] 0,{s-2} -sh[-2] {-2,s-1},{-2,s-1}
      -max[-1] 1e-10 -/[-2] [-1] -*[-1] 255 -rm[-2,-1]
    -else                        # Background has no alpha.
      -sh[-1] 0,{s-2} -sh[-2] {-2,s-1},{-2,s-1} --[-2] [-4] -*[-2,-1] -/[-1] 255 -rm[-1] -+[-2,-1]
    -endif
  -endl -done -c 0,255 -v +

_compose_alpha :
  -sh[-1] 0,{s-2} -sh[-2] {-2,s-1},{-2,s-1} -max[-1] 1e-10 -/[-1] 255 -*[-2,-1] -rm[-1]

compose_average :
  -e[^-1] "Compose image$? two-by-two, using average mode."
  -v - -repeat {int($!/2)} -l[$>,{$>+1}]
    -to_colormode 0 -r[-1] [-2],0,0,0.5,0.5 -+
  -endl -done -/ 2 -v +

compose_colorburn :
  -e[^-1] "Compose image$? two-by-two, using colorburn mode."
  -v - -repeat {int($!/2)} -l[$>,{$>+1}]
    -to_colormode 0 -r[-1] [-2],0,0,0.5,0.5 --[-2] 255 -+[-1] 0.1 -/
  -endl -done -* 256 -+ 255 -c 0,255 -v +

compose_darken :
  -e[^-1] "Compose image$? two-by-two, using darken mode."
  -v - -repeat {int($!/2)} -l[$>,{$>+1}]
    -to_colormode 0 -r[-1] [-2],0,0,0.5,0.5 -min
  -endl -done -v +

compose_difference :
  -e[^-1] "Compose image$? two-by-two, using difference mode."
  -v - -repeat {int($!/2)} -l[$>,{$>+1}]
    -to_colormode 0 -r[-1] [-2],0,0,0.5,0.5 --
  -endl -done -abs -v +

compose_divide :
  -e[^-1] "Compose image$? two-by-two, using divide mode."
  -v - -repeat {int($!/2)} -l[$>,{$>+1}]
    -to_colormode 0 -r[-1] [-2],0,0,0.5,0.5 -*[-2] 256 -+[-1] 1 -/
  -endl -done -c 0,255 -v +

compose_dodge :
  -e[^-1] "Compose image$? two-by-two, using dodge mode."
  -v - -repeat {int($!/2)} -l[$>,{$>+1}]
    -to_colormode 0 -r[-1] [-2],0,0,0.5,0.5 --[-1] 255.1 -/
  -endl -done -* -256 -c 0,255 -v +

compose_edges : -check {$1>=0}
  -e[^-1] "Compose image$? using edge mode, with smoothness $1."
  -if {$!>1} -v - -to_rgb -r[^0] [0],0,0,0.5,0.5 -repeat $! -l[$>]
    --gradient_norm -+[-1] 1 -b[-1] $1 -n[-1] 1,10 -sqr[-1] -s[-2] c -*[-4--2] [-1] -a[-4--1] c
  -endl -done -r[^0] [0],0,0,0.5,0.5 -+ -s[-1] c -/[-4--2] [-1] -rm[-1] -a[-3--1] c -v + -endif

compose_exclusion :
  -e[^-1] "Compose image$? two-by-two, using exclusion mode."
  -v - -repeat {int($!/2)} -l[$>,{$>+1}]
    -to_colormode 0 -r[-1] [-2],0,0,0.5,0.5 --*[-2] [-1] -/[-1] -128 -+
  -endl -done -v +

compose_fade :
  -e[^-1] "Compose image$? using fading mode."
  -v - -r[^0] ${-max_whd},100%,3
  -r[1--2] 100%,100%,100%,${-max_s} -channels[-1] 0
  -repeat {$!-1} ---[-1] $> -abs[-1] --[-1] 1 -*[-1] -1 -max[-1] 0 -*[$>,-1] -done
  -rm[-1] -+ -v +

compose_freeze :
  -e[^-1] "Compose image$? two-by-two, using freeze mode."
  -v - -repeat {int($!/2)} -l[$>,{$>+1}]
    -to_colormode 0 -r[-1] [-2],0,0,0.5,0.5 --[-2] 255 -sqr[-2] -+[-1] 0.1 -/
  -endl -done -- 255 -* -1 -c 0,255 -v +

compose_grainextract :
  -e[^-1] "Compose image$? two-by-two, using grain extract mode."
  -v - -repeat {int($!/2)} -l[$>,{$>+1}]
    -to_colormode 0 -r[-1] [-2],0,0,0.5,0.5 --
  -endl -done -+ 128 -c 0,255 -v +

compose_grainmerge :
  -e[^-1] "Compose image$? two-by-two, using grain merge mode."
  -v - -repeat {int($!/2)} -l[$>,{$>+1}]
    -to_colormode 0 -r[-1] [-2],0,0,0.5,0.5 -+
  -endl -done -- 128 -c 0,255 -v +

compose_hardlight :
  -e[^-1] "Compose image$? two-by-two, using hard light mode."
  -v - -repeat {int($!/2)} -l[$>,{$>+1}]
    -to_colormode 0 -r[-1] [-2],0,0,0.5,0.5
    --ge[-1] 128 --*[-3] [-2] -/[-1] 128
    --[-4,-3] 255 -*[-4,-3] -/[-3] 128 --[-3] 255 -*[-3] -1
    -*[-3] [-2] -*[-2] -1 -+[-2] 1 -*[-2,-1] -+
  -endl -done -v +

compose_hue :
  -e[^-1] "Compose image$? two-by-two, using hue mode."
  -v - -repeat {int($!/2)} -l[$>,{$>+1}]
    -to_colormode 0 -r[-1] [-2],0,0,0.5,0.5 -to_rgba -sh 0,2
    -rgb2hsv[-2,-1] -sh[-2] 0,0 -j[-2] [-1] -rm[-5,-3,-1] -hsv2rgb[-1] -rm[-1]
  -endl -done -v +

compose_interpolation :
  -e[^-1] "Compose image$? two-by-two, using interpolation mode."
  -v - -repeat {int($!/2)} -l[$>,{$>+1}]
    -to_colormode 0 -r[-1] [-2],0,0,0.5,0.5 -* 0.012271846 -cos -/ -4 -+
  -endl -done -+ 0.5 -* 256 -v +

compose_lighten :
  -e[^-1] "Compose image$? two-by-two, using lighten mode."
  -v - -repeat {int($!/2)} -l[$>,{$>+1}]
    -to_colormode 0 -r[-1] [-2],0,0,0.5,0.5 -max
  -endl -done -v +

compose_lightness :
  -e[^-1] "Compose image$? two-by-two, using lightness mode."
  -v - -repeat {int($!/2)} -l[$>,{$>+1}]
    -to_colormode 0 -r[-1] [-2],0,0,0.5,0.5 -to_rgba -sh 0,2
    -rgb2lab[-2,-1] -sh[-2] 0,0 -j[-2] [-1],0,0,0,0 -rm[-5,-3,-1] -lab2rgb[-1] -rm[-1]
  -endl -done -v +

compose_luminance :
  -e[^-1] "Compose image$? two-by-two, using luminance mode."
  -v - -repeat {int($!/2)}
    -to_colormode[-2,-1] 0 -r[-1] [-2],0,0,0.5,0.5 -to_rgba[-2,-1] -sh[-2,-1] 0,2
    -rgb2ycbcr[-2,-1] -sh[-2] 0,0 -j[-2] [-1],0,0,0,0 -rm[-5,-3,-1] -ycbcr2rgb[-1] -rm[-1]
  -mv[-1] 0 -done -v +

compose_median :
  -e[^-1] "Compose image$? using median mode."
  -if {$!==1} -return -endif
  -v - -r[^0] [0],0,0,0.5,0.5 -a z -permute zxyc -s y,-64
  -repeat $! -l[$>]
    -r 100%,{w*100}%
    -s z -median {w} w={w} -columns {int(w/2)} -r 1,{h/$w} -a z
  -endl -done -a y -permute yzxc -v +

compose_multiply :
  -e[^-1] "Compose image$? two-by-two, using multiply mode."
  -v - -repeat {int($!/2)} -l[$>,{$>+1}]
    -to_colormode 0 -r[-1] [-2],0,0,0.5,0.5 -*
  -endl -done -/ 255 -v +

compose_negation :
  -e[^-1] "Compose image$? two-by-two, using negation mode."
  -v - -repeat {int($!/2)} -l[$>,{$>+1}]
    -to_colormode 0 -r[-1] [-2],0,0,0.5,0.5 -+
  -endl -done -- 255 -abs -- 255 -* -1 -v +

compose_overlay :
  -e[^-1] "Compose image$? two-by-two, using overlay mode."
  -v - -repeat {int($!/2)} -l[$>,{$>+1}]
    -to_colormode 0 -r[-1] [-2],0,0,0.5,0.5
    --ge[-2] 128
    --*[-3] [-2] -/[-1] 128
    --[-4,-3] 255 -*[-4,-3] -/[-3] 128 --[-3] 255 -*[-3] -1
    -*[-3] [-2] -*[-2] -1 -+[-2] 1 -*[-2,-1] -+
  -endl -done -v +

compose_reflect :
  -e[^-1] "Compose image$? two-by-two, using reflect mode."
  -v - -repeat {int($!/2)} -l[$>,{$>+1}]
    -to_colormode 0 -r[-1] [-2],0,0,0.5,0.5 -sqr[-2] --[-1] 255.1 -/
  -endl -done -* -1 -c 0,255 -v +

compose_rgba :
  -e[^-1] "Compose image$? two-by-two, using alpha blending."
  -v - -to_rgb[0--1:2] -compose_alpha -v +

compose_saturation :
  -e[^-1] "Compose image$? two-by-two, using saturation mode."
  -v - -repeat {int($!/2)} -l[$>,{$>+1}]
    -to_colormode 0 -r[-1] [-2],0,0,0.5,0.5 -to_rgba -sh 0,2
    -rgb2hsv[-2,-1] -sh[-2] 1,1 -j[-2] [-1],0,0,0,1 -rm[-5,-3,-1] -hsv2rgb[-1] -rm[-1]
  -endl -done -v +

compose_screen :
  -e[^-1] "Compose image$? two-by-two, using screen mode."
  -v - -repeat {int($!/2)} -l[$>,{$>+1}]
    -to_colormode 0 -r[-1] [-2],0,0,0.5,0.5 -- 255 -*
  -endl -done -/ 256 -- 255 -* -1 -v +

compose_shapeaverage :
  -e[^-1] "Compose image$? two-by-two, using shape average mode."
  -v - -repeat {int($!/2)} -l[-2,-1] nm={0,n}
    -channels[-1] 0 -ge[-1] 50% -label_fg[-1] 0 nb={iM+1} -*[-1] 256
    -rv[-2,-1] m={im} M={iM} -n[-1] 0,255 -s[-1] c -+[^0] [0]
    -repeat {$!-1}
      -histogram[-1] {$nb*256},0,{$nb*256-1}
      -i[-2] 256,1,1,1,'x' -r[-2] {w},1,1,1,0,2 -*[-2] [-1] -r[-2,-1] $nb,1,1,1,2 -max[-1] 1 -/[-2,-1]
    -mv[-1] 1 -done
    -/[0] 256 -a[^0] c -*[-1] {($M-$m)/256} -+[-1] $m -point[-1] 0,0,0,1,0 -map[0] [-1] -rm[-1]
  -nm $nm,1 -endl -mv[-1] 0 -done -v +

compose_softlight :
  -e[^-1] "Compose image$? two-by-two, using soft light mode."
  -v - -repeat {int($!/2)} -l[$>,{$>+1}]
    -to_colormode 0 -r[-1] [-2],0,0,0.5,0.5 -/ 256 --*[-2] [-1] -*[-1] 2 -sqr[-3] -*[-2] [-3] -*[-2] -2 -+
  -endl -done -* 256 -v +

compose_stamp :
  -e[^-1] "Compose image$? two-by-two, using stamp mode."
  -v - -repeat {int($!/2)} -l[$>,{$>+1}]
    -to_colormode 0 -r[-1] [-2],0,0,0.5,0.5 -*[-1] 2 -+
  -endl -done -- 255 -c 0,255 -v +

compose_value :
  -e[^-1] "Compose image$? two-by-two, using value mode."
  -v - -repeat {int($!/2)} -l[$>,{$>+1}]
    -to_colormode 0 -r[-1] [-2],0,0,0.5,0.5 -to_rgba -sh 0,2
    -rgb2hsv[-2,-1] -sh[-2] 2,2 -j[-2] [-1],0,0,0,2 -rm[-5,-3,-1] -hsv2rgb[-1] -rm[-1]
  -endl -done -v +

compose_xor :
  -e[^-1] "Compose image$? two-by-two, using xor mode."
  -v - -repeat {int($!/2)} -l[$>,{$>+1}]
    -to_colormode 0 -r[-1] [-2],0,0,0.5,0.5 -xor
  -endl -done -v +

_gimp_compose :
  -repeat {int($!/2)} --compose_$1[-2,-1] -rm[-3] -to_rgba[-1] -sh[-1] 3,3 -*[-1] $2 -rm[-1] -compose_alpha[-2,-1] -mv[-1] 0 -done

_gimp_revert_layers :
  -repeat {int($!/2)} -rv[{2*$>},{2*$>+1}] -done

gimp_compose_alpha :
  -if ${2=0} -_gimp_revert_layers -endif
  -repeat {int($!/2)}
    -to_rgba[-1] -sh[-1] 3,3 -*[-1] $1 -rm[-1]
    -compose_alpha[-2,-1]
  -mv[-1] 0 -done

gimp_compose_average :
  -if ${2=0} -_gimp_revert_layers -endif
  -_gimp_compose average,$1

gimp_compose_colorburn :
  -if ${2=0} -_gimp_revert_layers -endif
  -_gimp_compose colorburn,$1

gimp_compose_darken :
  -if ${2=0} -_gimp_revert_layers -endif
  -_gimp_compose darken,$1

gimp_compose_difference :
  -if ${2=0} -_gimp_revert_layers -endif
  -to_rgb -_gimp_compose difference,$1

gimp_compose_divide :
  -if ${2=0} -_gimp_revert_layers -endif
  -_gimp_compose divide,$1

gimp_compose_dodge :
  -if ${2=0} -_gimp_revert_layers -endif
  -_gimp_compose dodge,$1

gimp_compose_edges :
  -if ${3=0} -_gimp_revert_layers -endif
  -repeat {int($!/2)} --compose_edges[-2,-1] $2 -rm[-3] -to_rgba[-1] -sh[-1] 3,3 -*[-1] $1 -rm[-1] -compose_alpha[-2,-1] -mv[-1] 0 -done

gimp_compose_exclusion :
  -if ${2=0} -_gimp_revert_layers -endif
  -to_rgb -_gimp_compose exclusion,$1

gimp_compose_fade :
  -if {$!==1} -return -endif
  -to_colormode 4
  -if {$1==0} [0],[0],1,1,"$10"
  -else -_gimp_compose_fade$1 $7,$8,$9 -r[-1] [0],[0],1,1,3
  -endif
  -n[-1] {-($!-2)*$3},{($!-2)*(1+$3)}
  --[-1] {$2*(1+$3)*($!-2)}
  -c[-1] 0,{$!-2}
  -if $6 -rv[^-1] -endif
  -if $5 -round[-1] 1
  -else -roundify[-1] $4
  -endif
  -compose_fade
  -c 0,255

_gimp_compose_fade1 : [0],[0],1,1,"a=$1*pi/2; x*cos(a) + y*sin(a)"
_gimp_compose_fade2 : [0],[0],1,1,0 -=[-1] 1,{($1+1)*50}%,{($2+1)*50}% -distance[-1] 1
_gimp_compose_fade3 : [0],[0],1,1,0 -=[-1] 1,{($1+1)*50}%,{($2+1)*50}% -distance[-1] 1 -*[-1] {0.01+$3/2} -cos[-1]
_gimp_compose_fade4 : [0],[0],1,1,"((x-w*($1+0.5))*(y-h*($2+0.5)))%(0.2*w*h*(1.001+$3))"

gimp_compose_freeze :
  -if ${2=0} -_gimp_revert_layers -endif
  -_gimp_compose freeze,$1

gimp_compose_grainextract :
  -if ${2=0} -_gimp_revert_layers -endif
  -_gimp_compose grainextract,$1

gimp_compose_grainmerge :
  -if ${2=0} -_gimp_revert_layers -endif
  -_gimp_compose grainmerge,$1

gimp_compose_hardlight :
  -if ${2=0} -_gimp_revert_layers -endif
  -_gimp_compose hardlight,$1

gimp_compose_hue : -skip ${2=0}
  -if ${2=0} -_gimp_revert_layers -endif
  -_gimp_compose hue,$1

gimp_compose_interpolation :
  -if ${2=0} -_gimp_revert_layers -endif
  -_gimp_compose interpolation,$1

gimp_compose_lighten :
  -if ${2=0} -_gimp_revert_layers -endif
  -_gimp_compose lighten,$1

gimp_compose_lightness : -skip ${2=0}
  -if ${2=0} -_gimp_revert_layers -endif
  -_gimp_compose lightness,$1

gimp_compose_luminance : -skip ${2=0}
  -if ${2=0} -_gimp_revert_layers -endif
  -_gimp_compose luminance,$1

gimp_compose_multiply :
  -if ${2=0} -_gimp_revert_layers -endif
  -_gimp_compose multiply,$1

gimp_compose_negation :
  -if ${2=0} -_gimp_revert_layers -endif
  -to_rgb -_gimp_compose negation,$1

gimp_compose_overlay :
  -if ${2=0} -_gimp_revert_layers -endif
  -_gimp_compose overlay,$1

gimp_compose_reflect :
  -if ${2=0} -_gimp_revert_layers -endif
  -_gimp_compose reflect,$1

gimp_compose_saturation : -skip ${2=0}
  -if ${2=0} -_gimp_revert_layers -endif
  -_gimp_compose saturation,$1

gimp_compose_screen :
  -if ${2=0} -_gimp_revert_layers -endif
  -_gimp_compose screen,$1

gimp_compose_shapeaverage :
  -if ${3=0} -_gimp_revert_layers -endif
  -to_rgb
  -repeat {int($!/2)}
    -rv[-2,-1]
    -if $1 -i[0] [-1] -endif
    -compose_shapeaverage[-2,-1]
    -if $1 -*[0,-1] -/[0] 255 -mv[0] $! -endif
    -if $2 -to_rgba[-1] -replace_color[-1] 0,0,0,0,0,255,0,0,0,0 -endif
  -mv[-1] 0 -done

gimp_compose_softlight :
  -if ${2=0} -_gimp_revert_layers -endif
  -_gimp_compose softlight,$1

gimp_compose_stamp :
  -if ${2=0} -_gimp_revert_layers -endif
  -_gimp_compose stamp,$1

gimp_compose_value : -skip ${2=0}
  -if ${2=0} -_gimp_revert_layers -endif
  -_gimp_compose value,$1

gimp_compose_xor :
  -if ${2=0} -_gimp_revert_layers -endif
  -to_rgb -_gimp_compose xor,$1

resize2x :
  -scale2x

resize3x :
  -scale3x

#@gmic apply_channels_old : "command",_channels={ all=0 | rgba=1 | rgb=2 | y=3 | cbcr=4 | cb=5 | cr=6 | l=7 | ab=8 | a=9 | b=10 | h=11 | s=12 | v=13 | k=14 | cg=15 | ch=16 | c=17 | H=18 | r=19 | g=20 | b=21 | alpha==22 },_normalize={ 0=do nothing | 1=cut | 2=normalize }
#@gmic : Apply specified command on chosen normalized channels of each selected images.
#@gmic : Default value: 'normalize=0'.
#@gmic : $ image.jpg --apply_channels_old "-equalize -blur 2",cbcr
apply_channels_old : -skip ${3=0}

  # All components.
  -if {['$2']==['all']" || "['$2']==['0']}
    -e[^-1] "Apply command '$1' on image$?." -v -
    -repeat $! -l[$>]
      -_apply_channels_old "$1"
      -if {$3==1} -c 0,255 -elif {$3==2} -n 0,255 -endif
    -endl -done

  # RGBA.
  -elif {['$2']==['rgba']" || "['$2']==['1']}
    -e[^-1] "Apply command '$1' on RGBA channels of image$?." -v -
    -to_rgba -repeat $! -l[$>]
      -_apply_channels_old "$1"
      -if {$3==1} -c 0,255 -elif {$3==2} -n 0,255 -endif
    -endl -done

  # RGB.
  -elif {['$2']==['rgb']" || "['$2']==['2']}
    -e[^-1] "Apply command '$1' on RGB channels of image$?." -v -
    -repeat $! -l[$>]
      -split_opacity -to_rgb[0]
      -_apply_channels_old[0] "$1"
      -if {$3==1} -c[0] 0,255 -elif {$3==2} -n[0] 0,255 -endif
      -to_rgb[0]
      -a c
    -endl -done

  # Y.
  -elif {['$2']==['y']" || "['$2']==['3']}
    -e[^-1] "Apply command '$1' on luminance Y of image$?." -v -
    -repeat $! -l[$>]
      -split_opacity -to_rgb[0] -rgb2ycbcr[0] -s[0] c
      -_apply_channels_old[0] "$1" -channels[0] 0
      -if {$3==1} -c[0] 0,255 -elif {$3==2} -n[0] 0,255 -endif
      -a[0-2] c -ycbcr2rgb[0] -a c
    -endl -done

  # CbCr.
  -elif {['$2']==['cbcr']" || "['$2']==['4']}
    -e[^-1] "Apply command '$1' on blue and red chrominances CbCr of image$?." -v -
    -repeat $! -l[$>]
      -split_opacity -to_rgb[0] -rgb2ycbcr[0] -s[0] c -a[1,2] c
      -_apply_channels_old[1] "$1" -channels[1] 0,1
      -if {$3==1} -c[1] 0,255 -elif {$3==2} -n[1] 0,255 -endif
      -a[0-1] c -ycbcr2rgb[0] -a c
    -endl -done

  # Cb.
  -elif {['$2']==['cb']" || "['$2']==['5']}
    -e[^-1] "Apply command '$1' on blue chrominance Cb of image$?." -v -
    -repeat $! -l[$>]
      -split_opacity -to_rgb[0] -rgb2ycbcr[0] -s[0] c
      -_apply_channels_old[1] "$1" -channels[1] 0
      -if {$3==1} -c[1] 0,255 -elif {$3==2} -n[1] 0,255 -endif
      -a[0-2] c -ycbcr2rgb[0] -a c
    -endl -done

  # Cr.
  -elif {['$2']==['cr']" || "['$2']==['6']}
    -e[^-1] "Apply command '$1' on red chrominance Cr of image$?." -v -
    -repeat $! -l[$>]
      -split_opacity -to_rgb[0] -rgb2ycbcr[0] -s[0] c
      -_apply_channels_old[2] "$1" -channels[2] 0
      -if {$3==1} -c[2] 0,255 -elif {$3==2} -n[2] 0,255 -endif
      -a[0-2] c -ycbcr2rgb[0] -a c
    -endl -done

  # L.
  -elif {['$2']==['l']" || "['$2']==['7']}
    -e[^-1] "Apply command '$1' on lightness L of image$?." -v -
    -repeat $! -l[$>]
      -split_opacity -to_rgb[0] -rgb2lab[0] -s[0] c
      -*[0] 2.55 -_apply_channels_old[0] "$1" -channels[0] 0 -/[0] 2.55
      -if {$3==1} -c[0] 0,100 -elif {$3==2} -n[0] 0,100 -endif
      -a[0-2] c -lab2rgb[0] -a c
    -endl -done

  # a-b.
  -elif {['$2']==['ab']" || "['$2']==['8']}
    -e[^-1] "Apply command '$1' on a-b channels of image$?." -v -
    -repeat $! -l[$>]
      -split_opacity -to_rgb[0] -rgb2lab[0] -s[0] c
      -+[1] 86 -*[1] 1.38587 -+[2] 108 -*[2] 1.25616
      -a[1,2] c -_apply_channels_old[1] "$1" -channels[1] 0,1 -s[1] c
      -/[1] 1.38587 --[1] 86 -/[2] 1.25616 --[2] 108
      -if {$3==2} -n[1] -86,98 -n[2] -108,95 -endif
      -a[0-2] c -lab2rgb[0] -a c
    -endl -done

  # a.
  -elif {['$2']==['a']" || "['$2']==['9']}
    -e[^-1] "Apply command '$1' on a-channel of image$?." -v -
    -repeat $! -l[$>]
      -split_opacity -to_rgb[0] -rgb2lab[0] -s[0] c
      -+[1] 86 -*[1] 1.38587 -_apply_channels_old[1] "$1" -channels[1] 0 -/[1] 1.38587 --[1] 86
      -if {$3==2} -n[1] -86,98 -endif
      -a[0-2] c -lab2rgb[0] -a c
    -endl -done

  # b.
  -elif {['$2']==['b']" || "['$2']==['10']}
    -e[^-1] "Apply command '$1' on b-channel of image$?." -v -
    -repeat $! -l[$>]
      -split_opacity -to_rgb[0] -rgb2lab[0] -s[0] c
      -+[2] 108 -*[2] 1.25616 -_apply_channels_old[2] "$1" -channels[2] 0 -/[2] 1.25616 --[2] 108
      -if {$3==2} -n[1] -108,95 -endif
      -a[0-2] c -lab2rgb[0] -a c
    -endl -done

  # H.
  -elif {['$2']==['h']" || "['$2']==['11']}
    -e[^-1] "Apply command '$1' on hue H of image$?." -v -
    -repeat $! -l[$>]
      -split_opacity -to_rgb[0] -rgb2hsv[0] -s[0] c
      -*[0] 0.708333 -_apply_channels_old[0] "$1" -channels[0] 0 -/[0] 0.708333
      -if {$3==1} -%[0] 360 -elif {$3==2} -n[0] 0,360 -endif
      -a[0-2] c -hsv2rgb[0] -a c
    -endl -done

  # S.
  -elif {['$2']==['s']" || "['$2']==['12']}
    -e[^-1] "Apply command '$1' on saturation S of image$?." -v -
    -repeat $! -l[$>]
      -split_opacity -to_rgb[0] -rgb2hsv[0] -s[0] c
      -*[1] 255 -_apply_channels_old[1] "$1" -channels[1] 0 -/[1] 255
      -if {$3==1} -c[1] 0,1 -elif {$3==2} -n[1] 0,1 -endif
      -a[0-2] c -hsv2rgb[0] -a c
    -endl -done

  # V.
  -elif {['$2']==['v']" || "['$2']==['13']}
    -e[^-1] "Apply command '$1' on value V of image$?." -v -
    -repeat $! -l[$>]
      -split_opacity -to_rgb[0] -rgb2hsv[0] -s[0] c
      -*[2] 255 -_apply_channels_old[2] "$1" -channels[2] 0 -/[2] 255
      -if {$3==1} -c[2] 0,1 -elif {$3==2} -n[2] 0,1 -endif
      -a[0-2] c -hsv2rgb[0] -a c
    -endl -done

  # K.
  -elif {['$2']==['k']" || "['$2']==['14']}
    -e[^-1] "Apply command '$1' on key channel K of image$?." -v -
    -repeat $! -l[$>]
      -split_opacity -to_rgb[0] -rgb2cmyk[0] -s[0] c
      -_apply_channels_old[3] "$1" -channels[3] 0
      -if {$3==1} -c[3] 0,255 -elif {$3==2} -n[3] 0,255 -endif
      -a[0-3] c -cmyk2rgb[0] -a c
    -endl -done

  # Cg.
  -elif {['$2']==['cg']" || "['$2']==['15']}
    -e[^-1] "Apply command(s) '$1' on green chrominance Cg of image$?." -v -
    -repeat $! -l[$>]
      -split_opacity -to_rgb[0] -s[0] c -rv[1,2] -a[0-2] c -rgb2ycbcr[0] -s[0] c
      -_apply_channels_old[1] "$1" -channels[1] 0
      -if {$3==1} -c[1] 0,255 -elif {$3==2} -n[1] 0,255 -endif
      -a[0-2] c -ycbcr2rgb[0] -s[0] c -rv[1,2] -a c
    -endl -done

  # c-h.
  -elif {['$2']==['ch']" || "['$2']==['16']}
    -e[^-1] "Apply command '$1' on c-h channels of image$?." -v -
    -repeat $! -l[$>]
      -split_opacity -to_rgb[0] -rgb2lch[0] -s[0] c
      -*[1] 2.55 -+[2] {pi} -*[2] {255/(2*pi)}
      -a[1,2] c -_apply_channels_old[1] "$1" -channels[1] 0,1 -s[1] c
      -/[1] 2.55 -/[2] {255/(2*pi)} --[2] {pi}
      -if {$3==2} -n[1] 0,100 -n[2] -{pi},{pi} -endif
      -a[0-2] c -lch2rgb[0] -a c
    -endl -done

  # c.
  -elif {['$2']==['c']" || "['$2']==['17']}
    -e[^-1] "Apply command '$1' on c-channel of image$?." -v -
    -repeat $! -l[$>]
      -split_opacity -to_rgb[0] -rgb2lch[0] -s[0] c
      -*[1] 2.55 -_apply_channels_old[1] "$1" -channels[1] 0 -/[1] 2.55
      -if {$3==1} -c[1] 0,100 -elif {$3==2} -n[1] 0,100 -endif
      -a[0-2] c -lch2rgb[0] -a c
    -endl -done

  # H.
  -elif {['$2']==['h']" || "['$2']==['18']}
    -e[^-1] "Apply command '$1' on h-channel of image$?." -v -
    -repeat $! -l[$>]
      -split_opacity -to_rgb[0] -rgb2lch[0] -s[0] c
      -+[2] {pi} -*[2] {255/(2*pi)} -_apply_channels_old[2] "$1" -channels[2] 0 -/[2] {255/(2*pi)} --[2] {pi}
      -if {$3==2} -n[2] -{pi},{pi} -endif
      -a[0-2] c -lch2rgb[0] -a c
    -endl -done

  # Red.
  -elif {['$2']==['r']" || "['$2']==['19']}
    -e[^-1] "Apply command '$1' on red channel R of image$?." -v -
    -repeat $! -l[$>]
      -split_opacity -to_rgb[0] -s[0] c
      -_apply_channels_old[0] "$1"
      -if {$3==1} -c[0] 0,255 -elif {$3==2} -n[0] 0,255 -endif
      -to_gray[0]
      -a c
    -endl -done

  # Green.
  -elif {['$2']==['g']" || "['$2']==['20']}
    -e[^-1] "Apply command '$1' on green channel G of image$?." -v -
    -repeat $! -l[$>]
      -split_opacity -to_rgb[0] -s[0] c
      -_apply_channels_old[1] "$1"
      -if {$3==1} -c[1] 0,255 -elif {$3==2} -n[1] 0,255 -endif
      -to_gray[1]
      -a c
    -endl -done

  # Blue.
  -elif {['$2']==['b']" || "['$2']==['21']}
    -e[^-1] "Apply command '$1' on blue channel B of image$?." -v -
    -repeat $! -l[$>]
      -split_opacity -to_rgb[0] -s[0] c
      -_apply_channels_old[2] "$1"
      -if {$3==1} -c[2] 0,255 -elif {$3==2} -n[2] 0,255 -endif
      -to_gray[2]
      -a c
    -endl -done

  # Alpha.
  -elif {['$2']==['alpha']" || "['$2']==['22']}
    -e[^-1] "Apply command '$1' on alpha channel A of image$?." -v -
    -repeat $! -l[$>]
      -to_rgba -s c
      -_apply_channels_old[3] "$1"
      -if {$3==1} -c[3] 0,255 -elif {$3==2} -n[3] 0,255 -endif
      -to_gray[3]
      -a c
    -endl -done

  -endif
  -v +

_apply_channels_old :
  ${1--1} -k[0]

#@gmic solidify
#@gmic : Replace transparent regions of a RGBA image by morphologically interpolated color.
#@gmic : $ image.jpg --luminance -ge. 120 -*. 255 -append c --solidify -display_rgba
solidify :
  -e[^-1] "Replace transparent regions of RGBA image$? by morphologically interpolated colors."
  -v - -repeat $! -l[$>] nm={0,n} -to_a
    [-1] -split_opacity.. ->=.. 50% -*. [-2]
    -replace_color. 0,0,0,0,0,0,-1,-1,-1,-1 -to_rgb. -d
    -do
      --dilate. 3
      -replace_color.. 0,0,-1,-1,-1,1000,1000,1000
      -erode.. 3
      -replace_color.. 0,0,1000,1000,1000,-1,-1,-1
      -+[-2,-1] -/. 2
      -d
      -j. [-3],0,0,0,0,1,[-2]
    -while {im<0}
    -k.
  -nm $nm -endl -done -v +

#@gmic solidify_linear : _sigma>=1,_dsigma>=1,0<=_precision<=1
#@gmic : Replace transparent regions of a RGBA image by linearly interpolated color.
#@gmic : Default values: 'sigma=1.5', 'dsigma=1' and 'precision=0.5'.
#@gmic : $ image.jpg --luminance -ge. 120 -*. 255 -append c --solidify_linear , -display_rgba
solidify_linear : -check "${1=1.5}>=1 && ${2=1}>=1 && ${3=0.5}>=0 && $3<=1"
  -e[^-1] "Replace transparent regions of RGBA image$? by linearly interpolated colors, with sigma $1, dsigma $2 and precision $3."
  -v - -repeat $! -l[$>]
    -split_opacity
    -if {$!>1}
      ->=. 50% -*.. [-1]
      sigma=$1 -do
        N={v=round(3*$sigma);min(33,max(3,v+1-(v%2)))}
        $N,$N -=. 1,50%,50% -distance. 1 -*. {-1/$sigma^2} -exp. -normalize_sum.
        --convolve[-3,-2] [-1] -rm...
        -max. 1e-5 -/[-2,-1]
        --dilate.. {v=round((1/3-$N/6)*$3+$N/2);max(3,v+1-(v%2))}
        --... [-1] -*.. [-3] -rm...
        --[-3,-2]
        sigma*=2
      -while {!im}
     -rm.
   -endif
 -endl -done -v +

#@gmic solidify_watershed
#@gmic : Replace transparent regions of RGBA image by color propagation.
#@gmic : $ image.jpg --luminance -ge. 120 -*. 255 -append c --solidify_watershed -display_rgba
solidify_watershed :
  -e[^-1] "Replace transparent regions of RGBA image$? by color propagation."
  -v - -repeat $! -l[$>]
    -split_opacity
    -if {$!>1}
      -+[0] 1 ->=[1] 50% -*[0] [1] -distance[1] 1 -*[1] -1
      -watershed[0] [1] -rm[1]
    -endif
  -endl -done -v +

# Local Variables:
# mode: sh
# End:
#
# (End of G'MIC custom commands)
